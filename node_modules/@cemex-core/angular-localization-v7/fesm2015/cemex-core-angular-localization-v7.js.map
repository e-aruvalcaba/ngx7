{"version":3,"file":"cemex-core-angular-localization-v7.js.map","sources":["ng://@cemex-core/angular-localization-v7/lib/services/translation.service.ts","ng://@cemex-core/angular-localization-v7/lib/fromExponential.ts","ng://@cemex-core/angular-localization-v7/lib/services/formatter.service.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-currency-custom.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-currency.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/services/date-formatter.service.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date-time-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-number.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-time-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/angular-localization.module.ts","ng://@cemex-core/angular-localization-v7/lib/services/direction.service.ts","ng://@cemex-core/angular-localization-v7/lib/services/locale.service.ts","ng://@cemex-core/angular-localization-v7/lib/resolvers/translation.resolver.ts"],"sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, ReplaySubject } from 'rxjs';\n\nimport { ILanguage } from './../interfaces/language.interface';\nimport { ITranslationInterface } from '../interfaces/translation.interface';\n\ndeclare var global: any;\n\n@Injectable()\nexport class TranslationService implements ITranslationInterface {\n  public static TRANSLATION_PRODUCT_PATH = 'TRANSLATION_PRODUCT_PATH';\n  public static TRANSLATION_LANGUAGES = 'TRANSLATION_LANGUAGES';\n  public static DEFAULT_LANGUAGE_ISO = 'DEFAULT_LANGUAGE_ISO';\n  public static currentLanguage: ILanguage = undefined;\n\n  private static translations: any = {};\n  private static languages: ILanguage[] = [];\n\n  public languageLoaded = new ReplaySubject<boolean>(1);\n  private selectedLanguageSubject = new ReplaySubject<ILanguage>(1);\n  private languagesSubject = new ReplaySubject<ILanguage[]>(1);\n  // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver  ???\n\n  constructor(\n    private httpClient: HttpClient,\n    @Inject(TranslationService.TRANSLATION_PRODUCT_PATH)\n    @Optional()\n    private productPath: string,\n    @Inject(TranslationService.TRANSLATION_LANGUAGES)\n    @Optional()\n    private loadedLanguages: any,\n    @Inject(TranslationService.DEFAULT_LANGUAGE_ISO)\n    @Optional()\n    private defaultLanguageISO: any // e.g.: en_US from america region || en_UK from europe region.\n  ) {\n    if (!this.loadedLanguages) {\n      console.warn(\n        'The Translation Service can\\'t init without Injected Languages.'\n      );\n      console.warn(\n        'Inject the languages from your application: > ' +\n          '{ provide: \\'TRANSLATION_LANGUAGES, useValue: window[\\'CMX_LANGUAGES\\'] },\\''\n      );\n      return;\n    }\n\n    if (!defaultLanguageISO) {\n      console.warn('The Translation Service need defaultLanguageISO.');\n    }\n\n    TranslationService.languages = this.loadedLanguages;\n    const localStorageLanguage = (global as any).localStorage.getItem(\n      'language'\n    );\n\n    const allKeys = Object.keys(TranslationService.translations);\n    if (allKeys.length === 0) {\n      this.setLanguage(localStorageLanguage || defaultLanguageISO);\n    } else {\n      this.languageLoaded.next(true);\n      // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?\n    }\n  }\n\n  /**\n   * @description Gets the labels data from the server.\n   * @param $lang Language code for the file\n   */\n  public getTranslations($lang: string): Observable<any> {\n    const endpoint = `/translate/translate/${this.productPath}/${$lang}`;\n    return this.httpClient.get<any>(endpoint);\n  }\n\n  /**\n   * @description Observable to gets the languages that exist in the server\n   */\n  public getLanguages(): Observable<ILanguage[]> {\n    return this.languagesSubject.asObservable();\n  }\n\n  public getSelectedLanguage(): Observable<ILanguage> {\n    return this.selectedLanguageSubject.asObservable();\n  }\n\n  /**\n   * @description Retrieve the public translation of a label\n   * @param $textId Label id as written in the json file\n   */\n  public pt($textId: string): string {\n    const textValue = TranslationService.translations[$textId];\n    if (!textValue || textValue === undefined) {\n      return 'NOT:' + $textId;\n    }\n    return textValue;\n  }\n\n  /**\n   * @description Retrieve the public translation of a label\n   * @param $textId Label id as written in the json file\n   */\n  public getLabel($textId: string): string {\n    const textValue = TranslationService.translations[$textId];\n    if (!textValue || textValue === undefined) {\n      return 'NOT:' + $textId;\n    }\n    return textValue;\n  }\n\n  /**\n   * @description Retrieve language published on the server.\n   * @param $languageISO Can be the country code or the language iso combination\n   */\n  public getLanguage($languageISO: string): ILanguage {\n    if ($languageISO !== undefined && $languageISO !== null) {\n      let langValue: ILanguage;\n\n      langValue = TranslationService.languages.find(language => {\n        return (\n          language.languageISO === $languageISO ||\n          language.countryCode.toLowerCase() === $languageISO.toLowerCase() ||\n          language.languageISO.includes($languageISO)\n        );\n      });\n\n      // if the language cannot reached, go for default\n      if (langValue === undefined) {\n        console.warn('The Language cannot reached', $languageISO);\n        langValue = this.getDefaultLanguage();\n      }\n\n      langValue.momentConfig = this.getMomentConfig(langValue);\n\n      return langValue;\n    } else {\n      console.warn('$languageIso param is undefined.');\n      return this.getDefaultLanguage();\n    }\n  }\n\n  /**\n   * @description Retrieve language published on the server.\n   * @param $countryCode Can be the country code or the language iso combination\n   */\n  public getLanguageByCountryCode($countryCode: string): ILanguage {\n    if ($countryCode !== undefined && $countryCode !== null) {\n      let langValue: ILanguage;\n      const countryLan: ILanguage[] = TranslationService.languages.filter(\n        $language => {\n          return (\n            $language.countryCode.toLowerCase() === $countryCode.toLowerCase()\n          );\n        }\n      );\n\n      if (countryLan.length > 1) {\n        const languageCode = sessionStorage.getItem('language');\n        langValue = countryLan.find($language => {\n          return (\n            $language.languageISO.toLowerCase() === languageCode.toLowerCase()\n          );\n        });\n      } else {\n        langValue =\n          countryLan && countryLan.length > 0 ? countryLan[0] : undefined;\n      }\n\n      // if the language cannot reached, go for default\n      if (langValue === undefined) {\n        console.warn('The Language cannot reached', $countryCode);\n        langValue = this.getDefaultLanguage();\n      }\n\n      langValue.momentConfig = this.getMomentConfig(langValue);\n\n      return langValue;\n    } else {\n      console.warn('$countryCode param is undefined.');\n      return this.getDefaultLanguage();\n    }\n  }\n\n  /**\n   * @description Set language by languageISO or CountryCode.\n   * @param $languageISO Can be the country code or the language iso combination\n   */\n  public setLanguage($languageISO: string) {\n    this.selectedLanguage = this.getLanguage($languageISO);\n\n    for (const lang of TranslationService.languages) {\n      lang.isSelected = lang.languageISO === this.selectedLanguage.languageISO;\n      lang.dir = lang.textFloat === 'right' ? 'rtl' : 'ltr';\n      lang.rtl = lang.dir === 'rtl' ? true : false;\n    }\n\n    this.getTranslations(this.selectedLanguage.languageISO).subscribe(\n      translations => this.populateTranslation(translations)\n    );\n  }\n\n  public populateTranslation($result: any) {\n    TranslationService.translations = $result;\n\n    // emit changes until populate is completed\n    localStorage.setItem('language', this.selectedLanguage.languageISO);\n    sessionStorage.setItem('language', this.selectedLanguage.languageISO);\n    this.languageLoaded.next(true);\n    // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?\n    this.selectedLanguageSubject.next(this.selectedLanguage);\n    this.languagesSubject.next(TranslationService.languages);\n  }\n\n  public get selectedLanguage() {\n    return TranslationService.currentLanguage;\n  }\n\n  public set selectedLanguage(language: ILanguage) {\n    TranslationService.currentLanguage = language;\n  }\n\n  public getDefaultLanguage() {\n    let defaultLangValue: ILanguage;\n\n    defaultLangValue = TranslationService.languages.find(language => {\n      return (\n        language.languageISO === this.defaultLanguageISO ||\n        language.countryCode.toLowerCase() ===\n          this.defaultLanguageISO.toLowerCase() ||\n        language.languageISO.includes(this.defaultLanguageISO)\n      );\n    });\n\n    if (defaultLangValue === undefined) {\n      console.warn(\n        'The Default Language cannot reached',\n        this.defaultLanguageISO\n      );\n\n      defaultLangValue = TranslationService.languages[0];\n      console.warn(\n        'Trying get the first language',\n        defaultLangValue.languageISO\n      );\n    } else {\n      console.warn('The Default Language is', defaultLangValue.languageISO);\n    }\n\n    return defaultLangValue;\n  }\n\n  public getLanguagesByCountryCode(countryCode: string): ILanguage[] {\n    const languagesByContryCode: ILanguage[] = TranslationService.languages.filter(\n      language =>\n        language.countryCode.toLowerCase() === countryCode.toLowerCase()\n    );\n    return languagesByContryCode;\n  }\n\n  private getMomentConfig(language) {\n    return {\n      months: language.monthNames.split(','),\n      monthsShort: language.shortDayMonths.split(','),\n      weekdays: language.dayNames.split(','),\n      weekdaysMin: language.shortDayNames2.split(','),\n      weekdaysShort: language.shortDayNames.split(',')\n    };\n  }\n}\n","/**\n * From https://github.com/shrpne/from-exponential\n * Can't install the package beacause it is ES6, UglifyJS on its version compatible with Webpack 3 can't do ES6\n * The code needs to be copied locally so Typescript could compile it to ES5\n * or just upgrade to Webpack 4 and use the webpack-uglify-plugin\n */\n\n/**\n * Return two parts array of exponential number\n * @param num - number or array of its parts\n */\nexport function getExponentialParts(num) {\n  return Array.isArray(num) ? num : String(num).split(/[eE]/);\n}\n\n/**\n *\n * @param num - number or array of its parts\n */\nexport function isExponential(num) {\n  const eParts = getExponentialParts(num);\n  return !Number.isNaN(Number(eParts[1]));\n}\n\n/**\n * Converts exponential notation to a human readable string\n * @param num - number or array of its parts\n */\nexport default function fromExponential(num) {\n  const eParts = getExponentialParts(num);\n  if (!isExponential(eParts)) {\n    return eParts[0];\n  }\n\n  const sign = eParts[0][0] === '-' ? '-' : '';\n  const digits = eParts[0].replace(/^-/, '');\n  const digitsParts = digits.split('.');\n  const wholeDigits = digitsParts[0];\n  const fractionDigits = digitsParts[1] || '';\n  let e = Number(eParts[1]);\n\n  if (e === 0) {\n    return `${sign + wholeDigits}.${fractionDigits}`;\n  } else if (e < 0) {\n    // move dot to the left\n    const countWholeAfterTransform = wholeDigits.length + e;\n    if (countWholeAfterTransform > 0) {\n      // transform whole to fraction\n      const wholeDigitsAfterTransform = wholeDigits.substr(\n        0,\n        countWholeAfterTransform\n      );\n      const wholeDigitsTransformedToFracton = wholeDigits.substr(\n        countWholeAfterTransform\n      );\n      return `${sign +\n        wholeDigitsAfterTransform}.${wholeDigitsTransformedToFracton}${fractionDigits}`;\n    } else {\n      // not enough whole digits: prepend with fractional zeros\n\n      // first e goes to dotted zero\n      let zeros = '0.';\n      e += 1;\n      while (e) {\n        zeros += '0';\n        e += 1;\n      }\n      return sign + zeros + wholeDigits + fractionDigits;\n    }\n  } else {\n    // move dot to the right\n    const countFractionAfterTransform = fractionDigits.length - e;\n    if (countFractionAfterTransform > 0) {\n      // transform fraction to whole\n      // countTransformedFractionToWhole = e\n      const fractionDigitsAfterTransform = fractionDigits.substr(e);\n      const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n      return `${sign +\n        wholeDigits +\n        fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n    } else {\n      // not enough fractions: append whole zeros\n      let zerosCount = -countFractionAfterTransform;\n      let zeros = '';\n      while (zerosCount) {\n        zeros += '0';\n        zerosCount -= 1;\n      }\n      return sign + wholeDigits + fractionDigits + zeros;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as moment_ from 'moment';\n\nimport { TranslationService } from './translation.service';\nimport fromExponential from './../fromExponential';\n\nconst moment = moment_;\n\nexport enum DateTimeActions {\n  ConvertToLocal,\n  NoConvertToLocal\n}\n\n@Injectable()\nexport class FormatterService {\n  constructor() {}\n\n  // DATES\n\n  /**\n   * @description Transforms a valid string to a date object\n   * @param date The date as string\n   * @returns A javascript date object\n   */\n  public getDateObject(date: string): Date {\n    try {\n      const auxDate = date.replace(/-g/, '/');\n      const bits: any = auxDate.split(/\\D/);\n      const month = parseInt(bits[1], undefined) - 1;\n      if (bits.length === 3) {\n        return new Date(bits[0], month, bits[2]);\n      } else {\n        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);\n      }\n    } catch ($exception) {\n      return undefined;\n    }\n  }\n\n  public formatDateTimeMoment(\n    date,\n    languageISO,\n    format,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ) {\n    if (TranslationService.currentLanguage) {\n      moment.updateLocale(\n        TranslationService.currentLanguage.languageISO.substr(0, 2),\n        TranslationService.currentLanguage.momentConfig\n      );\n    }\n\n    if (action === DateTimeActions.NoConvertToLocal) {\n      return moment(date)\n        .locale(languageISO.substr(0, 2))\n        .format(format);\n    }\n\n    return this.utcToLocal(date)\n      .locale(languageISO.substr(0, 2))\n      .format(format);\n  }\n\n  /**\n   * @description Format a number by TypeScript Number function\n   * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'\n   * @param numberEntry: value to format\n   * @param languageISO: specifict language to format\n   * @param decimalNumbers: quantity decimals to set in the format\n   * @returns A value formatted\n   */\n  public formatNumberTS(numberEntry, languageISO, decimalNumbers) {\n    if (isNaN(numberEntry) || numberEntry === null) {\n      return 0;\n    }\n\n    return Number(\n      this.round(numberEntry, decimalNumbers).toFixed(decimalNumbers)\n    ).toLocaleString(languageISO + '-u-nu-latn', {\n      minimumFractionDigits: numberEntry % 1 === 0 ? 0 : decimalNumbers\n    });\n  }\n\n  public utcToLocal(dateEntry) {\n    return moment.utc(dateEntry).local();\n  }\n\n  public localToUtc(date, format?: any) {\n    if (format !== undefined) {\n      return moment(date, 'YYYY-MM-DD THH:mm:ssZ')\n        .utc()\n        .format(format);\n    } else {\n      return moment(date, 'YYYY-MM-DD THH:mm:ssZ')\n        .utc()\n        .format();\n    }\n  }\n\n  // expected time '00:00:00'\n  public timeToMinutes(time) {\n    const timeSplit = time.split(':');\n\n    const hours = +timeSplit[0];\n    const minutes = +timeSplit[1];\n    const seconds = +timeSplit[2];\n\n    return hours * 60 + minutes + this.roundToDown(seconds / 60);\n  }\n\n  // NUMBERS\n\n  /**\n   * @description Formats a number as a currency preserving its precision.\n   * In order the keep the precision the number must be passed as a string\n   * @param value The number value to format\n   * @param numberDecimals The number of decimals to use\n   * @param thousandSeparator The string character to use when separating numbers\n   * @param decimalSeparator The string character to use when separating the decimal and integer part\n   * @returns The number as a currency string\n   */\n  public formatNumber(\n    value: number | string,\n    numberDecimals?: number,\n    thousandSeparator?: string,\n    decimalSeparator?: string\n  ): string {\n    // tslint:disable-next-line: triple-equals\n    if (value == undefined || value.toString() == '' || isNaN(value as any)) {\n      console.warn('Not a valid number to format');\n      return '';\n    }\n\n    // tslint:disable-next-line:triple-equals\n    numberDecimals = numberDecimals != undefined ? numberDecimals : 2;\n    // tslint:disable-next-line:triple-equals\n    thousandSeparator =\n      thousandSeparator !== undefined ? thousandSeparator : ',';\n    // tslint:disable-next-line:triple-equals\n    decimalSeparator = decimalSeparator !== undefined ? decimalSeparator : '.';\n\n    const completeNumber: string = fromExponential(value);\n\n    const sign: string = value < 0 ? '-' : '';\n    const absoluteValue: string =\n      value < 0 ? completeNumber.split('-')[1] : completeNumber;\n    const truncatedDecimalValue: string =\n      absoluteValue.split('.')[1] &&\n      absoluteValue.split('.')[1].slice(0, numberDecimals);\n\n    const integerPart: string = absoluteValue.split('.')[0];\n    const floatingPart: string = this.rightPad(\n      truncatedDecimalValue,\n      '0',\n      numberDecimals\n    );\n\n    let formattedInteger: string = integerPart;\n\n    if (Number(integerPart) >= 1000) {\n      formattedInteger = integerPart.replace(/./g, (c, i, a) => {\n        return i && c !== decimalSeparator && (a.length - i) % 3 === 0\n          ? thousandSeparator + c\n          : c;\n      });\n    }\n\n    // tslint:disable-next-line:max-line-length\n    const formattedNumber = `${sign}${formattedInteger}${\n      floatingPart.length > 0 ? decimalSeparator : ''\n    }${floatingPart}`;\n\n    return formattedNumber;\n  }\n\n  public round(value: number, decimals: number) {\n    let type = '';\n    type = 'round';\n    const valueDecimals = value % 1;\n    if (valueDecimals !== 0.5) {\n      return Number(Math[type](value + 'e' + decimals) + 'e-' + decimals);\n    } else {\n      return Number(value);\n    }\n  }\n\n  public roundToDown(value: number) {\n    return Math.floor(value);\n  }\n\n  // STRINGS\n  public removeFirstZeros(value: string): string {\n    return value.replace(/^0+/, '');\n  }\n\n  public pad(text: string, wildcard: string, length: number): string {\n    let result = text;\n    while (result.length < length) {\n      result = wildcard + result;\n    }\n    return result;\n  }\n\n  /**\n   * @description Fills up a string with the specified character appending it to the right till lenght is achieved\n   * @param text String to add padding\n   * @param wildcard Character that's gonne be repeated\n   * @param lenght The desired length\n   */\n  public rightPad(\n    text: number | string | undefined,\n    wildcard: string,\n    length: number\n  ): string {\n    if (text === undefined || text === null || text === '') {\n      return wildcard.repeat(length);\n    }\n    let str = text.toString();\n    while (str.length < length) {\n      str += wildcard;\n    }\n\n    return str;\n  }\n\n  public formatMeasureUnit(measureUnit) {\n    switch (measureUnit) {\n      case 'YD3':\n        return 'YdÂ³';\n      case 'M3':\n        return 'MÂ³';\n      default:\n        return measureUnit;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from './../services/formatter.service';\n\n@Pipe({\n  name: 'cmxCurrencyCustom',\n  pure: true\n})\nexport class CmxCurrencyCustomPipe implements PipeTransform {\n  private value = '';\n\n  constructor(private formatter: FormatterService) {}\n\n  public transform(\n    $value: any,\n    $currencySymbol: string,\n    $decimalNumbers: string | number,\n    $thousandSeparator: string,\n    $decimalSeparator: string,\n    $floatCurrencySymbolRight?: boolean\n  ): string {\n    try {\n      if ($value !== undefined && isNaN($value) === false) {\n        this.value = $value.toString();\n        $decimalNumbers = parseInt($decimalNumbers.toString(), undefined);\n        if ($value < 0) {\n          // value is negative\n          const v = parseFloat($value.toString().replace(/\\-/g, ''));\n          const $aux: string = this.formatter.formatNumber(\n            v,\n            $decimalNumbers,\n            $thousandSeparator,\n            $decimalSeparator\n          );\n          if ($floatCurrencySymbolRight) {\n            this.value = '-' + $aux + $currencySymbol;\n          } else {\n            this.value = '-' + $currencySymbol + $aux;\n          }\n        } else {\n          this.value =\n            $currencySymbol +\n            this.formatter.formatNumber(\n              $value,\n              $decimalNumbers,\n              $thousandSeparator,\n              $decimalSeparator\n            );\n        }\n      } else {\n        this.value = '';\n      }\n    } catch ($exception) {\n      console.error('Value trying to transform: ', $value);\n      console.error($exception);\n      this.value = '';\n    }\n    return this.value;\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Pipe, PLATFORM_ID, PipeTransform } from '@angular/core';\n\nimport { ILanguage } from './../interfaces/language.interface';\nimport { FormatterService } from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxCurrency',\n  pure: true\n})\nexport class CmxCurrencyPipe implements PipeTransform {\n  // FIXME: I should be injecting the window object but that will break the implementation. I will not do that just yet.\n  // Making this public so I can access it in the test\n  public window: any;\n\n  constructor(\n    private formatter: FormatterService,\n    private translation: TranslationService,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.window = window;\n    }\n  }\n\n  public transform(value: any, countryCode?: string): string {\n    if (value === '' || value == null || isNaN(value as any)) {\n      console.warn('The value is not a number');\n      return '';\n    }\n\n    countryCode = countryCode || this.window.sessionStorage.getItem('country');\n\n    // tslint:disable-next-line:triple-equals\n    if (countryCode == undefined) {\n      console.warn(`Can't retrieve countryCode`);\n      return '';\n    }\n\n    const lang: ILanguage = this.translation.getLanguageByCountryCode(\n      countryCode\n    );\n\n    const symbolPosition =\n      (lang.currencySymbolFloat && lang.currencySymbolFloat.toLowerCase()) ||\n      'left';\n    const currencySymbol = lang.currencySymbol || '$';\n\n    const formattedNumber: string = this.formatter.formatNumber(\n      value,\n      lang && lang.decimalNumbersMoney,\n      lang && lang.thousandSeparator,\n      lang && lang.decimalSeparator\n    );\n\n    const numberWithCurrency =\n      symbolPosition === 'left'\n        ? `${currencySymbol}${formattedNumber}`\n        : `${formattedNumber}${currencySymbol}`;\n\n    return '&lrm;' + numberWithCurrency;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  FormatterService,\n  DateTimeActions\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDateMoment',\n  pure: false\n})\nexport class CmxDateMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatDate,\n      action\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DateFormatterService {\n  constructor() {\n    //\n  }\n\n  /**\n   * @description Formats a date object to a string given a date format from a language\n   * @param value The date value to format\n   * @param format The format to comply, e.x. DD MM, YYYY\n   * @param daysNames String array of the weekdays' names\n   * @param monthsNames String array of the months' names\n   * @returns String of the formatted date\n   */\n  public format(\n    $value: Date,\n    $format: string,\n    $daysNames: string[],\n    $monthsNames: string[]\n  ): string {\n    let dateAsString = '';\n    let $separator = '/';\n    let day: string;\n    let month: string;\n    let year: string;\n    let $formats = $format.split($separator);\n    if ($formats.length === 1) {\n      $separator = '-';\n      $formats = $format.split($separator);\n    }\n    if ($formats.length === 1) {\n      $separator = ' ';\n      $formats = $format.split($separator);\n    }\n    if ($formats.length === 1) {\n      $separator = '.';\n      $formats = $format.split($separator);\n    }\n    $formats.forEach(($formatItem, $index) => {\n      const $auxValue: any = $value;\n      const $formatCode = $formatItem.replace(',', '');\n      if ($formatItem.includes('d') || $formatItem.includes('D')) {\n        day = this.getDay($auxValue, $formatCode, $daysNames);\n        $formatItem = $formatItem.replace($formatCode, day);\n      } else if ($formatItem.includes('m') || $formatItem.includes('M')) {\n        month = this.getMonth($auxValue, $formatCode, $monthsNames);\n        $formatItem = $formatItem.replace($formatCode, month);\n      } else if ($formatItem.includes('y') || $formatItem.includes('Y')) {\n        year = this.getYear($auxValue, $formatCode);\n        $formatItem = $formatItem.replace($formatCode, year);\n      }\n      if ($index !== $formats.length - 1) {\n        dateAsString += $formatItem + $separator;\n      } else {\n        dateAsString += $formatItem;\n      }\n    });\n    return dateAsString;\n  }\n\n  /**\n   * @description Transforms a valid string to a date object\n   * @param date The date as string\n   * @returns A javascript date object\n   */\n  public getDateObject(date: string): Date {\n    try {\n      const auxDate = date.replace(/-g/, '/');\n      const bits: any = auxDate.split(/\\D/);\n      const month = parseInt(bits[1], undefined) - 1;\n      if (bits.length === 3) {\n        return new Date(bits[0], month, bits[2]);\n      } else {\n        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);\n      }\n    } catch ($exception) {\n      return undefined;\n    }\n  }\n\n  private addZero($number: number): string {\n    return $number < 10 ? '0' + $number : $number.toString();\n  }\n\n  private getDay($date: Date, $format: string, $daysNames: string[]): string {\n    let day: string;\n    if ($format.length === 4) {\n      // requires the complete name of the day\n      day = $daysNames[$date.getDay()];\n    } else if ($format.length === 3) {\n      // requires an abbreviation of the day's name\n      day = $daysNames[$date.getDay()].substring(0, 3);\n    } else if ($format.length === 2 || $format.length === 1) {\n      // requires the value of the day\n      day = this.addZero($date.getDate());\n    }\n    // check if names should use lower or uppercase\n    if ($format === $format.toLowerCase()) {\n      // the format uses d\n      day = day.toLowerCase();\n    }\n    return day;\n  }\n\n  private getMonth(\n    $date: Date,\n    $format: string,\n    $monthsNames: string[]\n  ): string {\n    let month: string;\n    if ($format.length === 4) {\n      // requires the complete name of the month\n      month = $monthsNames[$date.getMonth()];\n    } else if ($format.length === 3) {\n      // requires an abbreviation of the day's name\n      month = $monthsNames[$date.getMonth()].substring(0, 3);\n    } else if ($format.length === 2) {\n      // requires the value of the day\n      month = this.addZero($date.getMonth() + 1);\n    }\n    // check if names should use lower or uppercase\n    if ($format === $format.toLowerCase()) {\n      // the format uses d\n      month = month.toLowerCase();\n    }\n    return month;\n  }\n\n  private getYear($date: Date, $format: string): string {\n    let year: string;\n    if ($format.length === 4) {\n      // requires the complete year\n      year = '' + $date.getFullYear();\n    } else {\n      // requires only the last 2 numbers of the year value\n      year = '' + $date.getFullYear();\n      year = year.substring(2);\n    }\n    return year;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ILanguage } from './../interfaces/language.interface';\nimport { DateFormatterService } from './../services/date-formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDate',\n  pure: true\n})\nexport class CmxDatePipe implements PipeTransform {\n  private value = '';\n  private monthsNames: string[] = [];\n  private daysNames: string[] = [];\n\n  constructor(\n    private translation: TranslationService,\n    private dateFormatter: DateFormatterService\n  ) {}\n\n  public transform(\n    $value: Date | string | number,\n    $countryCode?: string\n  ): string {\n    try {\n      if (typeof $value === 'number') {\n        $value = new Date($value);\n      }\n      if (typeof $value === 'string') {\n        $value = this.dateFormatter.getDateObject($value);\n      }\n      if ($countryCode === undefined || $countryCode === null) {\n        $countryCode = sessionStorage.getItem('country');\n      }\n      if ($value !== undefined && $value instanceof Date) {\n        const $currentLanguage: string = localStorage.getItem('language');\n        const $lang: ILanguage = this.translation.getLanguage(\n          $currentLanguage ? $currentLanguage : 'en_US'\n        );\n        this.daysNames = $lang.dayNames.split(',');\n        this.monthsNames = $lang.monthNames.split(',');\n        this.value = this.dateFormatter.format(\n          $value,\n          $lang.formatDate,\n          this.daysNames,\n          this.monthsNames\n        );\n      } else {\n        console.error('Date trying to transform: ', $value);\n        this.value = '';\n      }\n    } catch ($exception) {\n      console.error('Date trying to transform: ', $value);\n      console.error($exception);\n      this.value = '';\n    }\n    return this.value;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  DateTimeActions,\n  FormatterService\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDateTimeMoment',\n  pure: false\n})\nexport class CmxDateTimeMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatDate +\n        ' ' +\n        this.translationService.selectedLanguage.formatTime,\n      action\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxNumber',\n  pure: false\n})\nexport class CmxNumberPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(numberEntry) {\n    return this.formatterService.formatNumberTS(\n      numberEntry,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.decimalNumbers\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  DateTimeActions,\n  FormatterService\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxTimeMoment',\n  pure: false\n})\nexport class CmxTimeMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatTime,\n      action\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmxCurrencyCustomPipe } from './pipes/cmx-currency-custom.pipe';\nimport { CmxCurrencyPipe } from './pipes/cmx-currency.pipe';\nimport { CmxDateMomentPipe } from './pipes/cmx-date-moment.pipe';\nimport { CmxDatePipe } from './pipes/cmx-date.pipe';\nimport { CmxDateTimeMomentPipe } from './pipes/cmx-date-time-moment.pipe';\nimport { CmxNumberPipe } from './pipes/cmx-number.pipe';\nimport { CmxTimeMomentPipe } from './pipes/cmx-time-moment.pipe';\n\n@NgModule({\n  declarations: [\n    CmxCurrencyCustomPipe,\n    CmxCurrencyPipe,\n    CmxDateMomentPipe,\n    CmxDatePipe,\n    CmxDateTimeMomentPipe,\n    CmxNumberPipe,\n    CmxTimeMomentPipe\n  ],\n  exports: [\n    CmxCurrencyCustomPipe,\n    CmxCurrencyPipe,\n    CmxDateMomentPipe,\n    CmxDatePipe,\n    CmxDateTimeMomentPipe,\n    CmxNumberPipe,\n    CmxTimeMomentPipe\n  ],\n  imports: [CommonModule]\n})\nexport class AngularLocalizationModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ILanguageDirection } from '../interfaces/languageDirection.interface';\nimport { TranslationService } from './translation.service';\n\n@Injectable()\nexport class DirectionService implements ILanguageDirection {\n  private direction$: Subject<string> = new Subject();\n  private rtl$: Subject<boolean> = new Subject();\n\n  constructor(private translation: TranslationService) {\n    this.translation.getSelectedLanguage().subscribe((language: any) => {\n      this.direction$.next(language.direction);\n      this.rtl$.next(language.rtl);\n    });\n  }\n\n  public getDirection(): Observable<string> {\n    return this.direction$.asObservable();\n  }\n\n  public getRTL(): Observable<boolean> {\n    return this.rtl$.asObservable();\n  }\n\n  public getDirectionFor(languageCode: string) {\n    const language = this.translation.getLanguage(\n      languageCode.split(/[-_]/)[0]\n    );\n    this.direction$.next(language.dir);\n  }\n\n  public getRtlFor(languageCode: string) {\n    const language = this.translation.getLanguage(\n      languageCode.split(/[-_]/)[0]\n    );\n    this.rtl$.next(language.rtl);\n  }\n}\n","// Temporal service.\n// This be will replace by language config data.\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LocaleService {\n  constructor() {\n    // empty\n  }\n\n  public getConfiguration(languageISO) {\n    switch (languageISO) {\n      case 'en':\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec',\n          secondShort: 'sec',\n          weekdaysMin: 'Su,Mo,Tu,We,Th,Fr,Sa',\n          weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'\n        };\n      case 'es':\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Ene,Feb,Mar,Abr,May,Jun,Jul,Ago,Sep,Oct,Nov,Dic',\n          secondShort: 'seg',\n          weekdaysMin: 'Do,Lu,Ma,Mi,Ju,Vi,SÃ¡',\n          weekdaysShort: 'Dom,Lun,Mar,MiÃ©,Jue,Vie,SÃ¡b'\n        };\n      case 'fr':\n        return {\n          hourShort: 'h',\n          minuteShort: 'min',\n          monthsShort: 'Janv,FÃ©vr,Mars,Avr,Mai,Juin,Juil,AoÃ»t,Sept,Oct,Nov,DÃ©c',\n          secondShort: 'sec',\n          weekdaysMin: 'Di,Lu,Ma,Me,Je,Ve,Sa',\n          weekdaysShort: 'Dim,Lun,Mar,Mer,Jeu,Ven,Sam'\n        };\n      case 'de':\n        return {\n          hourShort: 'Std.',\n          minuteShort: 'Min.',\n          monthsShort: 'Jan,Febr,Mrz,Apr,Mai,Jun,Jul,Aug,Sept,Okt,Nov,Dez',\n          secondShort: 'Sekunde',\n          weekdaysMin: 'So,Mo,Di,Mi,Do,Fr,Sa',\n          weekdaysShort: 'So,Mo,Di,Mi,Do,Fr,Sa'\n        };\n      case 'he':\n        return {\n          hourShort: '×©×¢×',\n          minuteShort: '××§××ª',\n          monthsShort:\n            '×× ××³,×¤××¨×³,××¨×¥,××¤×¨×³,×××,××× ×,××××,××××³,×¡×¤××³,×××§×³,× ×××³,××¦××³',\n          secondShort: '×©× ×××',\n          weekdaysMin: '×,×,×,×,×,×,×©',\n          weekdaysShort: '××³,××³,××³,××³,××³,××³,×©×³'\n        };\n      case 'pl':\n        return {\n          hourShort: 'h',\n          minuteShort: 'min',\n          monthsShort: 'Sty,Lut,Mar,Kwi,Maj,Cze,Lip,Sie,Wrz,PaÅº,Lis,Gru',\n          secondShort: 's',\n          weekdaysMin: 'Nd,Pn,Wt,År,Cz,Pt,So',\n          weekdaysShort: 'Ndz,Pon,Wt,År,Czw,Pt,Sob'\n        };\n      default:\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec',\n          secondShort: 'sec',\n          weekdaysMin: 'Su,Mo,Tu,We,Th,Fr,Sa',\n          weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'\n        };\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot\n} from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { TranslationService } from './../services/translation.service';\n\n@Injectable()\nexport class TranslationResolver implements Resolve<boolean> {\n  constructor(private translationService: TranslationService) {}\n\n  public resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.translationService.languageLoaded;\n  }\n}\n"],"names":[],"mappings":"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"}
