/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * From https://github.com/shrpne/from-exponential
 * Can't install the package beacause it is ES6, UglifyJS on its version compatible with Webpack 3 can't do ES6
 * The code needs to be copied locally so Typescript could compile it to ES5
 * or just upgrade to Webpack 4 and use the webpack-uglify-plugin
 */
/**
 * Return two parts array of exponential number
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export function getExponentialParts(num) {
    return Array.isArray(num) ? num : String(num).split(/[eE]/);
}
/**
 *
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export function isExponential(num) {
    /** @type {?} */
    var eParts = getExponentialParts(num);
    return !Number.isNaN(Number(eParts[1]));
}
/**
 * Converts exponential notation to a human readable string
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export default function fromExponential(num) {
    /** @type {?} */
    var eParts = getExponentialParts(num);
    if (!isExponential(eParts)) {
        return eParts[0];
    }
    /** @type {?} */
    var sign = eParts[0][0] === '-' ? '-' : '';
    /** @type {?} */
    var digits = eParts[0].replace(/^-/, '');
    /** @type {?} */
    var digitsParts = digits.split('.');
    /** @type {?} */
    var wholeDigits = digitsParts[0];
    /** @type {?} */
    var fractionDigits = digitsParts[1] || '';
    /** @type {?} */
    var e = Number(eParts[1]);
    if (e === 0) {
        return sign + wholeDigits + "." + fractionDigits;
    }
    else if (e < 0) {
        // move dot to the left
        /** @type {?} */
        var countWholeAfterTransform = wholeDigits.length + e;
        if (countWholeAfterTransform > 0) {
            // transform whole to fraction
            /** @type {?} */
            var wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);
            /** @type {?} */
            var wholeDigitsTransformedToFracton = wholeDigits.substr(countWholeAfterTransform);
            return sign +
                wholeDigitsAfterTransform + "." + wholeDigitsTransformedToFracton + fractionDigits;
        }
        else {
            // not enough whole digits: prepend with fractional zeros
            // first e goes to dotted zero
            /** @type {?} */
            var zeros = '0.';
            e += 1;
            while (e) {
                zeros += '0';
                e += 1;
            }
            return sign + zeros + wholeDigits + fractionDigits;
        }
    }
    else {
        // move dot to the right
        /** @type {?} */
        var countFractionAfterTransform = fractionDigits.length - e;
        if (countFractionAfterTransform > 0) {
            // transform fraction to whole
            // countTransformedFractionToWhole = e
            /** @type {?} */
            var fractionDigitsAfterTransform = fractionDigits.substr(e);
            /** @type {?} */
            var fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);
            return sign +
                wholeDigits +
                fractionDigitsTransformedToWhole + "." + fractionDigitsAfterTransform;
        }
        else {
            // not enough fractions: append whole zeros
            /** @type {?} */
            var zerosCount = -countFractionAfterTransform;
            /** @type {?} */
            var zeros = '';
            while (zerosCount) {
                zeros += '0';
                zerosCount -= 1;
            }
            return sign + wholeDigits + fractionDigits + zeros;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUV4cG9uZW50aWFsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4LWNvcmUvYW5ndWxhci1sb2NhbGl6YXRpb24tdjcvIiwic291cmNlcyI6WyJsaWIvZnJvbUV4cG9uZW50aWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQVdBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFHO0lBQ3JDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlELENBQUM7Ozs7OztBQU1ELE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBRzs7UUFDekIsTUFBTSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQztJQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDOzs7Ozs7QUFNRCxNQUFNLENBQUMsT0FBTyxVQUFVLGVBQWUsQ0FBQyxHQUFHOztRQUNuQyxNQUFNLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDMUIsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7O1FBRUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTs7UUFDdEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQzs7UUFDcEMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztRQUMvQixXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQzs7UUFDNUIsY0FBYyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFOztRQUN2QyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV6QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDWCxPQUFVLElBQUksR0FBRyxXQUFXLFNBQUksY0FBZ0IsQ0FBQztLQUNsRDtTQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTs7O1lBRVYsd0JBQXdCLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ3ZELElBQUksd0JBQXdCLEdBQUcsQ0FBQyxFQUFFOzs7Z0JBRTFCLHlCQUF5QixHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQ2xELENBQUMsRUFDRCx3QkFBd0IsQ0FDekI7O2dCQUNLLCtCQUErQixHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQ3hELHdCQUF3QixDQUN6QjtZQUNELE9BQVUsSUFBSTtnQkFDWix5QkFBeUIsU0FBSSwrQkFBK0IsR0FBRyxjQUFnQixDQUFDO1NBQ25GO2FBQU07Ozs7Z0JBSUQsS0FBSyxHQUFHLElBQUk7WUFDaEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNQLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLEtBQUssSUFBSSxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNSO1lBQ0QsT0FBTyxJQUFJLEdBQUcsS0FBSyxHQUFHLFdBQVcsR0FBRyxjQUFjLENBQUM7U0FDcEQ7S0FDRjtTQUFNOzs7WUFFQywyQkFBMkIsR0FBRyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDN0QsSUFBSSwyQkFBMkIsR0FBRyxDQUFDLEVBQUU7Ozs7Z0JBRzdCLDRCQUE0QixHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztnQkFDdkQsZ0NBQWdDLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLE9BQVUsSUFBSTtnQkFDWixXQUFXO2dCQUNYLGdDQUFnQyxTQUFJLDRCQUE4QixDQUFDO1NBQ3RFO2FBQU07OztnQkFFRCxVQUFVLEdBQUcsQ0FBQywyQkFBMkI7O2dCQUN6QyxLQUFLLEdBQUcsRUFBRTtZQUNkLE9BQU8sVUFBVSxFQUFFO2dCQUNqQixLQUFLLElBQUksR0FBRyxDQUFDO2dCQUNiLFVBQVUsSUFBSSxDQUFDLENBQUM7YUFDakI7WUFDRCxPQUFPLElBQUksR0FBRyxXQUFXLEdBQUcsY0FBYyxHQUFHLEtBQUssQ0FBQztTQUNwRDtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRnJvbSBodHRwczovL2dpdGh1Yi5jb20vc2hycG5lL2Zyb20tZXhwb25lbnRpYWxcbiAqIENhbid0IGluc3RhbGwgdGhlIHBhY2thZ2UgYmVhY2F1c2UgaXQgaXMgRVM2LCBVZ2xpZnlKUyBvbiBpdHMgdmVyc2lvbiBjb21wYXRpYmxlIHdpdGggV2VicGFjayAzIGNhbid0IGRvIEVTNlxuICogVGhlIGNvZGUgbmVlZHMgdG8gYmUgY29waWVkIGxvY2FsbHkgc28gVHlwZXNjcmlwdCBjb3VsZCBjb21waWxlIGl0IHRvIEVTNVxuICogb3IganVzdCB1cGdyYWRlIHRvIFdlYnBhY2sgNCBhbmQgdXNlIHRoZSB3ZWJwYWNrLXVnbGlmeS1wbHVnaW5cbiAqL1xuXG4vKipcbiAqIFJldHVybiB0d28gcGFydHMgYXJyYXkgb2YgZXhwb25lbnRpYWwgbnVtYmVyXG4gKiBAcGFyYW0gbnVtIC0gbnVtYmVyIG9yIGFycmF5IG9mIGl0cyBwYXJ0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwb25lbnRpYWxQYXJ0cyhudW0pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkobnVtKSA/IG51bSA6IFN0cmluZyhudW0pLnNwbGl0KC9bZUVdLyk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSBudW0gLSBudW1iZXIgb3IgYXJyYXkgb2YgaXRzIHBhcnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0V4cG9uZW50aWFsKG51bSkge1xuICBjb25zdCBlUGFydHMgPSBnZXRFeHBvbmVudGlhbFBhcnRzKG51bSk7XG4gIHJldHVybiAhTnVtYmVyLmlzTmFOKE51bWJlcihlUGFydHNbMV0pKTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhIGh1bWFuIHJlYWRhYmxlIHN0cmluZ1xuICogQHBhcmFtIG51bSAtIG51bWJlciBvciBhcnJheSBvZiBpdHMgcGFydHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnJvbUV4cG9uZW50aWFsKG51bSkge1xuICBjb25zdCBlUGFydHMgPSBnZXRFeHBvbmVudGlhbFBhcnRzKG51bSk7XG4gIGlmICghaXNFeHBvbmVudGlhbChlUGFydHMpKSB7XG4gICAgcmV0dXJuIGVQYXJ0c1swXTtcbiAgfVxuXG4gIGNvbnN0IHNpZ24gPSBlUGFydHNbMF1bMF0gPT09ICctJyA/ICctJyA6ICcnO1xuICBjb25zdCBkaWdpdHMgPSBlUGFydHNbMF0ucmVwbGFjZSgvXi0vLCAnJyk7XG4gIGNvbnN0IGRpZ2l0c1BhcnRzID0gZGlnaXRzLnNwbGl0KCcuJyk7XG4gIGNvbnN0IHdob2xlRGlnaXRzID0gZGlnaXRzUGFydHNbMF07XG4gIGNvbnN0IGZyYWN0aW9uRGlnaXRzID0gZGlnaXRzUGFydHNbMV0gfHwgJyc7XG4gIGxldCBlID0gTnVtYmVyKGVQYXJ0c1sxXSk7XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICByZXR1cm4gYCR7c2lnbiArIHdob2xlRGlnaXRzfS4ke2ZyYWN0aW9uRGlnaXRzfWA7XG4gIH0gZWxzZSBpZiAoZSA8IDApIHtcbiAgICAvLyBtb3ZlIGRvdCB0byB0aGUgbGVmdFxuICAgIGNvbnN0IGNvdW50V2hvbGVBZnRlclRyYW5zZm9ybSA9IHdob2xlRGlnaXRzLmxlbmd0aCArIGU7XG4gICAgaWYgKGNvdW50V2hvbGVBZnRlclRyYW5zZm9ybSA+IDApIHtcbiAgICAgIC8vIHRyYW5zZm9ybSB3aG9sZSB0byBmcmFjdGlvblxuICAgICAgY29uc3Qgd2hvbGVEaWdpdHNBZnRlclRyYW5zZm9ybSA9IHdob2xlRGlnaXRzLnN1YnN0cihcbiAgICAgICAgMCxcbiAgICAgICAgY291bnRXaG9sZUFmdGVyVHJhbnNmb3JtXG4gICAgICApO1xuICAgICAgY29uc3Qgd2hvbGVEaWdpdHNUcmFuc2Zvcm1lZFRvRnJhY3RvbiA9IHdob2xlRGlnaXRzLnN1YnN0cihcbiAgICAgICAgY291bnRXaG9sZUFmdGVyVHJhbnNmb3JtXG4gICAgICApO1xuICAgICAgcmV0dXJuIGAke3NpZ24gK1xuICAgICAgICB3aG9sZURpZ2l0c0FmdGVyVHJhbnNmb3JtfS4ke3dob2xlRGlnaXRzVHJhbnNmb3JtZWRUb0ZyYWN0b259JHtmcmFjdGlvbkRpZ2l0c31gO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBub3QgZW5vdWdoIHdob2xlIGRpZ2l0czogcHJlcGVuZCB3aXRoIGZyYWN0aW9uYWwgemVyb3NcblxuICAgICAgLy8gZmlyc3QgZSBnb2VzIHRvIGRvdHRlZCB6ZXJvXG4gICAgICBsZXQgemVyb3MgPSAnMC4nO1xuICAgICAgZSArPSAxO1xuICAgICAgd2hpbGUgKGUpIHtcbiAgICAgICAgemVyb3MgKz0gJzAnO1xuICAgICAgICBlICs9IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2lnbiArIHplcm9zICsgd2hvbGVEaWdpdHMgKyBmcmFjdGlvbkRpZ2l0cztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbW92ZSBkb3QgdG8gdGhlIHJpZ2h0XG4gICAgY29uc3QgY291bnRGcmFjdGlvbkFmdGVyVHJhbnNmb3JtID0gZnJhY3Rpb25EaWdpdHMubGVuZ3RoIC0gZTtcbiAgICBpZiAoY291bnRGcmFjdGlvbkFmdGVyVHJhbnNmb3JtID4gMCkge1xuICAgICAgLy8gdHJhbnNmb3JtIGZyYWN0aW9uIHRvIHdob2xlXG4gICAgICAvLyBjb3VudFRyYW5zZm9ybWVkRnJhY3Rpb25Ub1dob2xlID0gZVxuICAgICAgY29uc3QgZnJhY3Rpb25EaWdpdHNBZnRlclRyYW5zZm9ybSA9IGZyYWN0aW9uRGlnaXRzLnN1YnN0cihlKTtcbiAgICAgIGNvbnN0IGZyYWN0aW9uRGlnaXRzVHJhbnNmb3JtZWRUb1dob2xlID0gZnJhY3Rpb25EaWdpdHMuc3Vic3RyKDAsIGUpO1xuICAgICAgcmV0dXJuIGAke3NpZ24gK1xuICAgICAgICB3aG9sZURpZ2l0cyArXG4gICAgICAgIGZyYWN0aW9uRGlnaXRzVHJhbnNmb3JtZWRUb1dob2xlfS4ke2ZyYWN0aW9uRGlnaXRzQWZ0ZXJUcmFuc2Zvcm19YDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm90IGVub3VnaCBmcmFjdGlvbnM6IGFwcGVuZCB3aG9sZSB6ZXJvc1xuICAgICAgbGV0IHplcm9zQ291bnQgPSAtY291bnRGcmFjdGlvbkFmdGVyVHJhbnNmb3JtO1xuICAgICAgbGV0IHplcm9zID0gJyc7XG4gICAgICB3aGlsZSAoemVyb3NDb3VudCkge1xuICAgICAgICB6ZXJvcyArPSAnMCc7XG4gICAgICAgIHplcm9zQ291bnQgLT0gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzaWduICsgd2hvbGVEaWdpdHMgKyBmcmFjdGlvbkRpZ2l0cyArIHplcm9zO1xuICAgIH1cbiAgfVxufVxuIl19