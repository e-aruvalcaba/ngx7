/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Pipe, PLATFORM_ID } from '@angular/core';
import { FormatterService } from './../services/formatter.service';
import { TranslationService } from './../services/translation.service';
var CmxCurrencyPipe = /** @class */ (function () {
    function CmxCurrencyPipe(formatter, translation, platformId) {
        this.formatter = formatter;
        this.translation = translation;
        this.platformId = platformId;
        if (isPlatformBrowser(platformId)) {
            this.window = window;
        }
    }
    /**
     * @param {?} value
     * @param {?=} countryCode
     * @return {?}
     */
    CmxCurrencyPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} countryCode
     * @return {?}
     */
    function (value, countryCode) {
        if (value === '' || value == null || isNaN((/** @type {?} */ (value)))) {
            console.warn('The value is not a number');
            return '';
        }
        countryCode = countryCode || this.window.sessionStorage.getItem('country');
        // tslint:disable-next-line:triple-equals
        if (countryCode == undefined) {
            console.warn("Can't retrieve countryCode");
            return '';
        }
        /** @type {?} */
        var lang = this.translation.getLanguageByCountryCode(countryCode);
        /** @type {?} */
        var symbolPosition = (lang.currencySymbolFloat && lang.currencySymbolFloat.toLowerCase()) ||
            'left';
        /** @type {?} */
        var currencySymbol = lang.currencySymbol || '$';
        /** @type {?} */
        var formattedNumber = this.formatter.formatNumber(value, lang && lang.decimalNumbersMoney, lang && lang.thousandSeparator, lang && lang.decimalSeparator);
        /** @type {?} */
        var numberWithCurrency = symbolPosition === 'left'
            ? "" + currencySymbol + formattedNumber
            : "" + formattedNumber + currencySymbol;
        return '&lrm;' + numberWithCurrency;
    };
    CmxCurrencyPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'cmxCurrency',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    CmxCurrencyPipe.ctorParameters = function () { return [
        { type: FormatterService },
        { type: TranslationService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return CmxCurrencyPipe;
}());
export { CmxCurrencyPipe };
if (false) {
    /** @type {?} */
    CmxCurrencyPipe.prototype.window;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.formatter;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWN1cnJlbmN5LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLWxvY2FsaXphdGlvbi12Ny8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9jbXgtY3VycmVuY3kucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUd6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUV2RTtJQVNFLHlCQUNVLFNBQTJCLEVBQzNCLFdBQStCLEVBQ1YsVUFBZTtRQUZwQyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUMzQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7UUFDVixlQUFVLEdBQVYsVUFBVSxDQUFLO1FBRTVDLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7U0FDdEI7SUFDSCxDQUFDOzs7Ozs7SUFFTSxtQ0FBUzs7Ozs7SUFBaEIsVUFBaUIsS0FBVSxFQUFFLFdBQW9CO1FBQy9DLElBQUksS0FBSyxLQUFLLEVBQUUsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssQ0FBQyxtQkFBQSxLQUFLLEVBQU8sQ0FBQyxFQUFFO1lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQztZQUMxQyxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsV0FBVyxHQUFHLFdBQVcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFM0UseUNBQXlDO1FBQ3pDLElBQUksV0FBVyxJQUFJLFNBQVMsRUFBRTtZQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLDRCQUE0QixDQUFDLENBQUM7WUFDM0MsT0FBTyxFQUFFLENBQUM7U0FDWDs7WUFFSyxJQUFJLEdBQWMsSUFBSSxDQUFDLFdBQVcsQ0FBQyx3QkFBd0IsQ0FDL0QsV0FBVyxDQUNaOztZQUVLLGNBQWMsR0FDbEIsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3BFLE1BQU07O1lBQ0YsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLElBQUksR0FBRzs7WUFFM0MsZUFBZSxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUN6RCxLQUFLLEVBQ0wsSUFBSSxJQUFJLElBQUksQ0FBQyxtQkFBbUIsRUFDaEMsSUFBSSxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFDOUIsSUFBSSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FDOUI7O1lBRUssa0JBQWtCLEdBQ3RCLGNBQWMsS0FBSyxNQUFNO1lBQ3ZCLENBQUMsQ0FBQyxLQUFHLGNBQWMsR0FBRyxlQUFpQjtZQUN2QyxDQUFDLENBQUMsS0FBRyxlQUFlLEdBQUcsY0FBZ0I7UUFFM0MsT0FBTyxPQUFPLEdBQUcsa0JBQWtCLENBQUM7SUFDdEMsQ0FBQzs7Z0JBdkRGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsYUFBYTtvQkFDbkIsSUFBSSxFQUFFLElBQUk7aUJBQ1g7Ozs7Z0JBTlEsZ0JBQWdCO2dCQUNoQixrQkFBa0I7Z0RBY3RCLE1BQU0sU0FBQyxXQUFXOztJQTRDdkIsc0JBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXBEWSxlQUFlOzs7SUFHMUIsaUNBQW1COzs7OztJQUdqQixvQ0FBbUM7Ozs7O0lBQ25DLHNDQUF1Qzs7Ozs7SUFDdkMscUNBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNQbGF0Zm9ybUJyb3dzZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0LCBQaXBlLCBQTEFURk9STV9JRCwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBJTGFuZ3VhZ2UgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMvbGFuZ3VhZ2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IEZvcm1hdHRlclNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL2Zvcm1hdHRlci5zZXJ2aWNlJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvdHJhbnNsYXRpb24uc2VydmljZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2NteEN1cnJlbmN5JyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBDbXhDdXJyZW5jeVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgLy8gRklYTUU6IEkgc2hvdWxkIGJlIGluamVjdGluZyB0aGUgd2luZG93IG9iamVjdCBidXQgdGhhdCB3aWxsIGJyZWFrIHRoZSBpbXBsZW1lbnRhdGlvbi4gSSB3aWxsIG5vdCBkbyB0aGF0IGp1c3QgeWV0LlxuICAvLyBNYWtpbmcgdGhpcyBwdWJsaWMgc28gSSBjYW4gYWNjZXNzIGl0IGluIHRoZSB0ZXN0XG4gIHB1YmxpYyB3aW5kb3c6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZvcm1hdHRlcjogRm9ybWF0dGVyU2VydmljZSxcbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgQEluamVjdChQTEFURk9STV9JRCkgcHJpdmF0ZSBwbGF0Zm9ybUlkOiBhbnlcbiAgKSB7XG4gICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XG4gICAgICB0aGlzLndpbmRvdyA9IHdpbmRvdztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgdHJhbnNmb3JtKHZhbHVlOiBhbnksIGNvdW50cnlDb2RlPzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09IG51bGwgfHwgaXNOYU4odmFsdWUgYXMgYW55KSkge1xuICAgICAgY29uc29sZS53YXJuKCdUaGUgdmFsdWUgaXMgbm90IGEgbnVtYmVyJyk7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgY291bnRyeUNvZGUgPSBjb3VudHJ5Q29kZSB8fCB0aGlzLndpbmRvdy5zZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCdjb3VudHJ5Jyk7XG5cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6dHJpcGxlLWVxdWFsc1xuICAgIGlmIChjb3VudHJ5Q29kZSA9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnNvbGUud2FybihgQ2FuJ3QgcmV0cmlldmUgY291bnRyeUNvZGVgKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBjb25zdCBsYW5nOiBJTGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uLmdldExhbmd1YWdlQnlDb3VudHJ5Q29kZShcbiAgICAgIGNvdW50cnlDb2RlXG4gICAgKTtcblxuICAgIGNvbnN0IHN5bWJvbFBvc2l0aW9uID1cbiAgICAgIChsYW5nLmN1cnJlbmN5U3ltYm9sRmxvYXQgJiYgbGFuZy5jdXJyZW5jeVN5bWJvbEZsb2F0LnRvTG93ZXJDYXNlKCkpIHx8XG4gICAgICAnbGVmdCc7XG4gICAgY29uc3QgY3VycmVuY3lTeW1ib2wgPSBsYW5nLmN1cnJlbmN5U3ltYm9sIHx8ICckJztcblxuICAgIGNvbnN0IGZvcm1hdHRlZE51bWJlcjogc3RyaW5nID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0TnVtYmVyKFxuICAgICAgdmFsdWUsXG4gICAgICBsYW5nICYmIGxhbmcuZGVjaW1hbE51bWJlcnNNb25leSxcbiAgICAgIGxhbmcgJiYgbGFuZy50aG91c2FuZFNlcGFyYXRvcixcbiAgICAgIGxhbmcgJiYgbGFuZy5kZWNpbWFsU2VwYXJhdG9yXG4gICAgKTtcblxuICAgIGNvbnN0IG51bWJlcldpdGhDdXJyZW5jeSA9XG4gICAgICBzeW1ib2xQb3NpdGlvbiA9PT0gJ2xlZnQnXG4gICAgICAgID8gYCR7Y3VycmVuY3lTeW1ib2x9JHtmb3JtYXR0ZWROdW1iZXJ9YFxuICAgICAgICA6IGAke2Zvcm1hdHRlZE51bWJlcn0ke2N1cnJlbmN5U3ltYm9sfWA7XG5cbiAgICByZXR1cm4gJyZscm07JyArIG51bWJlcldpdGhDdXJyZW5jeTtcbiAgfVxufVxuIl19