/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FormatterService } from './../services/formatter.service';
var CmxCurrencyCustomPipe = /** @class */ (function () {
    function CmxCurrencyCustomPipe(formatter) {
        this.formatter = formatter;
        this.value = '';
    }
    /**
     * @param {?} $value
     * @param {?} $currencySymbol
     * @param {?} $decimalNumbers
     * @param {?} $thousandSeparator
     * @param {?} $decimalSeparator
     * @param {?=} $floatCurrencySymbolRight
     * @return {?}
     */
    CmxCurrencyCustomPipe.prototype.transform = /**
     * @param {?} $value
     * @param {?} $currencySymbol
     * @param {?} $decimalNumbers
     * @param {?} $thousandSeparator
     * @param {?} $decimalSeparator
     * @param {?=} $floatCurrencySymbolRight
     * @return {?}
     */
    function ($value, $currencySymbol, $decimalNumbers, $thousandSeparator, $decimalSeparator, $floatCurrencySymbolRight) {
        try {
            if ($value !== undefined && isNaN($value) === false) {
                this.value = $value.toString();
                $decimalNumbers = parseInt($decimalNumbers.toString(), undefined);
                if ($value < 0) {
                    // value is negative
                    /** @type {?} */
                    var v = parseFloat($value.toString().replace(/\-/g, ''));
                    /** @type {?} */
                    var $aux = this.formatter.formatNumber(v, $decimalNumbers, $thousandSeparator, $decimalSeparator);
                    if ($floatCurrencySymbolRight) {
                        this.value = '-' + $aux + $currencySymbol;
                    }
                    else {
                        this.value = '-' + $currencySymbol + $aux;
                    }
                }
                else {
                    this.value =
                        $currencySymbol +
                            this.formatter.formatNumber($value, $decimalNumbers, $thousandSeparator, $decimalSeparator);
                }
            }
            else {
                this.value = '';
            }
        }
        catch ($exception) {
            console.error('Value trying to transform: ', $value);
            console.error($exception);
            this.value = '';
        }
        return this.value;
    };
    CmxCurrencyCustomPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'cmxCurrencyCustom',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    CmxCurrencyCustomPipe.ctorParameters = function () { return [
        { type: FormatterService }
    ]; };
    return CmxCurrencyCustomPipe;
}());
export { CmxCurrencyCustomPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyCustomPipe.prototype.value;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyCustomPipe.prototype.formatter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWN1cnJlbmN5LWN1c3RvbS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4LWNvcmUvYW5ndWxhci1sb2NhbGl6YXRpb24tdjcvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvY214LWN1cnJlbmN5LWN1c3RvbS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVuRTtJQU9FLCtCQUFvQixTQUEyQjtRQUEzQixjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUZ2QyxVQUFLLEdBQUcsRUFBRSxDQUFDO0lBRStCLENBQUM7Ozs7Ozs7Ozs7SUFFNUMseUNBQVM7Ozs7Ozs7OztJQUFoQixVQUNFLE1BQVcsRUFDWCxlQUF1QixFQUN2QixlQUFnQyxFQUNoQyxrQkFBMEIsRUFDMUIsaUJBQXlCLEVBQ3pCLHlCQUFtQztRQUVuQyxJQUFJO1lBQ0YsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxLQUFLLEVBQUU7Z0JBQ25ELElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMvQixlQUFlLEdBQUcsUUFBUSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsRUFBRSxTQUFTLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxNQUFNLEdBQUcsQ0FBQyxFQUFFOzs7d0JBRVIsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQzs7d0JBQ3BELElBQUksR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FDOUMsQ0FBQyxFQUNELGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsaUJBQWlCLENBQ2xCO29CQUNELElBQUkseUJBQXlCLEVBQUU7d0JBQzdCLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxlQUFlLENBQUM7cUJBQzNDO3lCQUFNO3dCQUNMLElBQUksQ0FBQyxLQUFLLEdBQUcsR0FBRyxHQUFHLGVBQWUsR0FBRyxJQUFJLENBQUM7cUJBQzNDO2lCQUNGO3FCQUFNO29CQUNMLElBQUksQ0FBQyxLQUFLO3dCQUNSLGVBQWU7NEJBQ2YsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pCLE1BQU0sRUFDTixlQUFlLEVBQ2Ysa0JBQWtCLEVBQ2xCLGlCQUFpQixDQUNsQixDQUFDO2lCQUNMO2FBQ0Y7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7YUFDakI7U0FDRjtRQUFDLE9BQU8sVUFBVSxFQUFFO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsNkJBQTZCLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDckQsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztTQUNqQjtRQUNELE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDOztnQkF0REYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxtQkFBbUI7b0JBQ3pCLElBQUksRUFBRSxJQUFJO2lCQUNYOzs7O2dCQUxRLGdCQUFnQjs7SUF5RHpCLDRCQUFDO0NBQUEsQUF2REQsSUF1REM7U0FuRFkscUJBQXFCOzs7Ozs7SUFDaEMsc0NBQW1COzs7OztJQUVQLDBDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRm9ybWF0dGVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZm9ybWF0dGVyLnNlcnZpY2UnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdjbXhDdXJyZW5jeUN1c3RvbScsXG4gIHB1cmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgQ214Q3VycmVuY3lDdXN0b21QaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHByaXZhdGUgdmFsdWUgPSAnJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZvcm1hdHRlcjogRm9ybWF0dGVyU2VydmljZSkge31cblxuICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICR2YWx1ZTogYW55LFxuICAgICRjdXJyZW5jeVN5bWJvbDogc3RyaW5nLFxuICAgICRkZWNpbWFsTnVtYmVyczogc3RyaW5nIHwgbnVtYmVyLFxuICAgICR0aG91c2FuZFNlcGFyYXRvcjogc3RyaW5nLFxuICAgICRkZWNpbWFsU2VwYXJhdG9yOiBzdHJpbmcsXG4gICAgJGZsb2F0Q3VycmVuY3lTeW1ib2xSaWdodD86IGJvb2xlYW5cbiAgKTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgaWYgKCR2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIGlzTmFOKCR2YWx1ZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSAkdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgJGRlY2ltYWxOdW1iZXJzID0gcGFyc2VJbnQoJGRlY2ltYWxOdW1iZXJzLnRvU3RyaW5nKCksIHVuZGVmaW5lZCk7XG4gICAgICAgIGlmICgkdmFsdWUgPCAwKSB7XG4gICAgICAgICAgLy8gdmFsdWUgaXMgbmVnYXRpdmVcbiAgICAgICAgICBjb25zdCB2ID0gcGFyc2VGbG9hdCgkdmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKC9cXC0vZywgJycpKTtcbiAgICAgICAgICBjb25zdCAkYXV4OiBzdHJpbmcgPSB0aGlzLmZvcm1hdHRlci5mb3JtYXROdW1iZXIoXG4gICAgICAgICAgICB2LFxuICAgICAgICAgICAgJGRlY2ltYWxOdW1iZXJzLFxuICAgICAgICAgICAgJHRob3VzYW5kU2VwYXJhdG9yLFxuICAgICAgICAgICAgJGRlY2ltYWxTZXBhcmF0b3JcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICgkZmxvYXRDdXJyZW5jeVN5bWJvbFJpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gJy0nICsgJGF1eCArICRjdXJyZW5jeVN5bWJvbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICctJyArICRjdXJyZW5jeVN5bWJvbCArICRhdXg7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudmFsdWUgPVxuICAgICAgICAgICAgJGN1cnJlbmN5U3ltYm9sICtcbiAgICAgICAgICAgIHRoaXMuZm9ybWF0dGVyLmZvcm1hdE51bWJlcihcbiAgICAgICAgICAgICAgJHZhbHVlLFxuICAgICAgICAgICAgICAkZGVjaW1hbE51bWJlcnMsXG4gICAgICAgICAgICAgICR0aG91c2FuZFNlcGFyYXRvcixcbiAgICAgICAgICAgICAgJGRlY2ltYWxTZXBhcmF0b3JcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9IGNhdGNoICgkZXhjZXB0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdWYWx1ZSB0cnlpbmcgdG8gdHJhbnNmb3JtOiAnLCAkdmFsdWUpO1xuICAgICAgY29uc29sZS5lcnJvcigkZXhjZXB0aW9uKTtcbiAgICAgIHRoaXMudmFsdWUgPSAnJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn1cbiJdfQ==