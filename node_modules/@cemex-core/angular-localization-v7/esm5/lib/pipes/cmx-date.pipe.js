/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DateFormatterService } from './../services/date-formatter.service';
import { TranslationService } from './../services/translation.service';
var CmxDatePipe = /** @class */ (function () {
    function CmxDatePipe(translation, dateFormatter) {
        this.translation = translation;
        this.dateFormatter = dateFormatter;
        this.value = '';
        this.monthsNames = [];
        this.daysNames = [];
    }
    /**
     * @param {?} $value
     * @param {?=} $countryCode
     * @return {?}
     */
    CmxDatePipe.prototype.transform = /**
     * @param {?} $value
     * @param {?=} $countryCode
     * @return {?}
     */
    function ($value, $countryCode) {
        try {
            if (typeof $value === 'number') {
                $value = new Date($value);
            }
            if (typeof $value === 'string') {
                $value = this.dateFormatter.getDateObject($value);
            }
            if ($countryCode === undefined || $countryCode === null) {
                $countryCode = sessionStorage.getItem('country');
            }
            if ($value !== undefined && $value instanceof Date) {
                /** @type {?} */
                var $currentLanguage = localStorage.getItem('language');
                /** @type {?} */
                var $lang = this.translation.getLanguage($currentLanguage ? $currentLanguage : 'en_US');
                this.daysNames = $lang.dayNames.split(',');
                this.monthsNames = $lang.monthNames.split(',');
                this.value = this.dateFormatter.format($value, $lang.formatDate, this.daysNames, this.monthsNames);
            }
            else {
                console.error('Date trying to transform: ', $value);
                this.value = '';
            }
        }
        catch ($exception) {
            console.error('Date trying to transform: ', $value);
            console.error($exception);
            this.value = '';
        }
        return this.value;
    };
    CmxDatePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'cmxDate',
                    pure: true
                },] }
    ];
    /** @nocollapse */
    CmxDatePipe.ctorParameters = function () { return [
        { type: TranslationService },
        { type: DateFormatterService }
    ]; };
    return CmxDatePipe;
}());
export { CmxDatePipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxDatePipe.prototype.value;
    /**
     * @type {?}
     * @private
     */
    CmxDatePipe.prototype.monthsNames;
    /**
     * @type {?}
     * @private
     */
    CmxDatePipe.prototype.daysNames;
    /**
     * @type {?}
     * @private
     */
    CmxDatePipe.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    CmxDatePipe.prototype.dateFormatter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWRhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItbG9jYWxpemF0aW9uLXY3LyIsInNvdXJjZXMiOlsibGliL3BpcGVzL2NteC1kYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXBELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXZFO0lBU0UscUJBQ1UsV0FBK0IsRUFDL0IsYUFBbUM7UUFEbkMsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBQy9CLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQU5yQyxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsZ0JBQVcsR0FBYSxFQUFFLENBQUM7UUFDM0IsY0FBUyxHQUFhLEVBQUUsQ0FBQztJQUs5QixDQUFDOzs7Ozs7SUFFRywrQkFBUzs7Ozs7SUFBaEIsVUFDRSxNQUE4QixFQUM5QixZQUFxQjtRQUVyQixJQUFJO1lBQ0YsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7Z0JBQzlCLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMzQjtZQUNELElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM5QixNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbkQ7WUFDRCxJQUFJLFlBQVksS0FBSyxTQUFTLElBQUksWUFBWSxLQUFLLElBQUksRUFBRTtnQkFDdkQsWUFBWSxHQUFHLGNBQWMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7YUFDbEQ7WUFDRCxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksTUFBTSxZQUFZLElBQUksRUFBRTs7b0JBQzVDLGdCQUFnQixHQUFXLFlBQVksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDOztvQkFDM0QsS0FBSyxHQUFjLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUNuRCxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FDOUM7Z0JBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FDcEMsTUFBTSxFQUNOLEtBQUssQ0FBQyxVQUFVLEVBQ2hCLElBQUksQ0FBQyxTQUFTLEVBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQzthQUNIO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3BELElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO2FBQ2pCO1NBQ0Y7UUFBQyxPQUFPLFVBQVUsRUFBRTtZQUNuQixPQUFPLENBQUMsS0FBSyxDQUFDLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3BELE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7U0FDakI7UUFDRCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQzs7Z0JBbkRGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsU0FBUztvQkFDZixJQUFJLEVBQUUsSUFBSTtpQkFDWDs7OztnQkFMUSxrQkFBa0I7Z0JBRGxCLG9CQUFvQjs7SUF1RDdCLGtCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FoRFksV0FBVzs7Ozs7O0lBQ3RCLDRCQUFtQjs7Ozs7SUFDbkIsa0NBQW1DOzs7OztJQUNuQyxnQ0FBaUM7Ozs7O0lBRy9CLGtDQUF1Qzs7Ozs7SUFDdkMsb0NBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUxhbmd1YWdlIH0gZnJvbSAnLi8uLi9pbnRlcmZhY2VzL2xhbmd1YWdlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBEYXRlRm9ybWF0dGVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZGF0ZS1mb3JtYXR0ZXIuc2VydmljZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdjbXhEYXRlJyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBDbXhEYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHZhbHVlID0gJyc7XG4gIHByaXZhdGUgbW9udGhzTmFtZXM6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgZGF5c05hbWVzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdHJhbnNsYXRpb246IFRyYW5zbGF0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIGRhdGVGb3JtYXR0ZXI6IERhdGVGb3JtYXR0ZXJTZXJ2aWNlXG4gICkge31cblxuICBwdWJsaWMgdHJhbnNmb3JtKFxuICAgICR2YWx1ZTogRGF0ZSB8IHN0cmluZyB8IG51bWJlcixcbiAgICAkY291bnRyeUNvZGU/OiBzdHJpbmdcbiAgKTogc3RyaW5nIHtcbiAgICB0cnkge1xuICAgICAgaWYgKHR5cGVvZiAkdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICR2YWx1ZSA9IG5ldyBEYXRlKCR2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mICR2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgJHZhbHVlID0gdGhpcy5kYXRlRm9ybWF0dGVyLmdldERhdGVPYmplY3QoJHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmICgkY291bnRyeUNvZGUgPT09IHVuZGVmaW5lZCB8fCAkY291bnRyeUNvZGUgPT09IG51bGwpIHtcbiAgICAgICAgJGNvdW50cnlDb2RlID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnY291bnRyeScpO1xuICAgICAgfVxuICAgICAgaWYgKCR2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICR2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgY29uc3QgJGN1cnJlbnRMYW5ndWFnZTogc3RyaW5nID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlJyk7XG4gICAgICAgIGNvbnN0ICRsYW5nOiBJTGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uLmdldExhbmd1YWdlKFxuICAgICAgICAgICRjdXJyZW50TGFuZ3VhZ2UgPyAkY3VycmVudExhbmd1YWdlIDogJ2VuX1VTJ1xuICAgICAgICApO1xuICAgICAgICB0aGlzLmRheXNOYW1lcyA9ICRsYW5nLmRheU5hbWVzLnNwbGl0KCcsJyk7XG4gICAgICAgIHRoaXMubW9udGhzTmFtZXMgPSAkbGFuZy5tb250aE5hbWVzLnNwbGl0KCcsJyk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmRhdGVGb3JtYXR0ZXIuZm9ybWF0KFxuICAgICAgICAgICR2YWx1ZSxcbiAgICAgICAgICAkbGFuZy5mb3JtYXREYXRlLFxuICAgICAgICAgIHRoaXMuZGF5c05hbWVzLFxuICAgICAgICAgIHRoaXMubW9udGhzTmFtZXNcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGUgdHJ5aW5nIHRvIHRyYW5zZm9ybTogJywgJHZhbHVlKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKCRleGNlcHRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0RhdGUgdHJ5aW5nIHRvIHRyYW5zZm9ybTogJywgJHZhbHVlKTtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJGV4Y2VwdGlvbik7XG4gICAgICB0aGlzLnZhbHVlID0gJyc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG59XG4iXX0=