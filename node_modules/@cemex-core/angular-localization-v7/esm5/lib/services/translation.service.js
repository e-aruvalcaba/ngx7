/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject } from 'rxjs';
var TranslationService = /** @class */ (function () {
    // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver  ???
    function TranslationService(httpClient, productPath, loadedLanguages, defaultLanguageISO // e.g.: en_US from america region || en_UK from europe region.
    ) {
        this.httpClient = httpClient;
        this.productPath = productPath;
        this.loadedLanguages = loadedLanguages;
        this.defaultLanguageISO = defaultLanguageISO;
        this.languageLoaded = new ReplaySubject(1);
        this.selectedLanguageSubject = new ReplaySubject(1);
        this.languagesSubject = new ReplaySubject(1);
        if (!this.loadedLanguages) {
            console.warn('The Translation Service can\'t init without Injected Languages.');
            console.warn('Inject the languages from your application: > ' +
                '{ provide: \'TRANSLATION_LANGUAGES, useValue: window[\'CMX_LANGUAGES\'] },\'');
            return;
        }
        if (!defaultLanguageISO) {
            console.warn('The Translation Service need defaultLanguageISO.');
        }
        TranslationService.languages = this.loadedLanguages;
        /** @type {?} */
        var localStorageLanguage = ((/** @type {?} */ (global))).localStorage.getItem('language');
        /** @type {?} */
        var allKeys = Object.keys(TranslationService.translations);
        if (allKeys.length === 0) {
            this.setLanguage(localStorageLanguage || defaultLanguageISO);
        }
        else {
            this.languageLoaded.next(true);
            // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?
        }
    }
    /**
     * @description Gets the labels data from the server.
     * @param $lang Language code for the file
     */
    /**
     * \@description Gets the labels data from the server.
     * @param {?} $lang Language code for the file
     * @return {?}
     */
    TranslationService.prototype.getTranslations = /**
     * \@description Gets the labels data from the server.
     * @param {?} $lang Language code for the file
     * @return {?}
     */
    function ($lang) {
        /** @type {?} */
        var endpoint = "/translate/translate/" + this.productPath + "/" + $lang;
        return this.httpClient.get(endpoint);
    };
    /**
     * @description Observable to gets the languages that exist in the server
     */
    /**
     * \@description Observable to gets the languages that exist in the server
     * @return {?}
     */
    TranslationService.prototype.getLanguages = /**
     * \@description Observable to gets the languages that exist in the server
     * @return {?}
     */
    function () {
        return this.languagesSubject.asObservable();
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.getSelectedLanguage = /**
     * @return {?}
     */
    function () {
        return this.selectedLanguageSubject.asObservable();
    };
    /**
     * @description Retrieve the public translation of a label
     * @param $textId Label id as written in the json file
     */
    /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    TranslationService.prototype.pt = /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    function ($textId) {
        /** @type {?} */
        var textValue = TranslationService.translations[$textId];
        if (!textValue || textValue === undefined) {
            return 'NOT:' + $textId;
        }
        return textValue;
    };
    /**
     * @description Retrieve the public translation of a label
     * @param $textId Label id as written in the json file
     */
    /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    TranslationService.prototype.getLabel = /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    function ($textId) {
        /** @type {?} */
        var textValue = TranslationService.translations[$textId];
        if (!textValue || textValue === undefined) {
            return 'NOT:' + $textId;
        }
        return textValue;
    };
    /**
     * @description Retrieve language published on the server.
     * @param $languageISO Can be the country code or the language iso combination
     */
    /**
     * \@description Retrieve language published on the server.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    TranslationService.prototype.getLanguage = /**
     * \@description Retrieve language published on the server.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    function ($languageISO) {
        if ($languageISO !== undefined && $languageISO !== null) {
            /** @type {?} */
            var langValue = void 0;
            langValue = TranslationService.languages.find((/**
             * @param {?} language
             * @return {?}
             */
            function (language) {
                return (language.languageISO === $languageISO ||
                    language.countryCode.toLowerCase() === $languageISO.toLowerCase() ||
                    language.languageISO.includes($languageISO));
            }));
            // if the language cannot reached, go for default
            if (langValue === undefined) {
                console.warn('The Language cannot reached', $languageISO);
                langValue = this.getDefaultLanguage();
            }
            langValue.momentConfig = this.getMomentConfig(langValue);
            return langValue;
        }
        else {
            console.warn('$languageIso param is undefined.');
            return this.getDefaultLanguage();
        }
    };
    /**
     * @description Retrieve language published on the server.
     * @param $countryCode Can be the country code or the language iso combination
     */
    /**
     * \@description Retrieve language published on the server.
     * @param {?} $countryCode Can be the country code or the language iso combination
     * @return {?}
     */
    TranslationService.prototype.getLanguageByCountryCode = /**
     * \@description Retrieve language published on the server.
     * @param {?} $countryCode Can be the country code or the language iso combination
     * @return {?}
     */
    function ($countryCode) {
        if ($countryCode !== undefined && $countryCode !== null) {
            /** @type {?} */
            var langValue = void 0;
            /** @type {?} */
            var countryLan = TranslationService.languages.filter((/**
             * @param {?} $language
             * @return {?}
             */
            function ($language) {
                return ($language.countryCode.toLowerCase() === $countryCode.toLowerCase());
            }));
            if (countryLan.length > 1) {
                /** @type {?} */
                var languageCode_1 = sessionStorage.getItem('language');
                langValue = countryLan.find((/**
                 * @param {?} $language
                 * @return {?}
                 */
                function ($language) {
                    return ($language.languageISO.toLowerCase() === languageCode_1.toLowerCase());
                }));
            }
            else {
                langValue =
                    countryLan && countryLan.length > 0 ? countryLan[0] : undefined;
            }
            // if the language cannot reached, go for default
            if (langValue === undefined) {
                console.warn('The Language cannot reached', $countryCode);
                langValue = this.getDefaultLanguage();
            }
            langValue.momentConfig = this.getMomentConfig(langValue);
            return langValue;
        }
        else {
            console.warn('$countryCode param is undefined.');
            return this.getDefaultLanguage();
        }
    };
    /**
     * @description Set language by languageISO or CountryCode.
     * @param $languageISO Can be the country code or the language iso combination
     */
    /**
     * \@description Set language by languageISO or CountryCode.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    TranslationService.prototype.setLanguage = /**
     * \@description Set language by languageISO or CountryCode.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    function ($languageISO) {
        var _this = this;
        var e_1, _a;
        this.selectedLanguage = this.getLanguage($languageISO);
        try {
            for (var _b = tslib_1.__values(TranslationService.languages), _c = _b.next(); !_c.done; _c = _b.next()) {
                var lang = _c.value;
                lang.isSelected = lang.languageISO === this.selectedLanguage.languageISO;
                lang.dir = lang.textFloat === 'right' ? 'rtl' : 'ltr';
                lang.rtl = lang.dir === 'rtl' ? true : false;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.getTranslations(this.selectedLanguage.languageISO).subscribe((/**
         * @param {?} translations
         * @return {?}
         */
        function (translations) { return _this.populateTranslation(translations); }));
    };
    /**
     * @param {?} $result
     * @return {?}
     */
    TranslationService.prototype.populateTranslation = /**
     * @param {?} $result
     * @return {?}
     */
    function ($result) {
        TranslationService.translations = $result;
        // emit changes until populate is completed
        localStorage.setItem('language', this.selectedLanguage.languageISO);
        sessionStorage.setItem('language', this.selectedLanguage.languageISO);
        this.languageLoaded.next(true);
        // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?
        this.selectedLanguageSubject.next(this.selectedLanguage);
        this.languagesSubject.next(TranslationService.languages);
    };
    Object.defineProperty(TranslationService.prototype, "selectedLanguage", {
        get: /**
         * @return {?}
         */
        function () {
            return TranslationService.currentLanguage;
        },
        set: /**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            TranslationService.currentLanguage = language;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TranslationService.prototype.getDefaultLanguage = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var defaultLangValue;
        defaultLangValue = TranslationService.languages.find((/**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            return (language.languageISO === _this.defaultLanguageISO ||
                language.countryCode.toLowerCase() ===
                    _this.defaultLanguageISO.toLowerCase() ||
                language.languageISO.includes(_this.defaultLanguageISO));
        }));
        if (defaultLangValue === undefined) {
            console.warn('The Default Language cannot reached', this.defaultLanguageISO);
            defaultLangValue = TranslationService.languages[0];
            console.warn('Trying get the first language', defaultLangValue.languageISO);
        }
        else {
            console.warn('The Default Language is', defaultLangValue.languageISO);
        }
        return defaultLangValue;
    };
    /**
     * @param {?} countryCode
     * @return {?}
     */
    TranslationService.prototype.getLanguagesByCountryCode = /**
     * @param {?} countryCode
     * @return {?}
     */
    function (countryCode) {
        /** @type {?} */
        var languagesByContryCode = TranslationService.languages.filter((/**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            return language.countryCode.toLowerCase() === countryCode.toLowerCase();
        }));
        return languagesByContryCode;
    };
    /**
     * @private
     * @param {?} language
     * @return {?}
     */
    TranslationService.prototype.getMomentConfig = /**
     * @private
     * @param {?} language
     * @return {?}
     */
    function (language) {
        return {
            months: language.monthNames.split(','),
            monthsShort: language.shortDayMonths.split(','),
            weekdays: language.dayNames.split(','),
            weekdaysMin: language.shortDayNames2.split(','),
            weekdaysShort: language.shortDayNames.split(',')
        };
    };
    TranslationService.TRANSLATION_PRODUCT_PATH = 'TRANSLATION_PRODUCT_PATH';
    TranslationService.TRANSLATION_LANGUAGES = 'TRANSLATION_LANGUAGES';
    TranslationService.DEFAULT_LANGUAGE_ISO = 'DEFAULT_LANGUAGE_ISO';
    TranslationService.currentLanguage = undefined;
    TranslationService.translations = {};
    TranslationService.languages = [];
    TranslationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TranslationService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: String, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_PRODUCT_PATH,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_LANGUAGES,] }, { type: Optional }] },
        { type: undefined, decorators: [{ type: Inject, args: [TranslationService.DEFAULT_LANGUAGE_ISO,] }, { type: Optional }] }
    ]; };
    return TranslationService;
}());
export { TranslationService };
if (false) {
    /** @type {?} */
    TranslationService.TRANSLATION_PRODUCT_PATH;
    /** @type {?} */
    TranslationService.TRANSLATION_LANGUAGES;
    /** @type {?} */
    TranslationService.DEFAULT_LANGUAGE_ISO;
    /** @type {?} */
    TranslationService.currentLanguage;
    /**
     * @type {?}
     * @private
     */
    TranslationService.translations;
    /**
     * @type {?}
     * @private
     */
    TranslationService.languages;
    /** @type {?} */
    TranslationService.prototype.languageLoaded;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.selectedLanguageSubject;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.languagesSubject;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.productPath;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.loadedLanguages;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.defaultLanguageISO;
}
//# sourceMappingURL=data:application/json;base64,