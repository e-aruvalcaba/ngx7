/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { TranslationService } from './translation.service';
var DirectionService = /** @class */ (function () {
    function DirectionService(translation) {
        var _this = this;
        this.translation = translation;
        this.direction$ = new Subject();
        this.rtl$ = new Subject();
        this.translation.getSelectedLanguage().subscribe((/**
         * @param {?} language
         * @return {?}
         */
        function (language) {
            _this.direction$.next(language.direction);
            _this.rtl$.next(language.rtl);
        }));
    }
    /**
     * @return {?}
     */
    DirectionService.prototype.getDirection = /**
     * @return {?}
     */
    function () {
        return this.direction$.asObservable();
    };
    /**
     * @return {?}
     */
    DirectionService.prototype.getRTL = /**
     * @return {?}
     */
    function () {
        return this.rtl$.asObservable();
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    DirectionService.prototype.getDirectionFor = /**
     * @param {?} languageCode
     * @return {?}
     */
    function (languageCode) {
        /** @type {?} */
        var language = this.translation.getLanguage(languageCode.split(/[-_]/)[0]);
        this.direction$.next(language.dir);
    };
    /**
     * @param {?} languageCode
     * @return {?}
     */
    DirectionService.prototype.getRtlFor = /**
     * @param {?} languageCode
     * @return {?}
     */
    function (languageCode) {
        /** @type {?} */
        var language = this.translation.getLanguage(languageCode.split(/[-_]/)[0]);
        this.rtl$.next(language.rtl);
    };
    DirectionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DirectionService.ctorParameters = function () { return [
        { type: TranslationService }
    ]; };
    return DirectionService;
}());
export { DirectionService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.direction$;
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.rtl$;
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLWxvY2FsaXphdGlvbi12Ny8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kaXJlY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNEO0lBS0UsMEJBQW9CLFdBQStCO1FBQW5ELGlCQUtDO1FBTG1CLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUgzQyxlQUFVLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFDNUMsU0FBSSxHQUFxQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBRzdDLElBQUksQ0FBQyxXQUFXLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQyxRQUFhO1lBQzdELEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QyxLQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRU0sdUNBQVk7OztJQUFuQjtRQUNFLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRU0saUNBQU07OztJQUFiO1FBQ0UsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRU0sMENBQWU7Ozs7SUFBdEIsVUFBdUIsWUFBb0I7O1lBQ25DLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDM0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDOUI7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFTSxvQ0FBUzs7OztJQUFoQixVQUFpQixZQUFvQjs7WUFDN0IsUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUMzQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUM5QjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDOztnQkFoQ0YsVUFBVTs7OztnQkFGRixrQkFBa0I7O0lBbUMzQix1QkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGdCQUFnQjs7Ozs7O0lBQzNCLHNDQUFvRDs7Ozs7SUFDcEQsZ0NBQStDOzs7OztJQUVuQyx1Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgSUxhbmd1YWdlRGlyZWN0aW9uIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9sYW5ndWFnZURpcmVjdGlvbi5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERpcmVjdGlvblNlcnZpY2UgaW1wbGVtZW50cyBJTGFuZ3VhZ2VEaXJlY3Rpb24ge1xuICBwcml2YXRlIGRpcmVjdGlvbiQ6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XG4gIHByaXZhdGUgcnRsJDogU3ViamVjdDxib29sZWFuPiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb25TZXJ2aWNlKSB7XG4gICAgdGhpcy50cmFuc2xhdGlvbi5nZXRTZWxlY3RlZExhbmd1YWdlKCkuc3Vic2NyaWJlKChsYW5ndWFnZTogYW55KSA9PiB7XG4gICAgICB0aGlzLmRpcmVjdGlvbiQubmV4dChsYW5ndWFnZS5kaXJlY3Rpb24pO1xuICAgICAgdGhpcy5ydGwkLm5leHQobGFuZ3VhZ2UucnRsKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXREaXJlY3Rpb24oKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICByZXR1cm4gdGhpcy5kaXJlY3Rpb24kLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGdldFJUTCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5ydGwkLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGdldERpcmVjdGlvbkZvcihsYW5ndWFnZUNvZGU6IHN0cmluZykge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy50cmFuc2xhdGlvbi5nZXRMYW5ndWFnZShcbiAgICAgIGxhbmd1YWdlQ29kZS5zcGxpdCgvWy1fXS8pWzBdXG4gICAgKTtcbiAgICB0aGlzLmRpcmVjdGlvbiQubmV4dChsYW5ndWFnZS5kaXIpO1xuICB9XG5cbiAgcHVibGljIGdldFJ0bEZvcihsYW5ndWFnZUNvZGU6IHN0cmluZykge1xuICAgIGNvbnN0IGxhbmd1YWdlID0gdGhpcy50cmFuc2xhdGlvbi5nZXRMYW5ndWFnZShcbiAgICAgIGxhbmd1YWdlQ29kZS5zcGxpdCgvWy1fXS8pWzBdXG4gICAgKTtcbiAgICB0aGlzLnJ0bCQubmV4dChsYW5ndWFnZS5ydGwpO1xuICB9XG59XG4iXX0=