/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as moment_ from 'moment';
import { TranslationService } from './translation.service';
import fromExponential from './../fromExponential';
/** @type {?} */
var moment = moment_;
/** @enum {number} */
var DateTimeActions = {
    ConvertToLocal: 0,
    NoConvertToLocal: 1,
};
export { DateTimeActions };
DateTimeActions[DateTimeActions.ConvertToLocal] = 'ConvertToLocal';
DateTimeActions[DateTimeActions.NoConvertToLocal] = 'NoConvertToLocal';
var FormatterService = /** @class */ (function () {
    function FormatterService() {
    }
    // DATES
    /**
     * @description Transforms a valid string to a date object
     * @param date The date as string
     * @returns A javascript date object
     */
    // DATES
    /**
     * \@description Transforms a valid string to a date object
     * @param {?} date The date as string
     * @return {?} A javascript date object
     */
    FormatterService.prototype.getDateObject = 
    // DATES
    /**
     * \@description Transforms a valid string to a date object
     * @param {?} date The date as string
     * @return {?} A javascript date object
     */
    function (date) {
        try {
            /** @type {?} */
            var auxDate = date.replace(/-g/, '/');
            /** @type {?} */
            var bits = auxDate.split(/\D/);
            /** @type {?} */
            var month = parseInt(bits[1], undefined) - 1;
            if (bits.length === 3) {
                return new Date(bits[0], month, bits[2]);
            }
            else {
                return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
            }
        }
        catch ($exception) {
            return undefined;
        }
    };
    /**
     * @param {?} date
     * @param {?} languageISO
     * @param {?} format
     * @param {?=} action
     * @return {?}
     */
    FormatterService.prototype.formatDateTimeMoment = /**
     * @param {?} date
     * @param {?} languageISO
     * @param {?} format
     * @param {?=} action
     * @return {?}
     */
    function (date, languageISO, format, action) {
        if (action === void 0) { action = DateTimeActions.ConvertToLocal; }
        if (TranslationService.currentLanguage) {
            moment.updateLocale(TranslationService.currentLanguage.languageISO.substr(0, 2), TranslationService.currentLanguage.momentConfig);
        }
        if (action === DateTimeActions.NoConvertToLocal) {
            return moment(date)
                .locale(languageISO.substr(0, 2))
                .format(format);
        }
        return this.utcToLocal(date)
            .locale(languageISO.substr(0, 2))
            .format(format);
    };
    /**
     * @description Format a number by TypeScript Number function
     * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'
     * @param numberEntry: value to format
     * @param languageISO: specifict language to format
     * @param decimalNumbers: quantity decimals to set in the format
     * @returns A value formatted
     */
    /**
     * \@description Format a number by TypeScript Number function
     * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'
     * @param {?} numberEntry
     * @param {?} languageISO
     * @param {?} decimalNumbers
     * @return {?} A value formatted
     */
    FormatterService.prototype.formatNumberTS = /**
     * \@description Format a number by TypeScript Number function
     * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'
     * @param {?} numberEntry
     * @param {?} languageISO
     * @param {?} decimalNumbers
     * @return {?} A value formatted
     */
    function (numberEntry, languageISO, decimalNumbers) {
        if (isNaN(numberEntry) || numberEntry === null) {
            return 0;
        }
        return Number(this.round(numberEntry, decimalNumbers).toFixed(decimalNumbers)).toLocaleString(languageISO + '-u-nu-latn', {
            minimumFractionDigits: numberEntry % 1 === 0 ? 0 : decimalNumbers
        });
    };
    /**
     * @param {?} dateEntry
     * @return {?}
     */
    FormatterService.prototype.utcToLocal = /**
     * @param {?} dateEntry
     * @return {?}
     */
    function (dateEntry) {
        return moment.utc(dateEntry).local();
    };
    /**
     * @param {?} date
     * @param {?=} format
     * @return {?}
     */
    FormatterService.prototype.localToUtc = /**
     * @param {?} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format !== undefined) {
            return moment(date, 'YYYY-MM-DD THH:mm:ssZ')
                .utc()
                .format(format);
        }
        else {
            return moment(date, 'YYYY-MM-DD THH:mm:ssZ')
                .utc()
                .format();
        }
    };
    // expected time '00:00:00'
    // expected time '00:00:00'
    /**
     * @param {?} time
     * @return {?}
     */
    FormatterService.prototype.timeToMinutes = 
    // expected time '00:00:00'
    /**
     * @param {?} time
     * @return {?}
     */
    function (time) {
        /** @type {?} */
        var timeSplit = time.split(':');
        /** @type {?} */
        var hours = +timeSplit[0];
        /** @type {?} */
        var minutes = +timeSplit[1];
        /** @type {?} */
        var seconds = +timeSplit[2];
        return hours * 60 + minutes + this.roundToDown(seconds / 60);
    };
    // NUMBERS
    /**
     * @description Formats a number as a currency preserving its precision.
     * In order the keep the precision the number must be passed as a string
     * @param value The number value to format
     * @param numberDecimals The number of decimals to use
     * @param thousandSeparator The string character to use when separating numbers
     * @param decimalSeparator The string character to use when separating the decimal and integer part
     * @returns The number as a currency string
     */
    // NUMBERS
    /**
     * \@description Formats a number as a currency preserving its precision.
     * In order the keep the precision the number must be passed as a string
     * @param {?} value The number value to format
     * @param {?=} numberDecimals The number of decimals to use
     * @param {?=} thousandSeparator The string character to use when separating numbers
     * @param {?=} decimalSeparator The string character to use when separating the decimal and integer part
     * @return {?} The number as a currency string
     */
    FormatterService.prototype.formatNumber = 
    // NUMBERS
    /**
     * \@description Formats a number as a currency preserving its precision.
     * In order the keep the precision the number must be passed as a string
     * @param {?} value The number value to format
     * @param {?=} numberDecimals The number of decimals to use
     * @param {?=} thousandSeparator The string character to use when separating numbers
     * @param {?=} decimalSeparator The string character to use when separating the decimal and integer part
     * @return {?} The number as a currency string
     */
    function (value, numberDecimals, thousandSeparator, decimalSeparator) {
        // tslint:disable-next-line: triple-equals
        if (value == undefined || value.toString() == '' || isNaN((/** @type {?} */ (value)))) {
            console.warn('Not a valid number to format');
            return '';
        }
        // tslint:disable-next-line:triple-equals
        numberDecimals = numberDecimals != undefined ? numberDecimals : 2;
        // tslint:disable-next-line:triple-equals
        thousandSeparator =
            thousandSeparator !== undefined ? thousandSeparator : ',';
        // tslint:disable-next-line:triple-equals
        decimalSeparator = decimalSeparator !== undefined ? decimalSeparator : '.';
        /** @type {?} */
        var completeNumber = fromExponential(value);
        /** @type {?} */
        var sign = value < 0 ? '-' : '';
        /** @type {?} */
        var absoluteValue = value < 0 ? completeNumber.split('-')[1] : completeNumber;
        /** @type {?} */
        var truncatedDecimalValue = absoluteValue.split('.')[1] &&
            absoluteValue.split('.')[1].slice(0, numberDecimals);
        /** @type {?} */
        var integerPart = absoluteValue.split('.')[0];
        /** @type {?} */
        var floatingPart = this.rightPad(truncatedDecimalValue, '0', numberDecimals);
        /** @type {?} */
        var formattedInteger = integerPart;
        if (Number(integerPart) >= 1000) {
            formattedInteger = integerPart.replace(/./g, (/**
             * @param {?} c
             * @param {?} i
             * @param {?} a
             * @return {?}
             */
            function (c, i, a) {
                return i && c !== decimalSeparator && (a.length - i) % 3 === 0
                    ? thousandSeparator + c
                    : c;
            }));
        }
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        var formattedNumber = "" + sign + formattedInteger + (floatingPart.length > 0 ? decimalSeparator : '') + floatingPart;
        return formattedNumber;
    };
    /**
     * @param {?} value
     * @param {?} decimals
     * @return {?}
     */
    FormatterService.prototype.round = /**
     * @param {?} value
     * @param {?} decimals
     * @return {?}
     */
    function (value, decimals) {
        /** @type {?} */
        var type = '';
        type = 'round';
        /** @type {?} */
        var valueDecimals = value % 1;
        if (valueDecimals !== 0.5) {
            return Number(Math[type](value + 'e' + decimals) + 'e-' + decimals);
        }
        else {
            return Number(value);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FormatterService.prototype.roundToDown = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Math.floor(value);
    };
    // STRINGS
    // STRINGS
    /**
     * @param {?} value
     * @return {?}
     */
    FormatterService.prototype.removeFirstZeros = 
    // STRINGS
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return value.replace(/^0+/, '');
    };
    /**
     * @param {?} text
     * @param {?} wildcard
     * @param {?} length
     * @return {?}
     */
    FormatterService.prototype.pad = /**
     * @param {?} text
     * @param {?} wildcard
     * @param {?} length
     * @return {?}
     */
    function (text, wildcard, length) {
        /** @type {?} */
        var result = text;
        while (result.length < length) {
            result = wildcard + result;
        }
        return result;
    };
    /**
     * @description Fills up a string with the specified character appending it to the right till lenght is achieved
     * @param text String to add padding
     * @param wildcard Character that's gonne be repeated
     * @param lenght The desired length
     */
    /**
     * \@description Fills up a string with the specified character appending it to the right till lenght is achieved
     * @param {?} text String to add padding
     * @param {?} wildcard Character that's gonne be repeated
     * @param {?} length
     * @return {?}
     */
    FormatterService.prototype.rightPad = /**
     * \@description Fills up a string with the specified character appending it to the right till lenght is achieved
     * @param {?} text String to add padding
     * @param {?} wildcard Character that's gonne be repeated
     * @param {?} length
     * @return {?}
     */
    function (text, wildcard, length) {
        if (text === undefined || text === null || text === '') {
            return wildcard.repeat(length);
        }
        /** @type {?} */
        var str = text.toString();
        while (str.length < length) {
            str += wildcard;
        }
        return str;
    };
    /**
     * @param {?} measureUnit
     * @return {?}
     */
    FormatterService.prototype.formatMeasureUnit = /**
     * @param {?} measureUnit
     * @return {?}
     */
    function (measureUnit) {
        switch (measureUnit) {
            case 'YD3':
                return 'Yd³';
            case 'M3':
                return 'M³';
            default:
                return measureUnit;
        }
    };
    FormatterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormatterService.ctorParameters = function () { return []; };
    return FormatterService;
}());
export { FormatterService };
//# sourceMappingURL=data:application/json;base64,