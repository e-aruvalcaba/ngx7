/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var DateFormatterService = /** @class */ (function () {
    function DateFormatterService() {
        //
    }
    /**
     * @description Formats a date object to a string given a date format from a language
     * @param value The date value to format
     * @param format The format to comply, e.x. DD MM, YYYY
     * @param daysNames String array of the weekdays' names
     * @param monthsNames String array of the months' names
     * @returns String of the formatted date
     */
    /**
     * \@description Formats a date object to a string given a date format from a language
     * @param {?} $value
     * @param {?} $format
     * @param {?} $daysNames
     * @param {?} $monthsNames
     * @return {?} String of the formatted date
     */
    DateFormatterService.prototype.format = /**
     * \@description Formats a date object to a string given a date format from a language
     * @param {?} $value
     * @param {?} $format
     * @param {?} $daysNames
     * @param {?} $monthsNames
     * @return {?} String of the formatted date
     */
    function ($value, $format, $daysNames, $monthsNames) {
        var _this = this;
        /** @type {?} */
        var dateAsString = '';
        /** @type {?} */
        var $separator = '/';
        /** @type {?} */
        var day;
        /** @type {?} */
        var month;
        /** @type {?} */
        var year;
        /** @type {?} */
        var $formats = $format.split($separator);
        if ($formats.length === 1) {
            $separator = '-';
            $formats = $format.split($separator);
        }
        if ($formats.length === 1) {
            $separator = ' ';
            $formats = $format.split($separator);
        }
        if ($formats.length === 1) {
            $separator = '.';
            $formats = $format.split($separator);
        }
        $formats.forEach((/**
         * @param {?} $formatItem
         * @param {?} $index
         * @return {?}
         */
        function ($formatItem, $index) {
            /** @type {?} */
            var $auxValue = $value;
            /** @type {?} */
            var $formatCode = $formatItem.replace(',', '');
            if ($formatItem.includes('d') || $formatItem.includes('D')) {
                day = _this.getDay($auxValue, $formatCode, $daysNames);
                $formatItem = $formatItem.replace($formatCode, day);
            }
            else if ($formatItem.includes('m') || $formatItem.includes('M')) {
                month = _this.getMonth($auxValue, $formatCode, $monthsNames);
                $formatItem = $formatItem.replace($formatCode, month);
            }
            else if ($formatItem.includes('y') || $formatItem.includes('Y')) {
                year = _this.getYear($auxValue, $formatCode);
                $formatItem = $formatItem.replace($formatCode, year);
            }
            if ($index !== $formats.length - 1) {
                dateAsString += $formatItem + $separator;
            }
            else {
                dateAsString += $formatItem;
            }
        }));
        return dateAsString;
    };
    /**
     * @description Transforms a valid string to a date object
     * @param date The date as string
     * @returns A javascript date object
     */
    /**
     * \@description Transforms a valid string to a date object
     * @param {?} date The date as string
     * @return {?} A javascript date object
     */
    DateFormatterService.prototype.getDateObject = /**
     * \@description Transforms a valid string to a date object
     * @param {?} date The date as string
     * @return {?} A javascript date object
     */
    function (date) {
        try {
            /** @type {?} */
            var auxDate = date.replace(/-g/, '/');
            /** @type {?} */
            var bits = auxDate.split(/\D/);
            /** @type {?} */
            var month = parseInt(bits[1], undefined) - 1;
            if (bits.length === 3) {
                return new Date(bits[0], month, bits[2]);
            }
            else {
                return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
            }
        }
        catch ($exception) {
            return undefined;
        }
    };
    /**
     * @private
     * @param {?} $number
     * @return {?}
     */
    DateFormatterService.prototype.addZero = /**
     * @private
     * @param {?} $number
     * @return {?}
     */
    function ($number) {
        return $number < 10 ? '0' + $number : $number.toString();
    };
    /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @param {?} $daysNames
     * @return {?}
     */
    DateFormatterService.prototype.getDay = /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @param {?} $daysNames
     * @return {?}
     */
    function ($date, $format, $daysNames) {
        /** @type {?} */
        var day;
        if ($format.length === 4) {
            // requires the complete name of the day
            day = $daysNames[$date.getDay()];
        }
        else if ($format.length === 3) {
            // requires an abbreviation of the day's name
            day = $daysNames[$date.getDay()].substring(0, 3);
        }
        else if ($format.length === 2 || $format.length === 1) {
            // requires the value of the day
            day = this.addZero($date.getDate());
        }
        // check if names should use lower or uppercase
        if ($format === $format.toLowerCase()) {
            // the format uses d
            day = day.toLowerCase();
        }
        return day;
    };
    /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @param {?} $monthsNames
     * @return {?}
     */
    DateFormatterService.prototype.getMonth = /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @param {?} $monthsNames
     * @return {?}
     */
    function ($date, $format, $monthsNames) {
        /** @type {?} */
        var month;
        if ($format.length === 4) {
            // requires the complete name of the month
            month = $monthsNames[$date.getMonth()];
        }
        else if ($format.length === 3) {
            // requires an abbreviation of the day's name
            month = $monthsNames[$date.getMonth()].substring(0, 3);
        }
        else if ($format.length === 2) {
            // requires the value of the day
            month = this.addZero($date.getMonth() + 1);
        }
        // check if names should use lower or uppercase
        if ($format === $format.toLowerCase()) {
            // the format uses d
            month = month.toLowerCase();
        }
        return month;
    };
    /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @return {?}
     */
    DateFormatterService.prototype.getYear = /**
     * @private
     * @param {?} $date
     * @param {?} $format
     * @return {?}
     */
    function ($date, $format) {
        /** @type {?} */
        var year;
        if ($format.length === 4) {
            // requires the complete year
            year = '' + $date.getFullYear();
        }
        else {
            // requires only the last 2 numbers of the year value
            year = '' + $date.getFullYear();
            year = year.substring(2);
        }
        return year;
    };
    DateFormatterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DateFormatterService.ctorParameters = function () { return []; };
    return DateFormatterService;
}());
export { DateFormatterService };
//# sourceMappingURL=data:application/json;base64,