/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as moment_ from 'moment';
import { TranslationService } from './translation.service';
import fromExponential from './../fromExponential';
/** @type {?} */
const moment = moment_;
/** @enum {number} */
const DateTimeActions = {
    ConvertToLocal: 0,
    NoConvertToLocal: 1,
};
export { DateTimeActions };
DateTimeActions[DateTimeActions.ConvertToLocal] = 'ConvertToLocal';
DateTimeActions[DateTimeActions.NoConvertToLocal] = 'NoConvertToLocal';
export class FormatterService {
    constructor() { }
    // DATES
    /**
     * \@description Transforms a valid string to a date object
     * @param {?} date The date as string
     * @return {?} A javascript date object
     */
    getDateObject(date) {
        try {
            /** @type {?} */
            const auxDate = date.replace(/-g/, '/');
            /** @type {?} */
            const bits = auxDate.split(/\D/);
            /** @type {?} */
            const month = parseInt(bits[1], undefined) - 1;
            if (bits.length === 3) {
                return new Date(bits[0], month, bits[2]);
            }
            else {
                return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
            }
        }
        catch ($exception) {
            return undefined;
        }
    }
    /**
     * @param {?} date
     * @param {?} languageISO
     * @param {?} format
     * @param {?=} action
     * @return {?}
     */
    formatDateTimeMoment(date, languageISO, format, action = DateTimeActions.ConvertToLocal) {
        if (TranslationService.currentLanguage) {
            moment.updateLocale(TranslationService.currentLanguage.languageISO.substr(0, 2), TranslationService.currentLanguage.momentConfig);
        }
        if (action === DateTimeActions.NoConvertToLocal) {
            return moment(date)
                .locale(languageISO.substr(0, 2))
                .format(format);
        }
        return this.utcToLocal(date)
            .locale(languageISO.substr(0, 2))
            .format(format);
    }
    /**
     * \@description Format a number by TypeScript Number function
     * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'
     * @param {?} numberEntry
     * @param {?} languageISO
     * @param {?} decimalNumbers
     * @return {?} A value formatted
     */
    formatNumberTS(numberEntry, languageISO, decimalNumbers) {
        if (isNaN(numberEntry) || numberEntry === null) {
            return 0;
        }
        return Number(this.round(numberEntry, decimalNumbers).toFixed(decimalNumbers)).toLocaleString(languageISO + '-u-nu-latn', {
            minimumFractionDigits: numberEntry % 1 === 0 ? 0 : decimalNumbers
        });
    }
    /**
     * @param {?} dateEntry
     * @return {?}
     */
    utcToLocal(dateEntry) {
        return moment.utc(dateEntry).local();
    }
    /**
     * @param {?} date
     * @param {?=} format
     * @return {?}
     */
    localToUtc(date, format) {
        if (format !== undefined) {
            return moment(date, 'YYYY-MM-DD THH:mm:ssZ')
                .utc()
                .format(format);
        }
        else {
            return moment(date, 'YYYY-MM-DD THH:mm:ssZ')
                .utc()
                .format();
        }
    }
    // expected time '00:00:00'
    /**
     * @param {?} time
     * @return {?}
     */
    timeToMinutes(time) {
        /** @type {?} */
        const timeSplit = time.split(':');
        /** @type {?} */
        const hours = +timeSplit[0];
        /** @type {?} */
        const minutes = +timeSplit[1];
        /** @type {?} */
        const seconds = +timeSplit[2];
        return hours * 60 + minutes + this.roundToDown(seconds / 60);
    }
    // NUMBERS
    /**
     * \@description Formats a number as a currency preserving its precision.
     * In order the keep the precision the number must be passed as a string
     * @param {?} value The number value to format
     * @param {?=} numberDecimals The number of decimals to use
     * @param {?=} thousandSeparator The string character to use when separating numbers
     * @param {?=} decimalSeparator The string character to use when separating the decimal and integer part
     * @return {?} The number as a currency string
     */
    formatNumber(value, numberDecimals, thousandSeparator, decimalSeparator) {
        // tslint:disable-next-line: triple-equals
        if (value == undefined || value.toString() == '' || isNaN((/** @type {?} */ (value)))) {
            console.warn('Not a valid number to format');
            return '';
        }
        // tslint:disable-next-line:triple-equals
        numberDecimals = numberDecimals != undefined ? numberDecimals : 2;
        // tslint:disable-next-line:triple-equals
        thousandSeparator =
            thousandSeparator !== undefined ? thousandSeparator : ',';
        // tslint:disable-next-line:triple-equals
        decimalSeparator = decimalSeparator !== undefined ? decimalSeparator : '.';
        /** @type {?} */
        const completeNumber = fromExponential(value);
        /** @type {?} */
        const sign = value < 0 ? '-' : '';
        /** @type {?} */
        const absoluteValue = value < 0 ? completeNumber.split('-')[1] : completeNumber;
        /** @type {?} */
        const truncatedDecimalValue = absoluteValue.split('.')[1] &&
            absoluteValue.split('.')[1].slice(0, numberDecimals);
        /** @type {?} */
        const integerPart = absoluteValue.split('.')[0];
        /** @type {?} */
        const floatingPart = this.rightPad(truncatedDecimalValue, '0', numberDecimals);
        /** @type {?} */
        let formattedInteger = integerPart;
        if (Number(integerPart) >= 1000) {
            formattedInteger = integerPart.replace(/./g, (/**
             * @param {?} c
             * @param {?} i
             * @param {?} a
             * @return {?}
             */
            (c, i, a) => {
                return i && c !== decimalSeparator && (a.length - i) % 3 === 0
                    ? thousandSeparator + c
                    : c;
            }));
        }
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        const formattedNumber = `${sign}${formattedInteger}${floatingPart.length > 0 ? decimalSeparator : ''}${floatingPart}`;
        return formattedNumber;
    }
    /**
     * @param {?} value
     * @param {?} decimals
     * @return {?}
     */
    round(value, decimals) {
        /** @type {?} */
        let type = '';
        type = 'round';
        /** @type {?} */
        const valueDecimals = value % 1;
        if (valueDecimals !== 0.5) {
            return Number(Math[type](value + 'e' + decimals) + 'e-' + decimals);
        }
        else {
            return Number(value);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    roundToDown(value) {
        return Math.floor(value);
    }
    // STRINGS
    /**
     * @param {?} value
     * @return {?}
     */
    removeFirstZeros(value) {
        return value.replace(/^0+/, '');
    }
    /**
     * @param {?} text
     * @param {?} wildcard
     * @param {?} length
     * @return {?}
     */
    pad(text, wildcard, length) {
        /** @type {?} */
        let result = text;
        while (result.length < length) {
            result = wildcard + result;
        }
        return result;
    }
    /**
     * \@description Fills up a string with the specified character appending it to the right till lenght is achieved
     * @param {?} text String to add padding
     * @param {?} wildcard Character that's gonne be repeated
     * @param {?} length
     * @return {?}
     */
    rightPad(text, wildcard, length) {
        if (text === undefined || text === null || text === '') {
            return wildcard.repeat(length);
        }
        /** @type {?} */
        let str = text.toString();
        while (str.length < length) {
            str += wildcard;
        }
        return str;
    }
    /**
     * @param {?} measureUnit
     * @return {?}
     */
    formatMeasureUnit(measureUnit) {
        switch (measureUnit) {
            case 'YD3':
                return 'Yd³';
            case 'M3':
                return 'M³';
            default:
                return measureUnit;
        }
    }
}
FormatterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormatterService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,