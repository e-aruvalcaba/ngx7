/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { TranslationService } from './translation.service';
export class DirectionService {
    /**
     * @param {?} translation
     */
    constructor(translation) {
        this.translation = translation;
        this.direction$ = new Subject();
        this.rtl$ = new Subject();
        this.translation.getSelectedLanguage().subscribe((/**
         * @param {?} language
         * @return {?}
         */
        (language) => {
            this.direction$.next(language.direction);
            this.rtl$.next(language.rtl);
        }));
    }
    /**
     * @return {?}
     */
    getDirection() {
        return this.direction$.asObservable();
    }
    /**
     * @return {?}
     */
    getRTL() {
        return this.rtl$.asObservable();
    }
    /**
     * @param {?} languageCode
     * @return {?}
     */
    getDirectionFor(languageCode) {
        /** @type {?} */
        const language = this.translation.getLanguage(languageCode.split(/[-_]/)[0]);
        this.direction$.next(language.dir);
    }
    /**
     * @param {?} languageCode
     * @return {?}
     */
    getRtlFor(languageCode) {
        /** @type {?} */
        const language = this.translation.getLanguage(languageCode.split(/[-_]/)[0]);
        this.rtl$.next(language.rtl);
    }
}
DirectionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DirectionService.ctorParameters = () => [
    { type: TranslationService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.direction$;
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.rtl$;
    /**
     * @type {?}
     * @private
     */
    DirectionService.prototype.translation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLWxvY2FsaXphdGlvbi12Ny8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9kaXJlY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRzNELE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFJM0IsWUFBb0IsV0FBK0I7UUFBL0IsZ0JBQVcsR0FBWCxXQUFXLENBQW9CO1FBSDNDLGVBQVUsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUM1QyxTQUFJLEdBQXFCLElBQUksT0FBTyxFQUFFLENBQUM7UUFHN0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO1lBQ2pFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7O0lBRU0sWUFBWTtRQUNqQixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVNLE1BQU07UUFDWCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFTSxlQUFlLENBQUMsWUFBb0I7O2NBQ25DLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDM0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDOUI7UUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsQ0FBQzs7Ozs7SUFFTSxTQUFTLENBQUMsWUFBb0I7O2NBQzdCLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FDM0MsWUFBWSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FDOUI7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7O1lBaENGLFVBQVU7Ozs7WUFGRixrQkFBa0I7Ozs7Ozs7SUFJekIsc0NBQW9EOzs7OztJQUNwRCxnQ0FBK0M7Ozs7O0lBRW5DLHVDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJTGFuZ3VhZ2VEaXJlY3Rpb24gfSBmcm9tICcuLi9pbnRlcmZhY2VzL2xhbmd1YWdlRGlyZWN0aW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBUcmFuc2xhdGlvblNlcnZpY2UgfSBmcm9tICcuL3RyYW5zbGF0aW9uLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRGlyZWN0aW9uU2VydmljZSBpbXBsZW1lbnRzIElMYW5ndWFnZURpcmVjdGlvbiB7XG4gIHByaXZhdGUgZGlyZWN0aW9uJDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHJpdmF0ZSBydGwkOiBTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IFN1YmplY3QoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UpIHtcbiAgICB0aGlzLnRyYW5zbGF0aW9uLmdldFNlbGVjdGVkTGFuZ3VhZ2UoKS5zdWJzY3JpYmUoKGxhbmd1YWdlOiBhbnkpID0+IHtcbiAgICAgIHRoaXMuZGlyZWN0aW9uJC5uZXh0KGxhbmd1YWdlLmRpcmVjdGlvbik7XG4gICAgICB0aGlzLnJ0bCQubmV4dChsYW5ndWFnZS5ydGwpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldERpcmVjdGlvbigpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIHJldHVybiB0aGlzLmRpcmVjdGlvbiQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UlRMKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnJ0bCQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGlyZWN0aW9uRm9yKGxhbmd1YWdlQ29kZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uLmdldExhbmd1YWdlKFxuICAgICAgbGFuZ3VhZ2VDb2RlLnNwbGl0KC9bLV9dLylbMF1cbiAgICApO1xuICAgIHRoaXMuZGlyZWN0aW9uJC5uZXh0KGxhbmd1YWdlLmRpcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0UnRsRm9yKGxhbmd1YWdlQ29kZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSB0aGlzLnRyYW5zbGF0aW9uLmdldExhbmd1YWdlKFxuICAgICAgbGFuZ3VhZ2VDb2RlLnNwbGl0KC9bLV9dLylbMF1cbiAgICApO1xuICAgIHRoaXMucnRsJC5uZXh0KGxhbmd1YWdlLnJ0bCk7XG4gIH1cbn1cbiJdfQ==