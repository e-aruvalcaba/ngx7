/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { ReplaySubject } from 'rxjs';
export class TranslationService {
    // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver  ???
    /**
     * @param {?} httpClient
     * @param {?} productPath
     * @param {?} loadedLanguages
     * @param {?} defaultLanguageISO
     */
    constructor(httpClient, productPath, loadedLanguages, defaultLanguageISO // e.g.: en_US from america region || en_UK from europe region.
    ) {
        this.httpClient = httpClient;
        this.productPath = productPath;
        this.loadedLanguages = loadedLanguages;
        this.defaultLanguageISO = defaultLanguageISO;
        this.languageLoaded = new ReplaySubject(1);
        this.selectedLanguageSubject = new ReplaySubject(1);
        this.languagesSubject = new ReplaySubject(1);
        if (!this.loadedLanguages) {
            console.warn('The Translation Service can\'t init without Injected Languages.');
            console.warn('Inject the languages from your application: > ' +
                '{ provide: \'TRANSLATION_LANGUAGES, useValue: window[\'CMX_LANGUAGES\'] },\'');
            return;
        }
        if (!defaultLanguageISO) {
            console.warn('The Translation Service need defaultLanguageISO.');
        }
        TranslationService.languages = this.loadedLanguages;
        /** @type {?} */
        const localStorageLanguage = ((/** @type {?} */ (global))).localStorage.getItem('language');
        /** @type {?} */
        const allKeys = Object.keys(TranslationService.translations);
        if (allKeys.length === 0) {
            this.setLanguage(localStorageLanguage || defaultLanguageISO);
        }
        else {
            this.languageLoaded.next(true);
            // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?
        }
    }
    /**
     * \@description Gets the labels data from the server.
     * @param {?} $lang Language code for the file
     * @return {?}
     */
    getTranslations($lang) {
        /** @type {?} */
        const endpoint = `/translate/translate/${this.productPath}/${$lang}`;
        return this.httpClient.get(endpoint);
    }
    /**
     * \@description Observable to gets the languages that exist in the server
     * @return {?}
     */
    getLanguages() {
        return this.languagesSubject.asObservable();
    }
    /**
     * @return {?}
     */
    getSelectedLanguage() {
        return this.selectedLanguageSubject.asObservable();
    }
    /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    pt($textId) {
        /** @type {?} */
        const textValue = TranslationService.translations[$textId];
        if (!textValue || textValue === undefined) {
            return 'NOT:' + $textId;
        }
        return textValue;
    }
    /**
     * \@description Retrieve the public translation of a label
     * @param {?} $textId Label id as written in the json file
     * @return {?}
     */
    getLabel($textId) {
        /** @type {?} */
        const textValue = TranslationService.translations[$textId];
        if (!textValue || textValue === undefined) {
            return 'NOT:' + $textId;
        }
        return textValue;
    }
    /**
     * \@description Retrieve language published on the server.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    getLanguage($languageISO) {
        if ($languageISO !== undefined && $languageISO !== null) {
            /** @type {?} */
            let langValue;
            langValue = TranslationService.languages.find((/**
             * @param {?} language
             * @return {?}
             */
            language => {
                return (language.languageISO === $languageISO ||
                    language.countryCode.toLowerCase() === $languageISO.toLowerCase() ||
                    language.languageISO.includes($languageISO));
            }));
            // if the language cannot reached, go for default
            if (langValue === undefined) {
                console.warn('The Language cannot reached', $languageISO);
                langValue = this.getDefaultLanguage();
            }
            langValue.momentConfig = this.getMomentConfig(langValue);
            return langValue;
        }
        else {
            console.warn('$languageIso param is undefined.');
            return this.getDefaultLanguage();
        }
    }
    /**
     * \@description Retrieve language published on the server.
     * @param {?} $countryCode Can be the country code or the language iso combination
     * @return {?}
     */
    getLanguageByCountryCode($countryCode) {
        if ($countryCode !== undefined && $countryCode !== null) {
            /** @type {?} */
            let langValue;
            /** @type {?} */
            const countryLan = TranslationService.languages.filter((/**
             * @param {?} $language
             * @return {?}
             */
            $language => {
                return ($language.countryCode.toLowerCase() === $countryCode.toLowerCase());
            }));
            if (countryLan.length > 1) {
                /** @type {?} */
                const languageCode = sessionStorage.getItem('language');
                langValue = countryLan.find((/**
                 * @param {?} $language
                 * @return {?}
                 */
                $language => {
                    return ($language.languageISO.toLowerCase() === languageCode.toLowerCase());
                }));
            }
            else {
                langValue =
                    countryLan && countryLan.length > 0 ? countryLan[0] : undefined;
            }
            // if the language cannot reached, go for default
            if (langValue === undefined) {
                console.warn('The Language cannot reached', $countryCode);
                langValue = this.getDefaultLanguage();
            }
            langValue.momentConfig = this.getMomentConfig(langValue);
            return langValue;
        }
        else {
            console.warn('$countryCode param is undefined.');
            return this.getDefaultLanguage();
        }
    }
    /**
     * \@description Set language by languageISO or CountryCode.
     * @param {?} $languageISO Can be the country code or the language iso combination
     * @return {?}
     */
    setLanguage($languageISO) {
        this.selectedLanguage = this.getLanguage($languageISO);
        for (const lang of TranslationService.languages) {
            lang.isSelected = lang.languageISO === this.selectedLanguage.languageISO;
            lang.dir = lang.textFloat === 'right' ? 'rtl' : 'ltr';
            lang.rtl = lang.dir === 'rtl' ? true : false;
        }
        this.getTranslations(this.selectedLanguage.languageISO).subscribe((/**
         * @param {?} translations
         * @return {?}
         */
        translations => this.populateTranslation(translations)));
    }
    /**
     * @param {?} $result
     * @return {?}
     */
    populateTranslation($result) {
        TranslationService.translations = $result;
        // emit changes until populate is completed
        localStorage.setItem('language', this.selectedLanguage.languageISO);
        sessionStorage.setItem('language', this.selectedLanguage.languageISO);
        this.languageLoaded.next(true);
        // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?
        this.selectedLanguageSubject.next(this.selectedLanguage);
        this.languagesSubject.next(TranslationService.languages);
    }
    /**
     * @return {?}
     */
    get selectedLanguage() {
        return TranslationService.currentLanguage;
    }
    /**
     * @param {?} language
     * @return {?}
     */
    set selectedLanguage(language) {
        TranslationService.currentLanguage = language;
    }
    /**
     * @return {?}
     */
    getDefaultLanguage() {
        /** @type {?} */
        let defaultLangValue;
        defaultLangValue = TranslationService.languages.find((/**
         * @param {?} language
         * @return {?}
         */
        language => {
            return (language.languageISO === this.defaultLanguageISO ||
                language.countryCode.toLowerCase() ===
                    this.defaultLanguageISO.toLowerCase() ||
                language.languageISO.includes(this.defaultLanguageISO));
        }));
        if (defaultLangValue === undefined) {
            console.warn('The Default Language cannot reached', this.defaultLanguageISO);
            defaultLangValue = TranslationService.languages[0];
            console.warn('Trying get the first language', defaultLangValue.languageISO);
        }
        else {
            console.warn('The Default Language is', defaultLangValue.languageISO);
        }
        return defaultLangValue;
    }
    /**
     * @param {?} countryCode
     * @return {?}
     */
    getLanguagesByCountryCode(countryCode) {
        /** @type {?} */
        const languagesByContryCode = TranslationService.languages.filter((/**
         * @param {?} language
         * @return {?}
         */
        language => language.countryCode.toLowerCase() === countryCode.toLowerCase()));
        return languagesByContryCode;
    }
    /**
     * @private
     * @param {?} language
     * @return {?}
     */
    getMomentConfig(language) {
        return {
            months: language.monthNames.split(','),
            monthsShort: language.shortDayMonths.split(','),
            weekdays: language.dayNames.split(','),
            weekdaysMin: language.shortDayNames2.split(','),
            weekdaysShort: language.shortDayNames.split(',')
        };
    }
}
TranslationService.TRANSLATION_PRODUCT_PATH = 'TRANSLATION_PRODUCT_PATH';
TranslationService.TRANSLATION_LANGUAGES = 'TRANSLATION_LANGUAGES';
TranslationService.DEFAULT_LANGUAGE_ISO = 'DEFAULT_LANGUAGE_ISO';
TranslationService.currentLanguage = undefined;
TranslationService.translations = {};
TranslationService.languages = [];
TranslationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TranslationService.ctorParameters = () => [
    { type: HttpClient },
    { type: String, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_PRODUCT_PATH,] }, { type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_LANGUAGES,] }, { type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [TranslationService.DEFAULT_LANGUAGE_ISO,] }, { type: Optional }] }
];
if (false) {
    /** @type {?} */
    TranslationService.TRANSLATION_PRODUCT_PATH;
    /** @type {?} */
    TranslationService.TRANSLATION_LANGUAGES;
    /** @type {?} */
    TranslationService.DEFAULT_LANGUAGE_ISO;
    /** @type {?} */
    TranslationService.currentLanguage;
    /**
     * @type {?}
     * @private
     */
    TranslationService.translations;
    /**
     * @type {?}
     * @private
     */
    TranslationService.languages;
    /** @type {?} */
    TranslationService.prototype.languageLoaded;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.selectedLanguageSubject;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.languagesSubject;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.productPath;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.loadedLanguages;
    /**
     * @type {?}
     * @private
     */
    TranslationService.prototype.defaultLanguageISO;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItbG9jYWxpemF0aW9uLXY3LyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RyYW5zbGF0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbEQsT0FBTyxFQUFjLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVFqRCxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7OztJQWM3QixZQUNVLFVBQXNCLEVBR3RCLFdBQW1CLEVBR25CLGVBQW9CLEVBR3BCLGtCQUF1QixDQUFDLCtEQUErRDs7UUFUdkYsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUd0QixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtRQUduQixvQkFBZSxHQUFmLGVBQWUsQ0FBSztRQUdwQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQUs7UUFmMUIsbUJBQWMsR0FBRyxJQUFJLGFBQWEsQ0FBVSxDQUFDLENBQUMsQ0FBQztRQUM5Qyw0QkFBdUIsR0FBRyxJQUFJLGFBQWEsQ0FBWSxDQUFDLENBQUMsQ0FBQztRQUMxRCxxQkFBZ0IsR0FBRyxJQUFJLGFBQWEsQ0FBYyxDQUFDLENBQUMsQ0FBQztRQWUzRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxDQUNWLGlFQUFpRSxDQUNsRSxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FDVixnREFBZ0Q7Z0JBQzlDLDhFQUE4RSxDQUNqRixDQUFDO1lBQ0YsT0FBTztTQUNSO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1lBQ3ZCLE9BQU8sQ0FBQyxJQUFJLENBQUMsa0RBQWtELENBQUMsQ0FBQztTQUNs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Ozs7OztJQUVyRCxnQ0FBc0M7Ozs7O0lBQ3RDLDZCQUEyQzs7SUFFM0MsNENBQXNEOzs7OztJQUN0RCxxREFBa0U7Ozs7O0lBQ2xFLDhDQUE2RDs7Ozs7SUFJM0Qsd0NBQThCOzs7OztJQUM5Qix5Q0FFMkI7Ozs7O0lBQzNCLDZDQUU0Qjs7Ozs7SUFDNUIsZ0RBRStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgUmVwbGF5U3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJTGFuZ3VhZ2UgfSBmcm9tICcuLy4uL2ludGVyZmFjZXMvbGFuZ3VhZ2UuaW50ZXJmYWNlJztcbmltcG9ydCB7IElUcmFuc2xhdGlvbkludGVyZmFjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvdHJhbnNsYXRpb24uaW50ZXJmYWNlJztcblxuZGVjbGFyZSB2YXIgZ2xvYmFsOiBhbnk7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUcmFuc2xhdGlvblNlcnZpY2UgaW1wbGVtZW50cyBJVHJhbnNsYXRpb25JbnRlcmZhY2Uge1xuICBwdWJsaWMgc3RhdGljIFRSQU5TTEFUSU9OX1BST0RVQ1RfUEFUSCA9ICdUUkFOU0xBVElPTl9QUk9EVUNUX1BBVEgnO1xuICBwdWJsaWMgc3RhdGljIFRSQU5TTEFUSU9OX0xBTkdVQUdFUyA9ICdUUkFOU0xBVElPTl9MQU5HVUFHRVMnO1xuICBwdWJsaWMgc3RhdGljIERFRkFVTFRfTEFOR1VBR0VfSVNPID0gJ0RFRkFVTFRfTEFOR1VBR0VfSVNPJztcbiAgcHVibGljIHN0YXRpYyBjdXJyZW50TGFuZ3VhZ2U6IElMYW5ndWFnZSA9IHVuZGVmaW5lZDtcblxuICBwcml2YXRlIHN0YXRpYyB0cmFuc2xhdGlvbnM6IGFueSA9IHt9O1xuICBwcml2YXRlIHN0YXRpYyBsYW5ndWFnZXM6IElMYW5ndWFnZVtdID0gW107XG5cbiAgcHVibGljIGxhbmd1YWdlTG9hZGVkID0gbmV3IFJlcGxheVN1YmplY3Q8Ym9vbGVhbj4oMSk7XG4gIHByaXZhdGUgc2VsZWN0ZWRMYW5ndWFnZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxJTGFuZ3VhZ2U+KDEpO1xuICBwcml2YXRlIGxhbmd1YWdlc1N1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxJTGFuZ3VhZ2VbXT4oMSk7XG4gIC8vIHdlIGNhbiBjaGFuZ2UgJ2xhbmd1YWdlTG9hZGVkJyB0byAnc2VsZWN0ZWRMYW5ndWFnZVN1YmplY3QnIGluIHRyYW5zbGF0aW9uIHJlc29sdmVyICA/Pz9cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQsXG4gICAgQEluamVjdChUcmFuc2xhdGlvblNlcnZpY2UuVFJBTlNMQVRJT05fUFJPRFVDVF9QQVRIKVxuICAgIEBPcHRpb25hbCgpXG4gICAgcHJpdmF0ZSBwcm9kdWN0UGF0aDogc3RyaW5nLFxuICAgIEBJbmplY3QoVHJhbnNsYXRpb25TZXJ2aWNlLlRSQU5TTEFUSU9OX0xBTkdVQUdFUylcbiAgICBAT3B0aW9uYWwoKVxuICAgIHByaXZhdGUgbG9hZGVkTGFuZ3VhZ2VzOiBhbnksXG4gICAgQEluamVjdChUcmFuc2xhdGlvblNlcnZpY2UuREVGQVVMVF9MQU5HVUFHRV9JU08pXG4gICAgQE9wdGlvbmFsKClcbiAgICBwcml2YXRlIGRlZmF1bHRMYW5ndWFnZUlTTzogYW55IC8vIGUuZy46IGVuX1VTIGZyb20gYW1lcmljYSByZWdpb24gfHwgZW5fVUsgZnJvbSBldXJvcGUgcmVnaW9uLlxuICApIHtcbiAgICBpZiAoIXRoaXMubG9hZGVkTGFuZ3VhZ2VzKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdUaGUgVHJhbnNsYXRpb24gU2VydmljZSBjYW5cXCd0IGluaXQgd2l0aG91dCBJbmplY3RlZCBMYW5ndWFnZXMuJ1xuICAgICAgKTtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgJ0luamVjdCB0aGUgbGFuZ3VhZ2VzIGZyb20geW91ciBhcHBsaWNhdGlvbjogPiAnICtcbiAgICAgICAgICAneyBwcm92aWRlOiBcXCdUUkFOU0xBVElPTl9MQU5HVUFHRVMsIHVzZVZhbHVlOiB3aW5kb3dbXFwnQ01YX0xBTkdVQUdFU1xcJ10gfSxcXCcnXG4gICAgICApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVmYXVsdExhbmd1YWdlSVNPKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSBUcmFuc2xhdGlvbiBTZXJ2aWNlIG5lZWQgZGVmYXVsdExhbmd1YWdlSVNPLicpO1xuICAgIH1cblxuICAgIFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXMgPSB0aGlzLmxvYWRlZExhbmd1YWdlcztcbiAgICBjb25zdCBsb2NhbFN0b3JhZ2VMYW5ndWFnZSA9IChnbG9iYWwgYXMgYW55KS5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcbiAgICAgICdsYW5ndWFnZSdcbiAgICApO1xuXG4gICAgY29uc3QgYWxsS2V5cyA9IE9iamVjdC5rZXlzKFRyYW5zbGF0aW9uU2VydmljZS50cmFuc2xhdGlvbnMpO1xuICAgIGlmIChhbGxLZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRMYW5ndWFnZShsb2NhbFN0b3JhZ2VMYW5ndWFnZSB8fCBkZWZhdWx0TGFuZ3VhZ2VJU08pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhbmd1YWdlTG9hZGVkLm5leHQodHJ1ZSk7XG4gICAgICAvLyB3ZSBjYW4gY2hhbmdlICdsYW5ndWFnZUxvYWRlZCcgdG8gJ3NlbGVjdGVkTGFuZ3VhZ2VTdWJqZWN0JyBpbiB0cmFuc2xhdGlvbiByZXNvbHZlcj9cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIEdldHMgdGhlIGxhYmVscyBkYXRhIGZyb20gdGhlIHNlcnZlci5cbiAgICogQHBhcmFtICRsYW5nIExhbmd1YWdlIGNvZGUgZm9yIHRoZSBmaWxlXG4gICAqL1xuICBwdWJsaWMgZ2V0VHJhbnNsYXRpb25zKCRsYW5nOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYC90cmFuc2xhdGUvdHJhbnNsYXRlLyR7dGhpcy5wcm9kdWN0UGF0aH0vJHskbGFuZ31gO1xuICAgIHJldHVybiB0aGlzLmh0dHBDbGllbnQuZ2V0PGFueT4oZW5kcG9pbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBPYnNlcnZhYmxlIHRvIGdldHMgdGhlIGxhbmd1YWdlcyB0aGF0IGV4aXN0IGluIHRoZSBzZXJ2ZXJcbiAgICovXG4gIHB1YmxpYyBnZXRMYW5ndWFnZXMoKTogT2JzZXJ2YWJsZTxJTGFuZ3VhZ2VbXT4ge1xuICAgIHJldHVybiB0aGlzLmxhbmd1YWdlc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgZ2V0U2VsZWN0ZWRMYW5ndWFnZSgpOiBPYnNlcnZhYmxlPElMYW5ndWFnZT4ge1xuICAgIHJldHVybiB0aGlzLnNlbGVjdGVkTGFuZ3VhZ2VTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZSB0aGUgcHVibGljIHRyYW5zbGF0aW9uIG9mIGEgbGFiZWxcbiAgICogQHBhcmFtICR0ZXh0SWQgTGFiZWwgaWQgYXMgd3JpdHRlbiBpbiB0aGUganNvbiBmaWxlXG4gICAqL1xuICBwdWJsaWMgcHQoJHRleHRJZDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB0ZXh0VmFsdWUgPSBUcmFuc2xhdGlvblNlcnZpY2UudHJhbnNsYXRpb25zWyR0ZXh0SWRdO1xuICAgIGlmICghdGV4dFZhbHVlIHx8IHRleHRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gJ05PVDonICsgJHRleHRJZDtcbiAgICB9XG4gICAgcmV0dXJuIHRleHRWYWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAZGVzY3JpcHRpb24gUmV0cmlldmUgdGhlIHB1YmxpYyB0cmFuc2xhdGlvbiBvZiBhIGxhYmVsXG4gICAqIEBwYXJhbSAkdGV4dElkIExhYmVsIGlkIGFzIHdyaXR0ZW4gaW4gdGhlIGpzb24gZmlsZVxuICAgKi9cbiAgcHVibGljIGdldExhYmVsKCR0ZXh0SWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdGV4dFZhbHVlID0gVHJhbnNsYXRpb25TZXJ2aWNlLnRyYW5zbGF0aW9uc1skdGV4dElkXTtcbiAgICBpZiAoIXRleHRWYWx1ZSB8fCB0ZXh0VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuICdOT1Q6JyArICR0ZXh0SWQ7XG4gICAgfVxuICAgIHJldHVybiB0ZXh0VmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogQGRlc2NyaXB0aW9uIFJldHJpZXZlIGxhbmd1YWdlIHB1Ymxpc2hlZCBvbiB0aGUgc2VydmVyLlxuICAgKiBAcGFyYW0gJGxhbmd1YWdlSVNPIENhbiBiZSB0aGUgY291bnRyeSBjb2RlIG9yIHRoZSBsYW5ndWFnZSBpc28gY29tYmluYXRpb25cbiAgICovXG4gIHB1YmxpYyBnZXRMYW5ndWFnZSgkbGFuZ3VhZ2VJU086IHN0cmluZyk6IElMYW5ndWFnZSB7XG4gICAgaWYgKCRsYW5ndWFnZUlTTyAhPT0gdW5kZWZpbmVkICYmICRsYW5ndWFnZUlTTyAhPT0gbnVsbCkge1xuICAgICAgbGV0IGxhbmdWYWx1ZTogSUxhbmd1YWdlO1xuXG4gICAgICBsYW5nVmFsdWUgPSBUcmFuc2xhdGlvblNlcnZpY2UubGFuZ3VhZ2VzLmZpbmQobGFuZ3VhZ2UgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIGxhbmd1YWdlLmxhbmd1YWdlSVNPID09PSAkbGFuZ3VhZ2VJU08gfHxcbiAgICAgICAgICBsYW5ndWFnZS5jb3VudHJ5Q29kZS50b0xvd2VyQ2FzZSgpID09PSAkbGFuZ3VhZ2VJU08udG9Mb3dlckNhc2UoKSB8fFxuICAgICAgICAgIGxhbmd1YWdlLmxhbmd1YWdlSVNPLmluY2x1ZGVzKCRsYW5ndWFnZUlTTylcbiAgICAgICAgKTtcbiAgICAgIH0pO1xuXG4gICAgICAvLyBpZiB0aGUgbGFuZ3VhZ2UgY2Fubm90IHJlYWNoZWQsIGdvIGZvciBkZWZhdWx0XG4gICAgICBpZiAobGFuZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgTGFuZ3VhZ2UgY2Fubm90IHJlYWNoZWQnLCAkbGFuZ3VhZ2VJU08pO1xuICAgICAgICBsYW5nVmFsdWUgPSB0aGlzLmdldERlZmF1bHRMYW5ndWFnZSgpO1xuICAgICAgfVxuXG4gICAgICBsYW5nVmFsdWUubW9tZW50Q29uZmlnID0gdGhpcy5nZXRNb21lbnRDb25maWcobGFuZ1ZhbHVlKTtcblxuICAgICAgcmV0dXJuIGxhbmdWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCckbGFuZ3VhZ2VJc28gcGFyYW0gaXMgdW5kZWZpbmVkLicpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdExhbmd1YWdlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBSZXRyaWV2ZSBsYW5ndWFnZSBwdWJsaXNoZWQgb24gdGhlIHNlcnZlci5cbiAgICogQHBhcmFtICRjb3VudHJ5Q29kZSBDYW4gYmUgdGhlIGNvdW50cnkgY29kZSBvciB0aGUgbGFuZ3VhZ2UgaXNvIGNvbWJpbmF0aW9uXG4gICAqL1xuICBwdWJsaWMgZ2V0TGFuZ3VhZ2VCeUNvdW50cnlDb2RlKCRjb3VudHJ5Q29kZTogc3RyaW5nKTogSUxhbmd1YWdlIHtcbiAgICBpZiAoJGNvdW50cnlDb2RlICE9PSB1bmRlZmluZWQgJiYgJGNvdW50cnlDb2RlICE9PSBudWxsKSB7XG4gICAgICBsZXQgbGFuZ1ZhbHVlOiBJTGFuZ3VhZ2U7XG4gICAgICBjb25zdCBjb3VudHJ5TGFuOiBJTGFuZ3VhZ2VbXSA9IFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXMuZmlsdGVyKFxuICAgICAgICAkbGFuZ3VhZ2UgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAkbGFuZ3VhZ2UuY291bnRyeUNvZGUudG9Mb3dlckNhc2UoKSA9PT0gJGNvdW50cnlDb2RlLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoY291bnRyeUxhbi5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGxhbmd1YWdlQ29kZSA9IHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlJyk7XG4gICAgICAgIGxhbmdWYWx1ZSA9IGNvdW50cnlMYW4uZmluZCgkbGFuZ3VhZ2UgPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAkbGFuZ3VhZ2UubGFuZ3VhZ2VJU08udG9Mb3dlckNhc2UoKSA9PT0gbGFuZ3VhZ2VDb2RlLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxhbmdWYWx1ZSA9XG4gICAgICAgICAgY291bnRyeUxhbiAmJiBjb3VudHJ5TGFuLmxlbmd0aCA+IDAgPyBjb3VudHJ5TGFuWzBdIDogdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgbGFuZ3VhZ2UgY2Fubm90IHJlYWNoZWQsIGdvIGZvciBkZWZhdWx0XG4gICAgICBpZiAobGFuZ1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdUaGUgTGFuZ3VhZ2UgY2Fubm90IHJlYWNoZWQnLCAkY291bnRyeUNvZGUpO1xuICAgICAgICBsYW5nVmFsdWUgPSB0aGlzLmdldERlZmF1bHRMYW5ndWFnZSgpO1xuICAgICAgfVxuXG4gICAgICBsYW5nVmFsdWUubW9tZW50Q29uZmlnID0gdGhpcy5nZXRNb21lbnRDb25maWcobGFuZ1ZhbHVlKTtcblxuICAgICAgcmV0dXJuIGxhbmdWYWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKCckY291bnRyeUNvZGUgcGFyYW0gaXMgdW5kZWZpbmVkLicpO1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdExhbmd1YWdlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBkZXNjcmlwdGlvbiBTZXQgbGFuZ3VhZ2UgYnkgbGFuZ3VhZ2VJU08gb3IgQ291bnRyeUNvZGUuXG4gICAqIEBwYXJhbSAkbGFuZ3VhZ2VJU08gQ2FuIGJlIHRoZSBjb3VudHJ5IGNvZGUgb3IgdGhlIGxhbmd1YWdlIGlzbyBjb21iaW5hdGlvblxuICAgKi9cbiAgcHVibGljIHNldExhbmd1YWdlKCRsYW5ndWFnZUlTTzogc3RyaW5nKSB7XG4gICAgdGhpcy5zZWxlY3RlZExhbmd1YWdlID0gdGhpcy5nZXRMYW5ndWFnZSgkbGFuZ3VhZ2VJU08pO1xuXG4gICAgZm9yIChjb25zdCBsYW5nIG9mIFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXMpIHtcbiAgICAgIGxhbmcuaXNTZWxlY3RlZCA9IGxhbmcubGFuZ3VhZ2VJU08gPT09IHRoaXMuc2VsZWN0ZWRMYW5ndWFnZS5sYW5ndWFnZUlTTztcbiAgICAgIGxhbmcuZGlyID0gbGFuZy50ZXh0RmxvYXQgPT09ICdyaWdodCcgPyAncnRsJyA6ICdsdHInO1xuICAgICAgbGFuZy5ydGwgPSBsYW5nLmRpciA9PT0gJ3J0bCcgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5nZXRUcmFuc2xhdGlvbnModGhpcy5zZWxlY3RlZExhbmd1YWdlLmxhbmd1YWdlSVNPKS5zdWJzY3JpYmUoXG4gICAgICB0cmFuc2xhdGlvbnMgPT4gdGhpcy5wb3B1bGF0ZVRyYW5zbGF0aW9uKHRyYW5zbGF0aW9ucylcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHBvcHVsYXRlVHJhbnNsYXRpb24oJHJlc3VsdDogYW55KSB7XG4gICAgVHJhbnNsYXRpb25TZXJ2aWNlLnRyYW5zbGF0aW9ucyA9ICRyZXN1bHQ7XG5cbiAgICAvLyBlbWl0IGNoYW5nZXMgdW50aWwgcG9wdWxhdGUgaXMgY29tcGxldGVkXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2xhbmd1YWdlJywgdGhpcy5zZWxlY3RlZExhbmd1YWdlLmxhbmd1YWdlSVNPKTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdsYW5ndWFnZScsIHRoaXMuc2VsZWN0ZWRMYW5ndWFnZS5sYW5ndWFnZUlTTyk7XG4gICAgdGhpcy5sYW5ndWFnZUxvYWRlZC5uZXh0KHRydWUpO1xuICAgIC8vIHdlIGNhbiBjaGFuZ2UgJ2xhbmd1YWdlTG9hZGVkJyB0byAnc2VsZWN0ZWRMYW5ndWFnZVN1YmplY3QnIGluIHRyYW5zbGF0aW9uIHJlc29sdmVyP1xuICAgIHRoaXMuc2VsZWN0ZWRMYW5ndWFnZVN1YmplY3QubmV4dCh0aGlzLnNlbGVjdGVkTGFuZ3VhZ2UpO1xuICAgIHRoaXMubGFuZ3VhZ2VzU3ViamVjdC5uZXh0KFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXMpO1xuICB9XG5cbiAgcHVibGljIGdldCBzZWxlY3RlZExhbmd1YWdlKCkge1xuICAgIHJldHVybiBUcmFuc2xhdGlvblNlcnZpY2UuY3VycmVudExhbmd1YWdlO1xuICB9XG5cbiAgcHVibGljIHNldCBzZWxlY3RlZExhbmd1YWdlKGxhbmd1YWdlOiBJTGFuZ3VhZ2UpIHtcbiAgICBUcmFuc2xhdGlvblNlcnZpY2UuY3VycmVudExhbmd1YWdlID0gbGFuZ3VhZ2U7XG4gIH1cblxuICBwdWJsaWMgZ2V0RGVmYXVsdExhbmd1YWdlKCkge1xuICAgIGxldCBkZWZhdWx0TGFuZ1ZhbHVlOiBJTGFuZ3VhZ2U7XG5cbiAgICBkZWZhdWx0TGFuZ1ZhbHVlID0gVHJhbnNsYXRpb25TZXJ2aWNlLmxhbmd1YWdlcy5maW5kKGxhbmd1YWdlID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIGxhbmd1YWdlLmxhbmd1YWdlSVNPID09PSB0aGlzLmRlZmF1bHRMYW5ndWFnZUlTTyB8fFxuICAgICAgICBsYW5ndWFnZS5jb3VudHJ5Q29kZS50b0xvd2VyQ2FzZSgpID09PVxuICAgICAgICAgIHRoaXMuZGVmYXVsdExhbmd1YWdlSVNPLnRvTG93ZXJDYXNlKCkgfHxcbiAgICAgICAgbGFuZ3VhZ2UubGFuZ3VhZ2VJU08uaW5jbHVkZXModGhpcy5kZWZhdWx0TGFuZ3VhZ2VJU08pXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaWYgKGRlZmF1bHRMYW5nVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAnVGhlIERlZmF1bHQgTGFuZ3VhZ2UgY2Fubm90IHJlYWNoZWQnLFxuICAgICAgICB0aGlzLmRlZmF1bHRMYW5ndWFnZUlTT1xuICAgICAgKTtcblxuICAgICAgZGVmYXVsdExhbmdWYWx1ZSA9IFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXNbMF07XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdUcnlpbmcgZ2V0IHRoZSBmaXJzdCBsYW5ndWFnZScsXG4gICAgICAgIGRlZmF1bHRMYW5nVmFsdWUubGFuZ3VhZ2VJU09cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybignVGhlIERlZmF1bHQgTGFuZ3VhZ2UgaXMnLCBkZWZhdWx0TGFuZ1ZhbHVlLmxhbmd1YWdlSVNPKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmYXVsdExhbmdWYWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYW5ndWFnZXNCeUNvdW50cnlDb2RlKGNvdW50cnlDb2RlOiBzdHJpbmcpOiBJTGFuZ3VhZ2VbXSB7XG4gICAgY29uc3QgbGFuZ3VhZ2VzQnlDb250cnlDb2RlOiBJTGFuZ3VhZ2VbXSA9IFRyYW5zbGF0aW9uU2VydmljZS5sYW5ndWFnZXMuZmlsdGVyKFxuICAgICAgbGFuZ3VhZ2UgPT5cbiAgICAgICAgbGFuZ3VhZ2UuY291bnRyeUNvZGUudG9Mb3dlckNhc2UoKSA9PT0gY291bnRyeUNvZGUudG9Mb3dlckNhc2UoKVxuICAgICk7XG4gICAgcmV0dXJuIGxhbmd1YWdlc0J5Q29udHJ5Q29kZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0TW9tZW50Q29uZmlnKGxhbmd1YWdlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1vbnRoczogbGFuZ3VhZ2UubW9udGhOYW1lcy5zcGxpdCgnLCcpLFxuICAgICAgbW9udGhzU2hvcnQ6IGxhbmd1YWdlLnNob3J0RGF5TW9udGhzLnNwbGl0KCcsJyksXG4gICAgICB3ZWVrZGF5czogbGFuZ3VhZ2UuZGF5TmFtZXMuc3BsaXQoJywnKSxcbiAgICAgIHdlZWtkYXlzTWluOiBsYW5ndWFnZS5zaG9ydERheU5hbWVzMi5zcGxpdCgnLCcpLFxuICAgICAgd2Vla2RheXNTaG9ydDogbGFuZ3VhZ2Uuc2hvcnREYXlOYW1lcy5zcGxpdCgnLCcpXG4gICAgfTtcbiAgfVxufVxuIl19