/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FormatterService } from './../services/formatter.service';
export class CmxCurrencyCustomPipe {
    /**
     * @param {?} formatter
     */
    constructor(formatter) {
        this.formatter = formatter;
        this.value = '';
    }
    /**
     * @param {?} $value
     * @param {?} $currencySymbol
     * @param {?} $decimalNumbers
     * @param {?} $thousandSeparator
     * @param {?} $decimalSeparator
     * @param {?=} $floatCurrencySymbolRight
     * @return {?}
     */
    transform($value, $currencySymbol, $decimalNumbers, $thousandSeparator, $decimalSeparator, $floatCurrencySymbolRight) {
        try {
            if ($value !== undefined && isNaN($value) === false) {
                this.value = $value.toString();
                $decimalNumbers = parseInt($decimalNumbers.toString(), undefined);
                if ($value < 0) {
                    // value is negative
                    /** @type {?} */
                    const v = parseFloat($value.toString().replace(/\-/g, ''));
                    /** @type {?} */
                    const $aux = this.formatter.formatNumber(v, $decimalNumbers, $thousandSeparator, $decimalSeparator);
                    if ($floatCurrencySymbolRight) {
                        this.value = '-' + $aux + $currencySymbol;
                    }
                    else {
                        this.value = '-' + $currencySymbol + $aux;
                    }
                }
                else {
                    this.value =
                        $currencySymbol +
                            this.formatter.formatNumber($value, $decimalNumbers, $thousandSeparator, $decimalSeparator);
                }
            }
            else {
                this.value = '';
            }
        }
        catch ($exception) {
            console.error('Value trying to transform: ', $value);
            console.error($exception);
            this.value = '';
        }
        return this.value;
    }
}
CmxCurrencyCustomPipe.decorators = [
    { type: Pipe, args: [{
                name: 'cmxCurrencyCustom',
                pure: true
            },] }
];
/** @nocollapse */
CmxCurrencyCustomPipe.ctorParameters = () => [
    { type: FormatterService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyCustomPipe.prototype.value;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyCustomPipe.prototype.formatter;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWN1cnJlbmN5LWN1c3RvbS5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4LWNvcmUvYW5ndWxhci1sb2NhbGl6YXRpb24tdjcvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvY214LWN1cnJlbmN5LWN1c3RvbS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQU1uRSxNQUFNLE9BQU8scUJBQXFCOzs7O0lBR2hDLFlBQW9CLFNBQTJCO1FBQTNCLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBRnZDLFVBQUssR0FBRyxFQUFFLENBQUM7SUFFK0IsQ0FBQzs7Ozs7Ozs7OztJQUU1QyxTQUFTLENBQ2QsTUFBVyxFQUNYLGVBQXVCLEVBQ3ZCLGVBQWdDLEVBQ2hDLGtCQUEwQixFQUMxQixpQkFBeUIsRUFDekIseUJBQW1DO1FBRW5DLElBQUk7WUFDRixJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRTtnQkFDbkQsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQy9CLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2dCQUNsRSxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUU7OzswQkFFUixDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDOzswQkFDcEQsSUFBSSxHQUFXLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUM5QyxDQUFDLEVBQ0QsZUFBZSxFQUNmLGtCQUFrQixFQUNsQixpQkFBaUIsQ0FDbEI7b0JBQ0QsSUFBSSx5QkFBeUIsRUFBRTt3QkFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsSUFBSSxHQUFHLGVBQWUsQ0FBQztxQkFDM0M7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEdBQUcsZUFBZSxHQUFHLElBQUksQ0FBQztxQkFDM0M7aUJBQ0Y7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLEtBQUs7d0JBQ1IsZUFBZTs0QkFDZixJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FDekIsTUFBTSxFQUNOLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsaUJBQWlCLENBQ2xCLENBQUM7aUJBQ0w7YUFDRjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQzthQUNqQjtTQUNGO1FBQUMsT0FBTyxVQUFVLEVBQUU7WUFDbkIsT0FBTyxDQUFDLEtBQUssQ0FBQyw2QkFBNkIsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFCLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7OztZQXRERixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLG1CQUFtQjtnQkFDekIsSUFBSSxFQUFFLElBQUk7YUFDWDs7OztZQUxRLGdCQUFnQjs7Ozs7OztJQU92QixzQ0FBbUI7Ozs7O0lBRVAsMENBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBGb3JtYXR0ZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9mb3JtYXR0ZXIuc2VydmljZSc7XG5cbkBQaXBlKHtcbiAgbmFtZTogJ2NteEN1cnJlbmN5Q3VzdG9tJyxcbiAgcHVyZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBDbXhDdXJyZW5jeUN1c3RvbVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgcHJpdmF0ZSB2YWx1ZSA9ICcnO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZm9ybWF0dGVyOiBGb3JtYXR0ZXJTZXJ2aWNlKSB7fVxuXG4gIHB1YmxpYyB0cmFuc2Zvcm0oXG4gICAgJHZhbHVlOiBhbnksXG4gICAgJGN1cnJlbmN5U3ltYm9sOiBzdHJpbmcsXG4gICAgJGRlY2ltYWxOdW1iZXJzOiBzdHJpbmcgfCBudW1iZXIsXG4gICAgJHRob3VzYW5kU2VwYXJhdG9yOiBzdHJpbmcsXG4gICAgJGRlY2ltYWxTZXBhcmF0b3I6IHN0cmluZyxcbiAgICAkZmxvYXRDdXJyZW5jeVN5bWJvbFJpZ2h0PzogYm9vbGVhblxuICApOiBzdHJpbmcge1xuICAgIHRyeSB7XG4gICAgICBpZiAoJHZhbHVlICE9PSB1bmRlZmluZWQgJiYgaXNOYU4oJHZhbHVlKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICR2YWx1ZS50b1N0cmluZygpO1xuICAgICAgICAkZGVjaW1hbE51bWJlcnMgPSBwYXJzZUludCgkZGVjaW1hbE51bWJlcnMudG9TdHJpbmcoKSwgdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKCR2YWx1ZSA8IDApIHtcbiAgICAgICAgICAvLyB2YWx1ZSBpcyBuZWdhdGl2ZVxuICAgICAgICAgIGNvbnN0IHYgPSBwYXJzZUZsb2F0KCR2YWx1ZS50b1N0cmluZygpLnJlcGxhY2UoL1xcLS9nLCAnJykpO1xuICAgICAgICAgIGNvbnN0ICRhdXg6IHN0cmluZyA9IHRoaXMuZm9ybWF0dGVyLmZvcm1hdE51bWJlcihcbiAgICAgICAgICAgIHYsXG4gICAgICAgICAgICAkZGVjaW1hbE51bWJlcnMsXG4gICAgICAgICAgICAkdGhvdXNhbmRTZXBhcmF0b3IsXG4gICAgICAgICAgICAkZGVjaW1hbFNlcGFyYXRvclxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKCRmbG9hdEN1cnJlbmN5U3ltYm9sUmlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSAnLScgKyAkYXV4ICsgJGN1cnJlbmN5U3ltYm9sO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gJy0nICsgJGN1cnJlbmN5U3ltYm9sICsgJGF1eDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy52YWx1ZSA9XG4gICAgICAgICAgICAkY3VycmVuY3lTeW1ib2wgK1xuICAgICAgICAgICAgdGhpcy5mb3JtYXR0ZXIuZm9ybWF0TnVtYmVyKFxuICAgICAgICAgICAgICAkdmFsdWUsXG4gICAgICAgICAgICAgICRkZWNpbWFsTnVtYmVycyxcbiAgICAgICAgICAgICAgJHRob3VzYW5kU2VwYXJhdG9yLFxuICAgICAgICAgICAgICAkZGVjaW1hbFNlcGFyYXRvclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKCRleGNlcHRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1ZhbHVlIHRyeWluZyB0byB0cmFuc2Zvcm06ICcsICR2YWx1ZSk7XG4gICAgICBjb25zb2xlLmVycm9yKCRleGNlcHRpb24pO1xuICAgICAgdGhpcy52YWx1ZSA9ICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy52YWx1ZTtcbiAgfVxufVxuIl19