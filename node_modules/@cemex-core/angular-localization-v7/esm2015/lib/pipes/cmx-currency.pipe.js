/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Inject, Pipe, PLATFORM_ID } from '@angular/core';
import { FormatterService } from './../services/formatter.service';
import { TranslationService } from './../services/translation.service';
export class CmxCurrencyPipe {
    /**
     * @param {?} formatter
     * @param {?} translation
     * @param {?} platformId
     */
    constructor(formatter, translation, platformId) {
        this.formatter = formatter;
        this.translation = translation;
        this.platformId = platformId;
        if (isPlatformBrowser(platformId)) {
            this.window = window;
        }
    }
    /**
     * @param {?} value
     * @param {?=} countryCode
     * @return {?}
     */
    transform(value, countryCode) {
        if (value === '' || value == null || isNaN((/** @type {?} */ (value)))) {
            console.warn('The value is not a number');
            return '';
        }
        countryCode = countryCode || this.window.sessionStorage.getItem('country');
        // tslint:disable-next-line:triple-equals
        if (countryCode == undefined) {
            console.warn(`Can't retrieve countryCode`);
            return '';
        }
        /** @type {?} */
        const lang = this.translation.getLanguageByCountryCode(countryCode);
        /** @type {?} */
        const symbolPosition = (lang.currencySymbolFloat && lang.currencySymbolFloat.toLowerCase()) ||
            'left';
        /** @type {?} */
        const currencySymbol = lang.currencySymbol || '$';
        /** @type {?} */
        const formattedNumber = this.formatter.formatNumber(value, lang && lang.decimalNumbersMoney, lang && lang.thousandSeparator, lang && lang.decimalSeparator);
        /** @type {?} */
        const numberWithCurrency = symbolPosition === 'left'
            ? `${currencySymbol}${formattedNumber}`
            : `${formattedNumber}${currencySymbol}`;
        return '&lrm;' + numberWithCurrency;
    }
}
CmxCurrencyPipe.decorators = [
    { type: Pipe, args: [{
                name: 'cmxCurrency',
                pure: true
            },] }
];
/** @nocollapse */
CmxCurrencyPipe.ctorParameters = () => [
    { type: FormatterService },
    { type: TranslationService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /** @type {?} */
    CmxCurrencyPipe.prototype.window;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.formatter;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.translation;
    /**
     * @type {?}
     * @private
     */
    CmxCurrencyPipe.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWN1cnJlbmN5LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLWxvY2FsaXphdGlvbi12Ny8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9jbXgtY3VycmVuY3kucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUd6RSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQU12RSxNQUFNLE9BQU8sZUFBZTs7Ozs7O0lBSzFCLFlBQ1UsU0FBMkIsRUFDM0IsV0FBK0IsRUFDVixVQUFlO1FBRnBDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUNWLGVBQVUsR0FBVixVQUFVLENBQUs7UUFFNUMsSUFBSSxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNqQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7OztJQUVNLFNBQVMsQ0FBQyxLQUFVLEVBQUUsV0FBb0I7UUFDL0MsSUFBSSxLQUFLLEtBQUssRUFBRSxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLG1CQUFBLEtBQUssRUFBTyxDQUFDLEVBQUU7WUFDeEQsT0FBTyxDQUFDLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO1lBQzFDLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxXQUFXLEdBQUcsV0FBVyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUUzRSx5Q0FBeUM7UUFDekMsSUFBSSxXQUFXLElBQUksU0FBUyxFQUFFO1lBQzVCLE9BQU8sQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztZQUMzQyxPQUFPLEVBQUUsQ0FBQztTQUNYOztjQUVLLElBQUksR0FBYyxJQUFJLENBQUMsV0FBVyxDQUFDLHdCQUF3QixDQUMvRCxXQUFXLENBQ1o7O2NBRUssY0FBYyxHQUNsQixDQUFDLElBQUksQ0FBQyxtQkFBbUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUM7WUFDcEUsTUFBTTs7Y0FDRixjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxHQUFHOztjQUUzQyxlQUFlLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQ3pELEtBQUssRUFDTCxJQUFJLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUNoQyxJQUFJLElBQUksSUFBSSxDQUFDLGlCQUFpQixFQUM5QixJQUFJLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUM5Qjs7Y0FFSyxrQkFBa0IsR0FDdEIsY0FBYyxLQUFLLE1BQU07WUFDdkIsQ0FBQyxDQUFDLEdBQUcsY0FBYyxHQUFHLGVBQWUsRUFBRTtZQUN2QyxDQUFDLENBQUMsR0FBRyxlQUFlLEdBQUcsY0FBYyxFQUFFO1FBRTNDLE9BQU8sT0FBTyxHQUFHLGtCQUFrQixDQUFDO0lBQ3RDLENBQUM7OztZQXZERixJQUFJLFNBQUM7Z0JBQ0osSUFBSSxFQUFFLGFBQWE7Z0JBQ25CLElBQUksRUFBRSxJQUFJO2FBQ1g7Ozs7WUFOUSxnQkFBZ0I7WUFDaEIsa0JBQWtCOzRDQWN0QixNQUFNLFNBQUMsV0FBVzs7OztJQUxyQixpQ0FBbUI7Ozs7O0lBR2pCLG9DQUFtQzs7Ozs7SUFDbkMsc0NBQXVDOzs7OztJQUN2QyxxQ0FBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBJbmplY3QsIFBpcGUsIFBMQVRGT1JNX0lELCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IElMYW5ndWFnZSB9IGZyb20gJy4vLi4vaW50ZXJmYWNlcy9sYW5ndWFnZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgRm9ybWF0dGVyU2VydmljZSB9IGZyb20gJy4vLi4vc2VydmljZXMvZm9ybWF0dGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy90cmFuc2xhdGlvbi5zZXJ2aWNlJztcblxuQFBpcGUoe1xuICBuYW1lOiAnY214Q3VycmVuY3knLFxuICBwdXJlOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIENteEN1cnJlbmN5UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAvLyBGSVhNRTogSSBzaG91bGQgYmUgaW5qZWN0aW5nIHRoZSB3aW5kb3cgb2JqZWN0IGJ1dCB0aGF0IHdpbGwgYnJlYWsgdGhlIGltcGxlbWVudGF0aW9uLiBJIHdpbGwgbm90IGRvIHRoYXQganVzdCB5ZXQuXG4gIC8vIE1ha2luZyB0aGlzIHB1YmxpYyBzbyBJIGNhbiBhY2Nlc3MgaXQgaW4gdGhlIHRlc3RcbiAgcHVibGljIHdpbmRvdzogYW55O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZm9ybWF0dGVyOiBGb3JtYXR0ZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgdHJhbnNsYXRpb246IFRyYW5zbGF0aW9uU2VydmljZSxcbiAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwcml2YXRlIHBsYXRmb3JtSWQ6IGFueVxuICApIHtcbiAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgIHRoaXMud2luZG93ID0gd2luZG93O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2Zvcm0odmFsdWU6IGFueSwgY291bnRyeUNvZGU/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICh2YWx1ZSA9PT0gJycgfHwgdmFsdWUgPT0gbnVsbCB8fCBpc05hTih2YWx1ZSBhcyBhbnkpKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1RoZSB2YWx1ZSBpcyBub3QgYSBudW1iZXInKTtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICBjb3VudHJ5Q29kZSA9IGNvdW50cnlDb2RlIHx8IHRoaXMud2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ2NvdW50cnknKTtcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp0cmlwbGUtZXF1YWxzXG4gICAgaWYgKGNvdW50cnlDb2RlID09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc29sZS53YXJuKGBDYW4ndCByZXRyaWV2ZSBjb3VudHJ5Q29kZWApO1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGNvbnN0IGxhbmc6IElMYW5ndWFnZSA9IHRoaXMudHJhbnNsYXRpb24uZ2V0TGFuZ3VhZ2VCeUNvdW50cnlDb2RlKFxuICAgICAgY291bnRyeUNvZGVcbiAgICApO1xuXG4gICAgY29uc3Qgc3ltYm9sUG9zaXRpb24gPVxuICAgICAgKGxhbmcuY3VycmVuY3lTeW1ib2xGbG9hdCAmJiBsYW5nLmN1cnJlbmN5U3ltYm9sRmxvYXQudG9Mb3dlckNhc2UoKSkgfHxcbiAgICAgICdsZWZ0JztcbiAgICBjb25zdCBjdXJyZW5jeVN5bWJvbCA9IGxhbmcuY3VycmVuY3lTeW1ib2wgfHwgJyQnO1xuXG4gICAgY29uc3QgZm9ybWF0dGVkTnVtYmVyOiBzdHJpbmcgPSB0aGlzLmZvcm1hdHRlci5mb3JtYXROdW1iZXIoXG4gICAgICB2YWx1ZSxcbiAgICAgIGxhbmcgJiYgbGFuZy5kZWNpbWFsTnVtYmVyc01vbmV5LFxuICAgICAgbGFuZyAmJiBsYW5nLnRob3VzYW5kU2VwYXJhdG9yLFxuICAgICAgbGFuZyAmJiBsYW5nLmRlY2ltYWxTZXBhcmF0b3JcbiAgICApO1xuXG4gICAgY29uc3QgbnVtYmVyV2l0aEN1cnJlbmN5ID1cbiAgICAgIHN5bWJvbFBvc2l0aW9uID09PSAnbGVmdCdcbiAgICAgICAgPyBgJHtjdXJyZW5jeVN5bWJvbH0ke2Zvcm1hdHRlZE51bWJlcn1gXG4gICAgICAgIDogYCR7Zm9ybWF0dGVkTnVtYmVyfSR7Y3VycmVuY3lTeW1ib2x9YDtcblxuICAgIHJldHVybiAnJmxybTsnICsgbnVtYmVyV2l0aEN1cnJlbmN5O1xuICB9XG59XG4iXX0=