/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * From https://github.com/shrpne/from-exponential
 * Can't install the package beacause it is ES6, UglifyJS on its version compatible with Webpack 3 can't do ES6
 * The code needs to be copied locally so Typescript could compile it to ES5
 * or just upgrade to Webpack 4 and use the webpack-uglify-plugin
 */
/**
 * Return two parts array of exponential number
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export function getExponentialParts(num) {
    return Array.isArray(num) ? num : String(num).split(/[eE]/);
}
/**
 *
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export function isExponential(num) {
    /** @type {?} */
    const eParts = getExponentialParts(num);
    return !Number.isNaN(Number(eParts[1]));
}
/**
 * Converts exponential notation to a human readable string
 * @param {?} num - number or array of its parts
 * @return {?}
 */
export default function fromExponential(num) {
    /** @type {?} */
    const eParts = getExponentialParts(num);
    if (!isExponential(eParts)) {
        return eParts[0];
    }
    /** @type {?} */
    const sign = eParts[0][0] === '-' ? '-' : '';
    /** @type {?} */
    const digits = eParts[0].replace(/^-/, '');
    /** @type {?} */
    const digitsParts = digits.split('.');
    /** @type {?} */
    const wholeDigits = digitsParts[0];
    /** @type {?} */
    const fractionDigits = digitsParts[1] || '';
    /** @type {?} */
    let e = Number(eParts[1]);
    if (e === 0) {
        return `${sign + wholeDigits}.${fractionDigits}`;
    }
    else if (e < 0) {
        // move dot to the left
        /** @type {?} */
        const countWholeAfterTransform = wholeDigits.length + e;
        if (countWholeAfterTransform > 0) {
            // transform whole to fraction
            /** @type {?} */
            const wholeDigitsAfterTransform = wholeDigits.substr(0, countWholeAfterTransform);
            /** @type {?} */
            const wholeDigitsTransformedToFracton = wholeDigits.substr(countWholeAfterTransform);
            return `${sign +
                wholeDigitsAfterTransform}.${wholeDigitsTransformedToFracton}${fractionDigits}`;
        }
        else {
            // not enough whole digits: prepend with fractional zeros
            // first e goes to dotted zero
            /** @type {?} */
            let zeros = '0.';
            e += 1;
            while (e) {
                zeros += '0';
                e += 1;
            }
            return sign + zeros + wholeDigits + fractionDigits;
        }
    }
    else {
        // move dot to the right
        /** @type {?} */
        const countFractionAfterTransform = fractionDigits.length - e;
        if (countFractionAfterTransform > 0) {
            // transform fraction to whole
            // countTransformedFractionToWhole = e
            /** @type {?} */
            const fractionDigitsAfterTransform = fractionDigits.substr(e);
            /** @type {?} */
            const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);
            return `${sign +
                wholeDigits +
                fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;
        }
        else {
            // not enough fractions: append whole zeros
            /** @type {?} */
            let zerosCount = -countFractionAfterTransform;
            /** @type {?} */
            let zeros = '';
            while (zerosCount) {
                zeros += '0';
                zerosCount -= 1;
            }
            return sign + wholeDigits + fractionDigits + zeros;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbUV4cG9uZW50aWFsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4LWNvcmUvYW5ndWxhci1sb2NhbGl6YXRpb24tdjcvIiwic291cmNlcyI6WyJsaWIvZnJvbUV4cG9uZW50aWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQVdBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFHO0lBQ3JDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlELENBQUM7Ozs7OztBQU1ELE1BQU0sVUFBVSxhQUFhLENBQUMsR0FBRzs7VUFDekIsTUFBTSxHQUFHLG1CQUFtQixDQUFDLEdBQUcsQ0FBQztJQUN2QyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDOzs7Ozs7QUFNRCxNQUFNLENBQUMsT0FBTyxVQUFVLGVBQWUsQ0FBQyxHQUFHOztVQUNuQyxNQUFNLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxDQUFDO0lBQ3ZDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDMUIsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbEI7O1VBRUssSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRTs7VUFDdEMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQzs7VUFDcEMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztVQUMvQixXQUFXLEdBQUcsV0FBVyxDQUFDLENBQUMsQ0FBQzs7VUFDNUIsY0FBYyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFOztRQUN2QyxDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV6QixJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDWCxPQUFPLEdBQUcsSUFBSSxHQUFHLFdBQVcsSUFBSSxjQUFjLEVBQUUsQ0FBQztLQUNsRDtTQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTs7O2NBRVYsd0JBQXdCLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQ3ZELElBQUksd0JBQXdCLEdBQUcsQ0FBQyxFQUFFOzs7a0JBRTFCLHlCQUF5QixHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQ2xELENBQUMsRUFDRCx3QkFBd0IsQ0FDekI7O2tCQUNLLCtCQUErQixHQUFHLFdBQVcsQ0FBQyxNQUFNLENBQ3hELHdCQUF3QixDQUN6QjtZQUNELE9BQU8sR0FBRyxJQUFJO2dCQUNaLHlCQUF5QixJQUFJLCtCQUErQixHQUFHLGNBQWMsRUFBRSxDQUFDO1NBQ25GO2FBQU07Ozs7Z0JBSUQsS0FBSyxHQUFHLElBQUk7WUFDaEIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNQLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLEtBQUssSUFBSSxHQUFHLENBQUM7Z0JBQ2IsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNSO1lBQ0QsT0FBTyxJQUFJLEdBQUcsS0FBSyxHQUFHLFdBQVcsR0FBRyxjQUFjLENBQUM7U0FDcEQ7S0FDRjtTQUFNOzs7Y0FFQywyQkFBMkIsR0FBRyxjQUFjLENBQUMsTUFBTSxHQUFHLENBQUM7UUFDN0QsSUFBSSwyQkFBMkIsR0FBRyxDQUFDLEVBQUU7Ozs7a0JBRzdCLDRCQUE0QixHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDOztrQkFDdkQsZ0NBQWdDLEdBQUcsY0FBYyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3BFLE9BQU8sR0FBRyxJQUFJO2dCQUNaLFdBQVc7Z0JBQ1gsZ0NBQWdDLElBQUksNEJBQTRCLEVBQUUsQ0FBQztTQUN0RTthQUFNOzs7Z0JBRUQsVUFBVSxHQUFHLENBQUMsMkJBQTJCOztnQkFDekMsS0FBSyxHQUFHLEVBQUU7WUFDZCxPQUFPLFVBQVUsRUFBRTtnQkFDakIsS0FBSyxJQUFJLEdBQUcsQ0FBQztnQkFDYixVQUFVLElBQUksQ0FBQyxDQUFDO2FBQ2pCO1lBQ0QsT0FBTyxJQUFJLEdBQUcsV0FBVyxHQUFHLGNBQWMsR0FBRyxLQUFLLENBQUM7U0FDcEQ7S0FDRjtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL3NocnBuZS9mcm9tLWV4cG9uZW50aWFsXG4gKiBDYW4ndCBpbnN0YWxsIHRoZSBwYWNrYWdlIGJlYWNhdXNlIGl0IGlzIEVTNiwgVWdsaWZ5SlMgb24gaXRzIHZlcnNpb24gY29tcGF0aWJsZSB3aXRoIFdlYnBhY2sgMyBjYW4ndCBkbyBFUzZcbiAqIFRoZSBjb2RlIG5lZWRzIHRvIGJlIGNvcGllZCBsb2NhbGx5IHNvIFR5cGVzY3JpcHQgY291bGQgY29tcGlsZSBpdCB0byBFUzVcbiAqIG9yIGp1c3QgdXBncmFkZSB0byBXZWJwYWNrIDQgYW5kIHVzZSB0aGUgd2VicGFjay11Z2xpZnktcGx1Z2luXG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gdHdvIHBhcnRzIGFycmF5IG9mIGV4cG9uZW50aWFsIG51bWJlclxuICogQHBhcmFtIG51bSAtIG51bWJlciBvciBhcnJheSBvZiBpdHMgcGFydHNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEV4cG9uZW50aWFsUGFydHMobnVtKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG51bSkgPyBudW0gOiBTdHJpbmcobnVtKS5zcGxpdCgvW2VFXS8pO1xufVxuXG4vKipcbiAqXG4gKiBAcGFyYW0gbnVtIC0gbnVtYmVyIG9yIGFycmF5IG9mIGl0cyBwYXJ0c1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNFeHBvbmVudGlhbChudW0pIHtcbiAgY29uc3QgZVBhcnRzID0gZ2V0RXhwb25lbnRpYWxQYXJ0cyhudW0pO1xuICByZXR1cm4gIU51bWJlci5pc05hTihOdW1iZXIoZVBhcnRzWzFdKSk7XG59XG5cbi8qKlxuICogQ29udmVydHMgZXhwb25lbnRpYWwgbm90YXRpb24gdG8gYSBodW1hbiByZWFkYWJsZSBzdHJpbmdcbiAqIEBwYXJhbSBudW0gLSBudW1iZXIgb3IgYXJyYXkgb2YgaXRzIHBhcnRzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21FeHBvbmVudGlhbChudW0pIHtcbiAgY29uc3QgZVBhcnRzID0gZ2V0RXhwb25lbnRpYWxQYXJ0cyhudW0pO1xuICBpZiAoIWlzRXhwb25lbnRpYWwoZVBhcnRzKSkge1xuICAgIHJldHVybiBlUGFydHNbMF07XG4gIH1cblxuICBjb25zdCBzaWduID0gZVBhcnRzWzBdWzBdID09PSAnLScgPyAnLScgOiAnJztcbiAgY29uc3QgZGlnaXRzID0gZVBhcnRzWzBdLnJlcGxhY2UoL14tLywgJycpO1xuICBjb25zdCBkaWdpdHNQYXJ0cyA9IGRpZ2l0cy5zcGxpdCgnLicpO1xuICBjb25zdCB3aG9sZURpZ2l0cyA9IGRpZ2l0c1BhcnRzWzBdO1xuICBjb25zdCBmcmFjdGlvbkRpZ2l0cyA9IGRpZ2l0c1BhcnRzWzFdIHx8ICcnO1xuICBsZXQgZSA9IE51bWJlcihlUGFydHNbMV0pO1xuXG4gIGlmIChlID09PSAwKSB7XG4gICAgcmV0dXJuIGAke3NpZ24gKyB3aG9sZURpZ2l0c30uJHtmcmFjdGlvbkRpZ2l0c31gO1xuICB9IGVsc2UgaWYgKGUgPCAwKSB7XG4gICAgLy8gbW92ZSBkb3QgdG8gdGhlIGxlZnRcbiAgICBjb25zdCBjb3VudFdob2xlQWZ0ZXJUcmFuc2Zvcm0gPSB3aG9sZURpZ2l0cy5sZW5ndGggKyBlO1xuICAgIGlmIChjb3VudFdob2xlQWZ0ZXJUcmFuc2Zvcm0gPiAwKSB7XG4gICAgICAvLyB0cmFuc2Zvcm0gd2hvbGUgdG8gZnJhY3Rpb25cbiAgICAgIGNvbnN0IHdob2xlRGlnaXRzQWZ0ZXJUcmFuc2Zvcm0gPSB3aG9sZURpZ2l0cy5zdWJzdHIoXG4gICAgICAgIDAsXG4gICAgICAgIGNvdW50V2hvbGVBZnRlclRyYW5zZm9ybVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHdob2xlRGlnaXRzVHJhbnNmb3JtZWRUb0ZyYWN0b24gPSB3aG9sZURpZ2l0cy5zdWJzdHIoXG4gICAgICAgIGNvdW50V2hvbGVBZnRlclRyYW5zZm9ybVxuICAgICAgKTtcbiAgICAgIHJldHVybiBgJHtzaWduICtcbiAgICAgICAgd2hvbGVEaWdpdHNBZnRlclRyYW5zZm9ybX0uJHt3aG9sZURpZ2l0c1RyYW5zZm9ybWVkVG9GcmFjdG9ufSR7ZnJhY3Rpb25EaWdpdHN9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm90IGVub3VnaCB3aG9sZSBkaWdpdHM6IHByZXBlbmQgd2l0aCBmcmFjdGlvbmFsIHplcm9zXG5cbiAgICAgIC8vIGZpcnN0IGUgZ29lcyB0byBkb3R0ZWQgemVyb1xuICAgICAgbGV0IHplcm9zID0gJzAuJztcbiAgICAgIGUgKz0gMTtcbiAgICAgIHdoaWxlIChlKSB7XG4gICAgICAgIHplcm9zICs9ICcwJztcbiAgICAgICAgZSArPSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNpZ24gKyB6ZXJvcyArIHdob2xlRGlnaXRzICsgZnJhY3Rpb25EaWdpdHM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIG1vdmUgZG90IHRvIHRoZSByaWdodFxuICAgIGNvbnN0IGNvdW50RnJhY3Rpb25BZnRlclRyYW5zZm9ybSA9IGZyYWN0aW9uRGlnaXRzLmxlbmd0aCAtIGU7XG4gICAgaWYgKGNvdW50RnJhY3Rpb25BZnRlclRyYW5zZm9ybSA+IDApIHtcbiAgICAgIC8vIHRyYW5zZm9ybSBmcmFjdGlvbiB0byB3aG9sZVxuICAgICAgLy8gY291bnRUcmFuc2Zvcm1lZEZyYWN0aW9uVG9XaG9sZSA9IGVcbiAgICAgIGNvbnN0IGZyYWN0aW9uRGlnaXRzQWZ0ZXJUcmFuc2Zvcm0gPSBmcmFjdGlvbkRpZ2l0cy5zdWJzdHIoZSk7XG4gICAgICBjb25zdCBmcmFjdGlvbkRpZ2l0c1RyYW5zZm9ybWVkVG9XaG9sZSA9IGZyYWN0aW9uRGlnaXRzLnN1YnN0cigwLCBlKTtcbiAgICAgIHJldHVybiBgJHtzaWduICtcbiAgICAgICAgd2hvbGVEaWdpdHMgK1xuICAgICAgICBmcmFjdGlvbkRpZ2l0c1RyYW5zZm9ybWVkVG9XaG9sZX0uJHtmcmFjdGlvbkRpZ2l0c0FmdGVyVHJhbnNmb3JtfWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIG5vdCBlbm91Z2ggZnJhY3Rpb25zOiBhcHBlbmQgd2hvbGUgemVyb3NcbiAgICAgIGxldCB6ZXJvc0NvdW50ID0gLWNvdW50RnJhY3Rpb25BZnRlclRyYW5zZm9ybTtcbiAgICAgIGxldCB6ZXJvcyA9ICcnO1xuICAgICAgd2hpbGUgKHplcm9zQ291bnQpIHtcbiAgICAgICAgemVyb3MgKz0gJzAnO1xuICAgICAgICB6ZXJvc0NvdW50IC09IDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2lnbiArIHdob2xlRGlnaXRzICsgZnJhY3Rpb25EaWdpdHMgKyB6ZXJvcztcbiAgICB9XG4gIH1cbn1cbiJdfQ==