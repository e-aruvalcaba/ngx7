{"version":3,"sources":["ng://@cemex-core/angular-localization-v7/lib/services/translation.service.ts","node_modules/tslib/tslib.es6.js","ng://@cemex-core/angular-localization-v7/lib/fromExponential.ts","ng://@cemex-core/angular-localization-v7/lib/services/formatter.service.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-currency-custom.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-currency.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/services/date-formatter.service.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-date-time-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-number.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/pipes/cmx-time-moment.pipe.ts","ng://@cemex-core/angular-localization-v7/lib/angular-localization.module.ts","ng://@cemex-core/angular-localization-v7/lib/services/direction.service.ts","ng://@cemex-core/angular-localization-v7/lib/services/locale.service.ts","ng://@cemex-core/angular-localization-v7/lib/resolvers/translation.resolver.ts"],"names":["TranslationService","prototype","getTranslations","$lang","endpoint","this","productPath","httpClient","get","getLanguages","languagesSubject","asObservable","getSelectedLanguage","selectedLanguageSubject","pt","$textId","textValue","translations","undefined","getLabel","getLanguage","$languageISO","console","warn","getDefaultLanguage","langValue","languages","find","language","languageISO","countryCode","toLowerCase","includes","momentConfig","getMomentConfig","getLanguageByCountryCode","$countryCode","countryLan","filter","$language","length","languageCode_1","sessionStorage","getItem","setLanguage","_this","selectedLanguage","_b","__values","o","m","Symbol","iterator","i","call","next","value","done","tslib_1.__values","_c","lang","isSelected","dir","textFloat","rtl","subscribe","populateTranslation","$result","localStorage","setItem","languageLoaded","Object","defineProperty","currentLanguage","defaultLangValue","defaultLanguageISO","getLanguagesByCountryCode","months","monthNames","split","monthsShort","shortDayMonths","weekdays","dayNames","weekdaysMin","shortDayNames2","weekdaysShort","shortDayNames","TRANSLATION_PRODUCT_PATH","TRANSLATION_LANGUAGES","DEFAULT_LANGUAGE_ISO","Injectable","HttpClient","Inject","args","type","Optional","loadedLanguages","ReplaySubject","localStorageLanguage","keys","getExponentialParts","num","Array","isArray","String","fromExponential","eParts","isExponential","Number","isNaN","sign","digitsParts","replace","wholeDigits","fractionDigits","e","countWholeAfterTransform","substr","zeros","countFractionAfterTransform","fractionDigitsAfterTransform","zerosCount","moment","moment_","ConvertToLocal","NoConvertToLocal","FormatterService","getDateObject","date","bits","month","parseInt","Date","$exception","formatDateTimeMoment","format","action","DateTimeActions","updateLocale","locale","utcToLocal","formatNumberTS","numberEntry","decimalNumbers","round","toFixed","toLocaleString","minimumFractionDigits","dateEntry","utc","local","localToUtc","timeToMinutes","time","timeSplit","hours","minutes","seconds","roundToDown","formatNumber","numberDecimals","thousandSeparator","decimalSeparator","toString","completeNumber","absoluteValue","truncatedDecimalValue","slice","integerPart","floatingPart","rightPad","formattedInteger","c","a","decimals","Math","floor","removeFirstZeros","pad","text","wildcard","result","repeat","str","formatMeasureUnit","measureUnit","CmxCurrencyCustomPipe","transform","$value","$currencySymbol","$decimalNumbers","$thousandSeparator","$decimalSeparator","$floatCurrencySymbolRight","v","parseFloat","$aux","formatter","error","Pipe","name","pure","CmxCurrencyPipe","window","translation","symbolPosition","currencySymbolFloat","currencySymbol","formattedNumber","decimalNumbersMoney","PLATFORM_ID","platformId","isPlatformBrowser","CmxDateMomentPipe","dateTime","formatterService","translationService","formatDate","DateFormatterService","$format","$daysNames","$monthsNames","day","year","dateAsString","$separator","$formats","forEach","$formatItem","$index","$auxValue","$formatCode","getDay","getMonth","getYear","addZero","$number","$date","substring","getDate","getFullYear","CmxDatePipe","dateFormatter","$currentLanguage","daysNames","monthsNames","CmxDateTimeMomentPipe","formatTime","CmxNumberPipe","CmxTimeMomentPipe","AngularLocalizationModule","NgModule","declarations","exports","imports","CommonModule","DirectionService","getDirection","direction$","getRTL","rtl$","getDirectionFor","languageCode","getRtlFor","Subject","direction","LocaleService","getConfiguration","hourShort","minuteShort","secondShort","TranslationResolver","resolve","route","state"],"mappings":"+iBAsESA,EAAAC,UAAAC,gBAAP,SAAuBC,OACfC,EAAW,wBAAwBC,KAAKC,YAAW,IAAIH,EAC7D,OAAOE,KAAKE,WAAWC,IAASJ,IAM3BJ,EAAAC,UAAAQ,aAAP,WACE,OAAOJ,KAAKK,iBAAiBC,gBAGxBX,EAAAC,UAAAW,oBAAP,WACE,OAAOP,KAAKQ,wBAAwBF,gBAO/BX,EAAAC,UAAAa,GAAP,SAAUC,OACFC,EAAYhB,EAAmBiB,aAAaF,GAClD,OAAKC,GAAaA,IAAcE,UAGzBF,EAFE,OAASD,GASbf,EAAAC,UAAAkB,SAAP,SAAgBJ,OACRC,EAAYhB,EAAmBiB,aAAaF,GAClD,OAAKC,GAAaA,IAAcE,UAGzBF,EAFE,OAASD,GASbf,EAAAC,UAAAmB,YAAP,SAAmBC,GACjB,GAAIA,IAAiBH,WAA8B,OAAjBG,EAsBhC,OADAC,QAAQC,KAAK,oCACNlB,KAAKmB,yBArBRC,OAAS,EAkBb,OAhBAA,EAAYzB,EAAmB0B,UAAUC,KAAI,SAACC,GAC5C,OACEA,EAASC,cAAgBR,GACzBO,EAASE,YAAYC,gBAAkBV,EAAaU,eACpDH,EAASC,YAAYG,SAASX,QAKhBH,YAChBI,QAAQC,KAAK,8BAA+BF,GAC5CI,EAAYpB,KAAKmB,sBAGnBC,EAAUQ,aAAe5B,KAAK6B,gBAAgBT,GAEvCA,GAWJzB,EAAAC,UAAAkC,yBAAP,SAAgCC,GAC9B,GAAIA,IAAiBlB,WAA8B,OAAjBkB,EAiChC,OADAd,QAAQC,KAAK,oCACNlB,KAAKmB,yBAhCRC,OAAS,EACPY,EAA0BrC,EAAmB0B,UAAUY,OAAM,SACjEC,GACE,OACEA,EAAUT,YAAYC,gBAAkBK,EAAaL,gBAK3D,GAAwB,EAApBM,EAAWG,OAAY,KACnBC,EAAeC,eAAeC,QAAQ,YAC5ClB,EAAYY,EAAWV,KAAI,SAACY,GAC1B,OACEA,EAAUV,YAAYE,gBAAkBU,EAAaV,qBAIzDN,EACEY,GAAkC,EAApBA,EAAWG,OAAaH,EAAW,GAAKnB,UAW1D,OAPIO,IAAcP,YAChBI,QAAQC,KAAK,8BAA+Ba,GAC5CX,EAAYpB,KAAKmB,sBAGnBC,EAAUQ,aAAe5B,KAAK6B,gBAAgBT,GAEvCA,GAWJzB,EAAAC,UAAA2C,YAAP,SAAmBvB,GAAnB,QAAAwB,EAAAxC,KACEA,KAAKyC,iBAAmBzC,KAAKe,YAAYC,OAEzC,IAAmB,IAAA0B,EChLvB,SA8FgBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAET,SAAQS,OAAI,GACrB,CAAEO,MAAOP,GAAKA,EAAEI,KAAMI,MAAOR,KD4EzBS,CAAA1D,EAAmB0B,WAASiC,EAAAZ,EAAAQ,QAAAI,EAAAF,KAAAE,EAAAZ,EAAAQ,OAAE,CAA5C,IAAMK,EAAID,EAAAH,MACbI,EAAKC,WAAaD,EAAK/B,cAAgBxB,KAAKyC,iBAAiBjB,YAC7D+B,EAAKE,IAAyB,UAAnBF,EAAKG,UAAwB,MAAQ,MAChDH,EAAKI,IAAmB,QAAbJ,EAAKE,yGAGlBzD,KAAKH,gBAAgBG,KAAKyC,iBAAiBjB,aAAaoC,UAAS,SAC/DhD,GAAgB,OAAA4B,EAAKqB,oBAAoBjD,MAItCjB,EAAAC,UAAAiE,oBAAP,SAA2BC,GACzBnE,EAAmBiB,aAAekD,EAGlCC,aAAaC,QAAQ,WAAYhE,KAAKyC,iBAAiBjB,aACvDa,eAAe2B,QAAQ,WAAYhE,KAAKyC,iBAAiBjB,aACzDxB,KAAKiE,eAAef,MAAK,GAEzBlD,KAAKQ,wBAAwB0C,KAAKlD,KAAKyC,kBACvCzC,KAAKK,iBAAiB6C,KAAKvD,EAAmB0B,YAGhD6C,OAAAC,eAAWxE,EAAAC,UAAA,mBAAgB,KAA3B,WACE,OAAOD,EAAmByE,qBAG5B,SAA4B7C,GAC1B5B,EAAmByE,gBAAkB7C,mCAGhC5B,EAAAC,UAAAuB,mBAAP,WAAA,IACMkD,EADN7B,EAAAxC,KA2BE,OAxBAqE,EAAmB1E,EAAmB0B,UAAUC,KAAI,SAACC,GACnD,OACEA,EAASC,cAAgBgB,EAAK8B,oBAC9B/C,EAASE,YAAYC,gBACnBc,EAAK8B,mBAAmB5C,eAC1BH,EAASC,YAAYG,SAASa,EAAK8B,yBAIdzD,WACvBI,QAAQC,KACN,sCACAlB,KAAKsE,oBAGPD,EAAmB1E,EAAmB0B,UAAU,GAChDJ,QAAQC,KACN,gCACAmD,EAAiB7C,cAGnBP,QAAQC,KAAK,0BAA2BmD,EAAiB7C,aAGpD6C,GAGF1E,EAAAC,UAAA2E,0BAAP,SAAiC9C,GAK/B,OAJ2C9B,EAAmB0B,UAAUY,OAAM,SAC5EV,GACE,OAAAA,EAASE,YAAYC,gBAAkBD,EAAYC,iBAKjD/B,EAAAC,UAAAiC,gBAAR,SAAwBN,GACtB,MAAO,CACLiD,OAAQjD,EAASkD,WAAWC,MAAM,KAClCC,YAAapD,EAASqD,eAAeF,MAAM,KAC3CG,SAAUtD,EAASuD,SAASJ,MAAM,KAClCK,YAAaxD,EAASyD,eAAeN,MAAM,KAC3CO,cAAe1D,EAAS2D,cAAcR,MAAM,OA7PlC/E,EAAAwF,yBAA2B,2BAC3BxF,EAAAyF,sBAAwB,wBACxBzF,EAAA0F,qBAAuB,uBACvB1F,EAAAyE,gBAA6BvD,UAE5BlB,EAAAiB,aAAoB,GACpBjB,EAAA0B,UAAyB,uBARzCiE,EAAAA,sDATQC,EAAAA,2CA0BJC,EAAAA,OAAMC,KAAA,CAAC9F,EAAmBwF,2BAAwB,CAAAO,KAClDC,EAAAA,8CAEAH,EAAAA,OAAMC,KAAA,CAAC9F,EAAmByF,wBAAqB,CAAAM,KAC/CC,EAAAA,8CAEAH,EAAAA,OAAMC,KAAA,CAAC9F,EAAmB0F,uBAAoB,CAAAK,KAC9CC,EAAAA,cA0OLhG,GAnPE,SAAAA,EACUO,EAGAD,EAGA2F,EAGAtB,GAER,GAXQtE,KAAAE,WAAAA,EAGAF,KAAAC,YAAAA,EAGAD,KAAA4F,gBAAAA,EAGA5F,KAAAsE,mBAAAA,EAfHtE,KAAAiE,eAAiB,IAAI4B,EAAAA,cAAuB,GAC3C7F,KAAAQ,wBAA0B,IAAIqF,EAAAA,cAAyB,GACvD7F,KAAAK,iBAAmB,IAAIwF,EAAAA,cAA2B,IAenD7F,KAAK4F,gBAQR,OAPA3E,QAAQC,KACN,uEAEFD,QAAQC,KACN,0HAMCoD,GACHrD,QAAQC,KAAK,oDAGfvB,EAAmB0B,UAAYrB,KAAK4F,oBAC9BE,EAAuB,OAAgB/B,aAAazB,QACxD,YAIqB,IADP4B,OAAO6B,KAAKpG,EAAmBiB,cACnCuB,OACVnC,KAAKuC,YAAYuD,GAAwBxB,GAEzCtE,KAAKiE,eAAef,MAAK,GElD/B,SAAgB8C,EAAoBC,GAClC,OAAOC,MAAMC,QAAQF,GAAOA,EAAMG,OAAOH,GAAKvB,MAAM,QAgBtD,SAAwB2B,EAAgBJ,OAChCK,EAASN,EAAoBC,GACnC,IAXF,SAAgBM,EAAcN,OACtBK,EAASN,EAAoBC,GACnC,OAAQO,OAAOC,MAAMD,OAAOF,EAAO,KAS9BC,CAAcD,GACjB,OAAOA,EAAO,OAGVI,EAAwB,MAAjBJ,EAAO,GAAG,GAAa,IAAM,GAEpCK,EADSL,EAAO,GAAGM,QAAQ,KAAM,IACZlC,MAAM,KAC3BmC,EAAcF,EAAY,GAC1BG,EAAiBH,EAAY,IAAM,GACrCI,EAAIP,OAAOF,EAAO,IAEtB,GAAU,IAANS,EACF,OAAUL,EAAOG,EAAW,IAAIC,EAC3B,GAAIC,EAAI,EAAG,KAEVC,EAA2BH,EAAY1E,OAAS4E,EACtD,GAA+B,EAA3BC,EASF,OAAUN,EAPwBG,EAAYI,OAC5C,EACAD,GAMyB,IAJaH,EAAYI,OAClDD,GAG+DF,MAK7DI,EAAQ,KAEZ,IADAH,GAAK,EACEA,GACLG,GAAS,IACTH,GAAK,EAEP,OAAOL,EAAOQ,EAAQL,EAAcC,MAIhCK,EAA8BL,EAAe3E,OAAS4E,EAC5D,GAAkC,EAA9BI,EAAiC,KAG7BC,EAA+BN,EAAeG,OAAOF,GAE3D,OAAUL,EACRG,EAFuCC,EAAeG,OAAO,EAAGF,GAGhC,IAAIK,MAGlCC,GAAcF,EAElB,IADID,EAAQ,GACLG,GACLH,GAAS,IACTG,GAAc,EAEhB,OAAOX,EAAOG,EAAcC,EAAiBI,MClF7CI,EAASC,KAGbC,eAAA,EACAC,iBAAA,iFAGF,IAAAC,GAWSA,EAAA9H,UAAA+H,cAAP,SAAqBC,GACnB,QAEQC,EADUD,EAAKhB,QAAQ,KAAM,KACTlC,MAAM,MAC1BoD,EAAQC,SAASF,EAAK,GAAIhH,WAAa,EAC7C,OAAoB,IAAhBgH,EAAK1F,OACA,IAAI6F,KAAKH,EAAK,GAAIC,EAAOD,EAAK,IAE9B,IAAIG,KAAKH,EAAK,GAAIC,EAAOD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAElE,MAAOI,GACP,OAAOpH,YAIJ6G,EAAA9H,UAAAsI,qBAAP,SACEN,EACApG,EACA2G,EACAC,GASA,YATA,IAAAA,IAAAA,EAA0BC,EAAgBb,gBAEtC7H,EAAmByE,iBACrBkD,EAAOgB,aACL3I,EAAmByE,gBAAgB5C,YAAYyF,OAAO,EAAG,GACzDtH,EAAmByE,gBAAgBxC,cAInCwG,IAAWC,EAAgBZ,iBACtBH,EAAOM,GACXW,OAAO/G,EAAYyF,OAAO,EAAG,IAC7BkB,OAAOA,GAGLnI,KAAKwI,WAAWZ,GACpBW,OAAO/G,EAAYyF,OAAO,EAAG,IAC7BkB,OAAOA,IAWLT,EAAA9H,UAAA6I,eAAP,SAAsBC,EAAalH,EAAamH,GAC9C,OAAIlC,MAAMiC,IAAgC,OAAhBA,EACjB,EAGFlC,OACLxG,KAAK4I,MAAMF,EAAaC,GAAgBE,QAAQF,IAChDG,eAAetH,EAAc,aAAc,CAC3CuH,sBAAuBL,EAAc,GAAM,EAAI,EAAIC,KAIhDjB,EAAA9H,UAAA4I,WAAP,SAAkBQ,GAChB,OAAO1B,EAAO2B,IAAID,GAAWE,SAGxBxB,EAAA9H,UAAAuJ,WAAP,SAAkBvB,EAAMO,GACtB,OAAIA,IAAWtH,UACNyG,EAAOM,EAAM,yBACjBqB,MACAd,OAAOA,GAEHb,EAAOM,EAAM,yBACjBqB,MACAd,UAKAT,EAAA9H,UAAAwJ,cAAP,SAAqBC,OACbC,EAAYD,EAAK3E,MAAM,KAEvB6E,GAASD,EAAU,GACnBE,GAAWF,EAAU,GACrBG,GAAWH,EAAU,GAE3B,OAAe,GAARC,EAAaC,EAAUxJ,KAAK0J,YAAYD,EAAU,KAcpD/B,EAAA9H,UAAA+J,aAAP,SACExG,EACAyG,EACAC,EACAC,GAGA,GAAI3G,GAAStC,WAAiC,IAApBsC,EAAM4G,YAAoBtD,MAAK,GAEvD,OADAxF,QAAQC,KAAK,gCACN,GAIT0I,EAAiBA,GAAkB/I,UAAY+I,EAAiB,EAEhEC,EACEA,IAAsBhJ,UAAYgJ,EAAoB,IAExDC,EAAmBA,IAAqBjJ,UAAYiJ,EAAmB,QAEjEE,EAAyB3D,EAAgBlD,GAEzCuD,EAAevD,EAAQ,EAAI,IAAM,GACjC8G,EACJ9G,EAAQ,EAAI6G,EAAetF,MAAM,KAAK,GAAKsF,EACvCE,EACJD,EAAcvF,MAAM,KAAK,IACzBuF,EAAcvF,MAAM,KAAK,GAAGyF,MAAM,EAAGP,GAEjCQ,EAAsBH,EAAcvF,MAAM,KAAK,GAC/C2F,EAAuBrK,KAAKsK,SAChCJ,EACA,IACAN,GAGEW,EAA2BH,EAe/B,OAb2B,KAAvB5D,OAAO4D,KACTG,EAAmBH,EAAYxD,QAAQ,KAAI,SAAG4D,EAAGxH,EAAGyH,GAClD,OAAOzH,GAAKwH,IAAMV,IAAqBW,EAAEtI,OAASa,GAAK,GAAM,EACzD6G,EAAoBW,EACpBA,KAKmB9D,EAAO6D,GACV,EAAtBF,EAAalI,OAAa2H,EAAmB,IAC5CO,GAKE3C,EAAA9H,UAAAgJ,MAAP,SAAazF,EAAeuH,GAI1B,MAAsB,IADAvH,EAAQ,EAErBqD,OAAOmE,KAAS,MAAExH,EAAQ,IAAMuH,GAAY,KAAOA,GAEnDlE,OAAOrD,IAIXuE,EAAA9H,UAAA8J,YAAP,SAAmBvG,GACjB,OAAOwH,KAAKC,MAAMzH,IAIbuE,EAAA9H,UAAAiL,iBAAP,SAAwB1H,GACtB,OAAOA,EAAMyD,QAAQ,MAAO,KAGvBc,EAAA9H,UAAAkL,IAAP,SAAWC,EAAcC,EAAkB7I,GAEzC,QADI8I,EAASF,EACNE,EAAO9I,OAASA,GACrB8I,EAASD,EAAWC,EAEtB,OAAOA,GASFvD,EAAA9H,UAAA0K,SAAP,SACES,EACAC,EACA7I,GAEA,GAAI4I,IAASlK,WAAsB,OAATkK,GAA0B,KAATA,EACzC,OAAOC,EAASE,OAAO/I,GAGzB,QADIgJ,EAAMJ,EAAKhB,WACRoB,EAAIhJ,OAASA,GAClBgJ,GAAOH,EAGT,OAAOG,GAGFzD,EAAA9H,UAAAwL,kBAAP,SAAyBC,GACvB,OAAQA,GACN,IAAK,MACH,MAAO,MACT,IAAK,KACH,MAAO,KACT,QACE,OAAOA,wBA3Nd/F,EAAAA,mDA8NDoC,GA5NE,SAAAA,KCfF,IAAA4D,GAaSA,EAAA1L,UAAA2L,UAAP,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IACE,GAAIL,IAAW3K,YAA+B,IAAlB4F,MAAM+E,GAGhC,GAFAxL,KAAKmD,MAAQqI,EAAOzB,WACpB2B,EAAkB3D,SAAS2D,EAAgB3B,WAAYlJ,WACnD2K,EAAS,EAAG,KAERM,EAAIC,WAAWP,EAAOzB,WAAWnD,QAAQ,MAAO,KAChDoF,EAAehM,KAAKiM,UAAUtC,aAClCmC,EACAJ,EACAC,EACAC,GAGA5L,KAAKmD,MADH0I,EACW,IAAMG,EAAOP,EAEb,IAAMA,EAAkBO,OAGvChM,KAAKmD,MACHsI,EACAzL,KAAKiM,UAAUtC,aACb6B,EACAE,EACAC,EACAC,QAIN5L,KAAKmD,MAAQ,GAEf,MAAO8E,GACPhH,QAAQiL,MAAM,8BAA+BV,GAC7CvK,QAAQiL,MAAMjE,GACdjI,KAAKmD,MAAQ,GAEf,OAAOnD,KAAKmD,2BArDfgJ,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,oBACNC,MAAM,+CAJC3E,KAyDT4D,GAhDE,SAAAA,EAAoBW,GAAAjM,KAAAiM,UAAAA,EAFZjM,KAAAmD,MAAQ,GCTlB,IAAAmJ,GA0BSA,EAAA1M,UAAA2L,UAAP,SAAiBpI,EAAY1B,GAC3B,GAAc,KAAV0B,GAAyB,MAATA,GAAiBsD,MAAK,GAExC,OADAxF,QAAQC,KAAK,6BACN,GAMT,IAHAO,EAAcA,GAAezB,KAAKuM,OAAOlK,eAAeC,QAAQ,aAG7CzB,UAEjB,OADAI,QAAQC,KAAK,8BACN,OAGHqC,EAAkBvD,KAAKwM,YAAY1K,yBACvCL,GAGIgL,EACHlJ,EAAKmJ,qBAAuBnJ,EAAKmJ,oBAAoBhL,eACtD,OACIiL,EAAiBpJ,EAAKoJ,gBAAkB,IAExCC,EAA0B5M,KAAKiM,UAAUtC,aAC7CxG,EACAI,GAAQA,EAAKsJ,oBACbtJ,GAAQA,EAAKsG,kBACbtG,GAAQA,EAAKuG,kBAQf,MAAO,SAJc,SAAnB2C,EACI,GAAGE,EAAiBC,EACpB,GAAGA,EAAkBD,wBApD9BR,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,cACNC,MAAM,+CALC3E,SACA/H,qCAcJ6F,EAAAA,OAAMC,KAAA,CAACqH,EAAAA,kBA4CZR,GA/CE,SAAAA,EACUL,EACAO,EACqBO,GAFrB/M,KAAAiM,UAAAA,EACAjM,KAAAwM,YAAAA,EACqBxM,KAAA+M,WAAAA,EAEzBC,EAAAA,kBAAkBD,KACpB/M,KAAKuM,OAASA,QCtBpB,IAAAU,GAkBSA,EAAArN,UAAA2L,UAAP,SACE2B,EACA9E,GAEA,YAFA,IAAAA,IAAAA,EAA0BC,EAAgBb,gBAEnCxH,KAAKmN,iBAAiBjF,qBAC3BgF,EACAlN,KAAKoN,mBAAmB3K,iBAAiBjB,YAAYoF,QAAQ,IAAK,KAClE5G,KAAKoN,mBAAmB3K,iBAAiB4K,WACzCjF,wBAlBL+D,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,gBACNC,MAAM,+CAJC1M,SAHP+H,KA0BFuF,GAhBE,SAAAA,EACUG,EACAD,GADAnN,KAAAoN,mBAAAA,EACApN,KAAAmN,iBAAAA,ECfZ,IAAAG,GAgBSA,EAAA1N,UAAAuI,OAAP,SACEqD,EACA+B,EACAC,EACAC,GAJF,IAQMC,EACA5F,EACA6F,EAVNnL,EAAAxC,KAMM4N,EAAe,GACfC,EAAa,IAIbC,EAAWP,EAAQ7I,MAAMmJ,GAgC7B,OA/BwB,IAApBC,EAAS3L,SACX0L,EAAa,IACbC,EAAWP,EAAQ7I,MAAMmJ,IAEH,IAApBC,EAAS3L,SACX0L,EAAa,IACbC,EAAWP,EAAQ7I,MAAMmJ,IAEH,IAApBC,EAAS3L,SACX0L,EAAa,IACbC,EAAWP,EAAQ7I,MAAMmJ,IAE3BC,EAASC,QAAO,SAAEC,EAAaC,OACvBC,EAAiB1C,EACjB2C,EAAcH,EAAYpH,QAAQ,IAAK,IACzCoH,EAAYrM,SAAS,MAAQqM,EAAYrM,SAAS,MACpD+L,EAAMlL,EAAK4L,OAAOF,EAAWC,EAAaX,GAC1CQ,EAAcA,EAAYpH,QAAQuH,EAAaT,IACtCM,EAAYrM,SAAS,MAAQqM,EAAYrM,SAAS,MAC3DmG,EAAQtF,EAAK6L,SAASH,EAAWC,EAAaV,GAC9CO,EAAcA,EAAYpH,QAAQuH,EAAarG,KACtCkG,EAAYrM,SAAS,MAAQqM,EAAYrM,SAAS,QAC3DgM,EAAOnL,EAAK8L,QAAQJ,EAAWC,GAC/BH,EAAcA,EAAYpH,QAAQuH,EAAaR,IAE7CM,IAAWH,EAAS3L,OAAS,EAC/ByL,GAAgBI,EAAcH,EAE9BD,GAAgBI,IAGbJ,GAQFN,EAAA1N,UAAA+H,cAAP,SAAqBC,GACnB,QAEQC,EADUD,EAAKhB,QAAQ,KAAM,KACTlC,MAAM,MAC1BoD,EAAQC,SAASF,EAAK,GAAIhH,WAAa,EAC7C,OAAoB,IAAhBgH,EAAK1F,OACA,IAAI6F,KAAKH,EAAK,GAAIC,EAAOD,EAAK,IAE9B,IAAIG,KAAKH,EAAK,GAAIC,EAAOD,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAElE,MAAOI,GACP,OAAOpH,YAIHyM,EAAA1N,UAAA2O,QAAR,SAAgBC,GACd,OAAOA,EAAU,GAAK,IAAMA,EAAUA,EAAQzE,YAGxCuD,EAAA1N,UAAAwO,OAAR,SAAeK,EAAalB,EAAiBC,OACvCE,EAgBJ,OAfuB,IAAnBH,EAAQpL,OAEVuL,EAAMF,EAAWiB,EAAML,UACK,IAAnBb,EAAQpL,OAEjBuL,EAAMF,EAAWiB,EAAML,UAAUM,UAAU,EAAG,GAClB,IAAnBnB,EAAQpL,QAAmC,IAAnBoL,EAAQpL,SAEzCuL,EAAM1N,KAAKuO,QAAQE,EAAME,YAGvBpB,IAAYA,EAAQ7L,gBAEtBgM,EAAMA,EAAIhM,eAELgM,GAGDJ,EAAA1N,UAAAyO,SAAR,SACEI,EACAlB,EACAE,OAEI3F,EAgBJ,OAfuB,IAAnByF,EAAQpL,OAEV2F,EAAQ2F,EAAagB,EAAMJ,YACC,IAAnBd,EAAQpL,OAEjB2F,EAAQ2F,EAAagB,EAAMJ,YAAYK,UAAU,EAAG,GACxB,IAAnBnB,EAAQpL,SAEjB2F,EAAQ9H,KAAKuO,QAAQE,EAAMJ,WAAa,IAGtCd,IAAYA,EAAQ7L,gBAEtBoG,EAAQA,EAAMpG,eAEToG,GAGDwF,EAAA1N,UAAA0O,QAAR,SAAgBG,EAAalB,GAU3B,OARuB,IAAnBA,EAAQpL,OAEH,GAAKsM,EAAMG,eAGX,GAAKH,EAAMG,eACNF,UAAU,wBAxI3BpJ,EAAAA,mDA4IDgI,GA1IE,SAAAA,KCJF,IAAAuB,GAmBSA,EAAAjP,UAAA2L,UAAP,SACEC,EACAzJ,GAEA,IAUE,GATsB,iBAAXyJ,IACTA,EAAS,IAAIxD,KAAKwD,IAEE,iBAAXA,IACTA,EAASxL,KAAK8O,cAAcnH,cAAc6D,IAExCzJ,IAAiBlB,WAA8B,OAAjBkB,IAChCA,EAAeM,eAAeC,QAAQ,YAEpCkJ,IAAW3K,WAAa2K,aAAkBxD,KAAM,KAC5C+G,EAA2BhL,aAAazB,QAAQ,YAChDxC,EAAmBE,KAAKwM,YAAYzL,YACxCgO,GAAsC,SAExC/O,KAAKgP,UAAYlP,EAAMgF,SAASJ,MAAM,KACtC1E,KAAKiP,YAAcnP,EAAM2E,WAAWC,MAAM,KAC1C1E,KAAKmD,MAAQnD,KAAK8O,cAAc3G,OAC9BqD,EACA1L,EAAMuN,WACNrN,KAAKgP,UACLhP,KAAKiP,kBAGPhO,QAAQiL,MAAM,6BAA8BV,GAC5CxL,KAAKmD,MAAQ,GAEf,MAAO8E,GACPhH,QAAQiL,MAAM,6BAA8BV,GAC5CvK,QAAQiL,MAAMjE,GACdjI,KAAKmD,MAAQ,GAEf,OAAOnD,KAAKmD,2BAlDfgJ,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,UACNC,MAAM,+CAJC1M,SADA2N,KAuDTuB,GA3CE,SAAAA,EACUrC,EACAsC,GADA9O,KAAAwM,YAAAA,EACAxM,KAAA8O,cAAAA,EANF9O,KAAAmD,MAAQ,GACRnD,KAAAiP,YAAwB,GACxBjP,KAAAgP,UAAsB,GCZhC,IAAAE,GAkBSA,EAAAtP,UAAA2L,UAAP,SACE2B,EACA9E,GAEA,YAFA,IAAAA,IAAAA,EAA0BC,EAAgBb,gBAEnCxH,KAAKmN,iBAAiBjF,qBAC3BgF,EACAlN,KAAKoN,mBAAmB3K,iBAAiBjB,YAAYoF,QAAQ,IAAK,KAClE5G,KAAKoN,mBAAmB3K,iBAAiB4K,WACvC,IACArN,KAAKoN,mBAAmB3K,iBAAiB0M,WAC3C/G,wBApBL+D,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,oBACNC,MAAM,+CAJC1M,SAFP+H,KA2BFwH,GAlBE,SAAAA,EACU9B,EACAD,GADAnN,KAAAoN,mBAAAA,EACApN,KAAAmN,iBAAAA,ECfZ,IAAAiC,GAeSA,EAAAxP,UAAA2L,UAAP,SAAiB7C,GACf,OAAO1I,KAAKmN,iBAAiB1E,eAC3BC,EACA1I,KAAKoN,mBAAmB3K,iBAAiBjB,YAAYoF,QAAQ,IAAK,KAClE5G,KAAKoN,mBAAmB3K,iBAAiBkG,qCAd9CwD,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,YACNC,MAAM,+CAJC1M,SADA+H,KAoBT0H,GAZE,SAAAA,EACUhC,EACAD,GADAnN,KAAAoN,mBAAAA,EACApN,KAAAmN,iBAAAA,ECZZ,IAAAkC,GAkBSA,EAAAzP,UAAA2L,UAAP,SACE2B,EACA9E,GAEA,YAFA,IAAAA,IAAAA,EAA0BC,EAAgBb,gBAEnCxH,KAAKmN,iBAAiBjF,qBAC3BgF,EACAlN,KAAKoN,mBAAmB3K,iBAAiBjB,YAAYoF,QAAQ,IAAK,KAClE5G,KAAKoN,mBAAmB3K,iBAAiB0M,WACzC/G,wBAlBL+D,EAAAA,KAAI1G,KAAA,CAAC,CACJ2G,KAAM,gBACNC,MAAM,+CAJC1M,SAFP+H,KAyBF2H,GAhBE,SAAAA,EACUjC,EACAD,GADAnN,KAAAoN,mBAAAA,EACApN,KAAAmN,iBAAAA,ECfZ,IAAAmC,uBAWCC,EAAAA,SAAQ9J,KAAA,CAAC,CACR+J,aAAc,CACZlE,EACAgB,EACAW,EACA4B,EACAK,EACAE,EACAC,GAEFI,QAAS,CACPnE,EACAgB,EACAW,EACA4B,EACAK,EACAE,EACAC,GAEFK,QAAS,CAACC,EAAAA,kBAE4BL,GArBxC,SAAAA,KCXA,IAAAM,GAmBSA,EAAAhQ,UAAAiQ,aAAP,WACE,OAAO7P,KAAK8P,WAAWxP,gBAGlBsP,EAAAhQ,UAAAmQ,OAAP,WACE,OAAO/P,KAAKgQ,KAAK1P,gBAGZsP,EAAAhQ,UAAAqQ,gBAAP,SAAuBC,OACf3O,EAAWvB,KAAKwM,YAAYzL,YAChCmP,EAAaxL,MAAM,QAAQ,IAE7B1E,KAAK8P,WAAW5M,KAAK3B,EAASkC,MAGzBmM,EAAAhQ,UAAAuQ,UAAP,SAAiBD,OACT3O,EAAWvB,KAAKwM,YAAYzL,YAChCmP,EAAaxL,MAAM,QAAQ,IAE7B1E,KAAKgQ,KAAK9M,KAAK3B,EAASoC,0BA/B3B2B,EAAAA,sDAFQ3F,KAmCTiQ,GA5BE,SAAAA,EAAoBpD,GAApB,IAAAhK,EAAAxC,KAAoBA,KAAAwM,YAAAA,EAHZxM,KAAA8P,WAA8B,IAAIM,EAAAA,QAClCpQ,KAAAgQ,KAAyB,IAAII,EAAAA,QAGnCpQ,KAAKwM,YAAYjM,sBAAsBqD,UAAS,SAAErC,GAChDiB,EAAKsN,WAAW5M,KAAK3B,EAAS8O,WAC9B7N,EAAKwN,KAAK9M,KAAK3B,EAASoC,cCJrB2M,EAAA1Q,UAAA2Q,iBAAP,SAAwB/O,GACtB,OAAQA,GACN,IAAK,KACH,MAAO,CACLgP,UAAW,KACXC,YAAa,MACb9L,YAAa,kDACb+L,YAAa,MACb3L,YAAa,uBACbE,cAAe,+BAEnB,IAAK,KACH,MAAO,CACLuL,UAAW,KACXC,YAAa,MACb9L,YAAa,kDACb+L,YAAa,MACb3L,YAAa,uBACbE,cAAe,+BAEnB,IAAK,KACH,MAAO,CACLuL,UAAW,IACXC,YAAa,MACb9L,YAAa,yDACb+L,YAAa,MACb3L,YAAa,uBACbE,cAAe,+BAEnB,IAAK,KACH,MAAO,CACLuL,UAAW,OACXC,YAAa,OACb9L,YAAa,oDACb+L,YAAa,UACb3L,YAAa,uBACbE,cAAe,wBAEnB,IAAK,KACH,MAAO,CACLuL,UAAW,MACXC,YAAa,OACb9L,YACE,4DACF+L,YAAa,QACb3L,YAAa,gBACbE,cAAe,wBAEnB,IAAK,KACH,MAAO,CACLuL,UAAW,IACXC,YAAa,MACb9L,YAAa,kDACb+L,YAAa,IACb3L,YAAa,uBACbE,cAAe,4BAEnB,QACE,MAAO,CACLuL,UAAW,KACXC,YAAa,MACb9L,YAAa,kDACb+L,YAAa,MACb3L,YAAa,uBACbE,cAAe,qDAtExBK,EAAAA,mDA0EDgL,GAxEE,SAAAA,KCPF,IAAAK,GAeSA,EAAA/Q,UAAAgR,QAAP,SACEC,EACAC,GAEA,OAAO9Q,KAAKoN,mBAAmBnJ,oCARlCqB,EAAAA,sDAFQ3F,KAYTgR,GARE,SAAAA,EAAoBvD,GAAApN,KAAAoN,mBAAAA","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable, ReplaySubject } from 'rxjs';\n\nimport { ILanguage } from './../interfaces/language.interface';\nimport { ITranslationInterface } from '../interfaces/translation.interface';\n\ndeclare var global: any;\n\n@Injectable()\nexport class TranslationService implements ITranslationInterface {\n  public static TRANSLATION_PRODUCT_PATH = 'TRANSLATION_PRODUCT_PATH';\n  public static TRANSLATION_LANGUAGES = 'TRANSLATION_LANGUAGES';\n  public static DEFAULT_LANGUAGE_ISO = 'DEFAULT_LANGUAGE_ISO';\n  public static currentLanguage: ILanguage = undefined;\n\n  private static translations: any = {};\n  private static languages: ILanguage[] = [];\n\n  public languageLoaded = new ReplaySubject<boolean>(1);\n  private selectedLanguageSubject = new ReplaySubject<ILanguage>(1);\n  private languagesSubject = new ReplaySubject<ILanguage[]>(1);\n  // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver  ???\n\n  constructor(\n    private httpClient: HttpClient,\n    @Inject(TranslationService.TRANSLATION_PRODUCT_PATH)\n    @Optional()\n    private productPath: string,\n    @Inject(TranslationService.TRANSLATION_LANGUAGES)\n    @Optional()\n    private loadedLanguages: any,\n    @Inject(TranslationService.DEFAULT_LANGUAGE_ISO)\n    @Optional()\n    private defaultLanguageISO: any // e.g.: en_US from america region || en_UK from europe region.\n  ) {\n    if (!this.loadedLanguages) {\n      console.warn(\n        'The Translation Service can\\'t init without Injected Languages.'\n      );\n      console.warn(\n        'Inject the languages from your application: > ' +\n          '{ provide: \\'TRANSLATION_LANGUAGES, useValue: window[\\'CMX_LANGUAGES\\'] },\\''\n      );\n      return;\n    }\n\n    if (!defaultLanguageISO) {\n      console.warn('The Translation Service need defaultLanguageISO.');\n    }\n\n    TranslationService.languages = this.loadedLanguages;\n    const localStorageLanguage = (global as any).localStorage.getItem(\n      'language'\n    );\n\n    const allKeys = Object.keys(TranslationService.translations);\n    if (allKeys.length === 0) {\n      this.setLanguage(localStorageLanguage || defaultLanguageISO);\n    } else {\n      this.languageLoaded.next(true);\n      // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?\n    }\n  }\n\n  /**\n   * @description Gets the labels data from the server.\n   * @param $lang Language code for the file\n   */\n  public getTranslations($lang: string): Observable<any> {\n    const endpoint = `/translate/translate/${this.productPath}/${$lang}`;\n    return this.httpClient.get<any>(endpoint);\n  }\n\n  /**\n   * @description Observable to gets the languages that exist in the server\n   */\n  public getLanguages(): Observable<ILanguage[]> {\n    return this.languagesSubject.asObservable();\n  }\n\n  public getSelectedLanguage(): Observable<ILanguage> {\n    return this.selectedLanguageSubject.asObservable();\n  }\n\n  /**\n   * @description Retrieve the public translation of a label\n   * @param $textId Label id as written in the json file\n   */\n  public pt($textId: string): string {\n    const textValue = TranslationService.translations[$textId];\n    if (!textValue || textValue === undefined) {\n      return 'NOT:' + $textId;\n    }\n    return textValue;\n  }\n\n  /**\n   * @description Retrieve the public translation of a label\n   * @param $textId Label id as written in the json file\n   */\n  public getLabel($textId: string): string {\n    const textValue = TranslationService.translations[$textId];\n    if (!textValue || textValue === undefined) {\n      return 'NOT:' + $textId;\n    }\n    return textValue;\n  }\n\n  /**\n   * @description Retrieve language published on the server.\n   * @param $languageISO Can be the country code or the language iso combination\n   */\n  public getLanguage($languageISO: string): ILanguage {\n    if ($languageISO !== undefined && $languageISO !== null) {\n      let langValue: ILanguage;\n\n      langValue = TranslationService.languages.find(language => {\n        return (\n          language.languageISO === $languageISO ||\n          language.countryCode.toLowerCase() === $languageISO.toLowerCase() ||\n          language.languageISO.includes($languageISO)\n        );\n      });\n\n      // if the language cannot reached, go for default\n      if (langValue === undefined) {\n        console.warn('The Language cannot reached', $languageISO);\n        langValue = this.getDefaultLanguage();\n      }\n\n      langValue.momentConfig = this.getMomentConfig(langValue);\n\n      return langValue;\n    } else {\n      console.warn('$languageIso param is undefined.');\n      return this.getDefaultLanguage();\n    }\n  }\n\n  /**\n   * @description Retrieve language published on the server.\n   * @param $countryCode Can be the country code or the language iso combination\n   */\n  public getLanguageByCountryCode($countryCode: string): ILanguage {\n    if ($countryCode !== undefined && $countryCode !== null) {\n      let langValue: ILanguage;\n      const countryLan: ILanguage[] = TranslationService.languages.filter(\n        $language => {\n          return (\n            $language.countryCode.toLowerCase() === $countryCode.toLowerCase()\n          );\n        }\n      );\n\n      if (countryLan.length > 1) {\n        const languageCode = sessionStorage.getItem('language');\n        langValue = countryLan.find($language => {\n          return (\n            $language.languageISO.toLowerCase() === languageCode.toLowerCase()\n          );\n        });\n      } else {\n        langValue =\n          countryLan && countryLan.length > 0 ? countryLan[0] : undefined;\n      }\n\n      // if the language cannot reached, go for default\n      if (langValue === undefined) {\n        console.warn('The Language cannot reached', $countryCode);\n        langValue = this.getDefaultLanguage();\n      }\n\n      langValue.momentConfig = this.getMomentConfig(langValue);\n\n      return langValue;\n    } else {\n      console.warn('$countryCode param is undefined.');\n      return this.getDefaultLanguage();\n    }\n  }\n\n  /**\n   * @description Set language by languageISO or CountryCode.\n   * @param $languageISO Can be the country code or the language iso combination\n   */\n  public setLanguage($languageISO: string) {\n    this.selectedLanguage = this.getLanguage($languageISO);\n\n    for (const lang of TranslationService.languages) {\n      lang.isSelected = lang.languageISO === this.selectedLanguage.languageISO;\n      lang.dir = lang.textFloat === 'right' ? 'rtl' : 'ltr';\n      lang.rtl = lang.dir === 'rtl' ? true : false;\n    }\n\n    this.getTranslations(this.selectedLanguage.languageISO).subscribe(\n      translations => this.populateTranslation(translations)\n    );\n  }\n\n  public populateTranslation($result: any) {\n    TranslationService.translations = $result;\n\n    // emit changes until populate is completed\n    localStorage.setItem('language', this.selectedLanguage.languageISO);\n    sessionStorage.setItem('language', this.selectedLanguage.languageISO);\n    this.languageLoaded.next(true);\n    // we can change 'languageLoaded' to 'selectedLanguageSubject' in translation resolver?\n    this.selectedLanguageSubject.next(this.selectedLanguage);\n    this.languagesSubject.next(TranslationService.languages);\n  }\n\n  public get selectedLanguage() {\n    return TranslationService.currentLanguage;\n  }\n\n  public set selectedLanguage(language: ILanguage) {\n    TranslationService.currentLanguage = language;\n  }\n\n  public getDefaultLanguage() {\n    let defaultLangValue: ILanguage;\n\n    defaultLangValue = TranslationService.languages.find(language => {\n      return (\n        language.languageISO === this.defaultLanguageISO ||\n        language.countryCode.toLowerCase() ===\n          this.defaultLanguageISO.toLowerCase() ||\n        language.languageISO.includes(this.defaultLanguageISO)\n      );\n    });\n\n    if (defaultLangValue === undefined) {\n      console.warn(\n        'The Default Language cannot reached',\n        this.defaultLanguageISO\n      );\n\n      defaultLangValue = TranslationService.languages[0];\n      console.warn(\n        'Trying get the first language',\n        defaultLangValue.languageISO\n      );\n    } else {\n      console.warn('The Default Language is', defaultLangValue.languageISO);\n    }\n\n    return defaultLangValue;\n  }\n\n  public getLanguagesByCountryCode(countryCode: string): ILanguage[] {\n    const languagesByContryCode: ILanguage[] = TranslationService.languages.filter(\n      language =>\n        language.countryCode.toLowerCase() === countryCode.toLowerCase()\n    );\n    return languagesByContryCode;\n  }\n\n  private getMomentConfig(language) {\n    return {\n      months: language.monthNames.split(','),\n      monthsShort: language.shortDayMonths.split(','),\n      weekdays: language.dayNames.split(','),\n      weekdaysMin: language.shortDayNames2.split(','),\n      weekdaysShort: language.shortDayNames.split(',')\n    };\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * From https://github.com/shrpne/from-exponential\n * Can't install the package beacause it is ES6, UglifyJS on its version compatible with Webpack 3 can't do ES6\n * The code needs to be copied locally so Typescript could compile it to ES5\n * or just upgrade to Webpack 4 and use the webpack-uglify-plugin\n */\n\n/**\n * Return two parts array of exponential number\n * @param num - number or array of its parts\n */\nexport function getExponentialParts(num) {\n  return Array.isArray(num) ? num : String(num).split(/[eE]/);\n}\n\n/**\n *\n * @param num - number or array of its parts\n */\nexport function isExponential(num) {\n  const eParts = getExponentialParts(num);\n  return !Number.isNaN(Number(eParts[1]));\n}\n\n/**\n * Converts exponential notation to a human readable string\n * @param num - number or array of its parts\n */\nexport default function fromExponential(num) {\n  const eParts = getExponentialParts(num);\n  if (!isExponential(eParts)) {\n    return eParts[0];\n  }\n\n  const sign = eParts[0][0] === '-' ? '-' : '';\n  const digits = eParts[0].replace(/^-/, '');\n  const digitsParts = digits.split('.');\n  const wholeDigits = digitsParts[0];\n  const fractionDigits = digitsParts[1] || '';\n  let e = Number(eParts[1]);\n\n  if (e === 0) {\n    return `${sign + wholeDigits}.${fractionDigits}`;\n  } else if (e < 0) {\n    // move dot to the left\n    const countWholeAfterTransform = wholeDigits.length + e;\n    if (countWholeAfterTransform > 0) {\n      // transform whole to fraction\n      const wholeDigitsAfterTransform = wholeDigits.substr(\n        0,\n        countWholeAfterTransform\n      );\n      const wholeDigitsTransformedToFracton = wholeDigits.substr(\n        countWholeAfterTransform\n      );\n      return `${sign +\n        wholeDigitsAfterTransform}.${wholeDigitsTransformedToFracton}${fractionDigits}`;\n    } else {\n      // not enough whole digits: prepend with fractional zeros\n\n      // first e goes to dotted zero\n      let zeros = '0.';\n      e += 1;\n      while (e) {\n        zeros += '0';\n        e += 1;\n      }\n      return sign + zeros + wholeDigits + fractionDigits;\n    }\n  } else {\n    // move dot to the right\n    const countFractionAfterTransform = fractionDigits.length - e;\n    if (countFractionAfterTransform > 0) {\n      // transform fraction to whole\n      // countTransformedFractionToWhole = e\n      const fractionDigitsAfterTransform = fractionDigits.substr(e);\n      const fractionDigitsTransformedToWhole = fractionDigits.substr(0, e);\n      return `${sign +\n        wholeDigits +\n        fractionDigitsTransformedToWhole}.${fractionDigitsAfterTransform}`;\n    } else {\n      // not enough fractions: append whole zeros\n      let zerosCount = -countFractionAfterTransform;\n      let zeros = '';\n      while (zerosCount) {\n        zeros += '0';\n        zerosCount -= 1;\n      }\n      return sign + wholeDigits + fractionDigits + zeros;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as moment_ from 'moment';\n\nimport { TranslationService } from './translation.service';\nimport fromExponential from './../fromExponential';\n\nconst moment = moment_;\n\nexport enum DateTimeActions {\n  ConvertToLocal,\n  NoConvertToLocal\n}\n\n@Injectable()\nexport class FormatterService {\n  constructor() {}\n\n  // DATES\n\n  /**\n   * @description Transforms a valid string to a date object\n   * @param date The date as string\n   * @returns A javascript date object\n   */\n  public getDateObject(date: string): Date {\n    try {\n      const auxDate = date.replace(/-g/, '/');\n      const bits: any = auxDate.split(/\\D/);\n      const month = parseInt(bits[1], undefined) - 1;\n      if (bits.length === 3) {\n        return new Date(bits[0], month, bits[2]);\n      } else {\n        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);\n      }\n    } catch ($exception) {\n      return undefined;\n    }\n  }\n\n  public formatDateTimeMoment(\n    date,\n    languageISO,\n    format,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ) {\n    if (TranslationService.currentLanguage) {\n      moment.updateLocale(\n        TranslationService.currentLanguage.languageISO.substr(0, 2),\n        TranslationService.currentLanguage.momentConfig\n      );\n    }\n\n    if (action === DateTimeActions.NoConvertToLocal) {\n      return moment(date)\n        .locale(languageISO.substr(0, 2))\n        .format(format);\n    }\n\n    return this.utcToLocal(date)\n      .locale(languageISO.substr(0, 2))\n      .format(format);\n  }\n\n  /**\n   * @description Format a number by TypeScript Number function\n   * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'\n   * @param numberEntry: value to format\n   * @param languageISO: specifict language to format\n   * @param decimalNumbers: quantity decimals to set in the format\n   * @returns A value formatted\n   */\n  public formatNumberTS(numberEntry, languageISO, decimalNumbers) {\n    if (isNaN(numberEntry) || numberEntry === null) {\n      return 0;\n    }\n\n    return Number(\n      this.round(numberEntry, decimalNumbers).toFixed(decimalNumbers)\n    ).toLocaleString(languageISO + '-u-nu-latn', {\n      minimumFractionDigits: numberEntry % 1 === 0 ? 0 : decimalNumbers\n    });\n  }\n\n  public utcToLocal(dateEntry) {\n    return moment.utc(dateEntry).local();\n  }\n\n  public localToUtc(date, format?: any) {\n    if (format !== undefined) {\n      return moment(date, 'YYYY-MM-DD THH:mm:ssZ')\n        .utc()\n        .format(format);\n    } else {\n      return moment(date, 'YYYY-MM-DD THH:mm:ssZ')\n        .utc()\n        .format();\n    }\n  }\n\n  // expected time '00:00:00'\n  public timeToMinutes(time) {\n    const timeSplit = time.split(':');\n\n    const hours = +timeSplit[0];\n    const minutes = +timeSplit[1];\n    const seconds = +timeSplit[2];\n\n    return hours * 60 + minutes + this.roundToDown(seconds / 60);\n  }\n\n  // NUMBERS\n\n  /**\n   * @description Formats a number as a currency preserving its precision.\n   * In order the keep the precision the number must be passed as a string\n   * @param value The number value to format\n   * @param numberDecimals The number of decimals to use\n   * @param thousandSeparator The string character to use when separating numbers\n   * @param decimalSeparator The string character to use when separating the decimal and integer part\n   * @returns The number as a currency string\n   */\n  public formatNumber(\n    value: number | string,\n    numberDecimals?: number,\n    thousandSeparator?: string,\n    decimalSeparator?: string\n  ): string {\n    // tslint:disable-next-line: triple-equals\n    if (value == undefined || value.toString() == '' || isNaN(value as any)) {\n      console.warn('Not a valid number to format');\n      return '';\n    }\n\n    // tslint:disable-next-line:triple-equals\n    numberDecimals = numberDecimals != undefined ? numberDecimals : 2;\n    // tslint:disable-next-line:triple-equals\n    thousandSeparator =\n      thousandSeparator !== undefined ? thousandSeparator : ',';\n    // tslint:disable-next-line:triple-equals\n    decimalSeparator = decimalSeparator !== undefined ? decimalSeparator : '.';\n\n    const completeNumber: string = fromExponential(value);\n\n    const sign: string = value < 0 ? '-' : '';\n    const absoluteValue: string =\n      value < 0 ? completeNumber.split('-')[1] : completeNumber;\n    const truncatedDecimalValue: string =\n      absoluteValue.split('.')[1] &&\n      absoluteValue.split('.')[1].slice(0, numberDecimals);\n\n    const integerPart: string = absoluteValue.split('.')[0];\n    const floatingPart: string = this.rightPad(\n      truncatedDecimalValue,\n      '0',\n      numberDecimals\n    );\n\n    let formattedInteger: string = integerPart;\n\n    if (Number(integerPart) >= 1000) {\n      formattedInteger = integerPart.replace(/./g, (c, i, a) => {\n        return i && c !== decimalSeparator && (a.length - i) % 3 === 0\n          ? thousandSeparator + c\n          : c;\n      });\n    }\n\n    // tslint:disable-next-line:max-line-length\n    const formattedNumber = `${sign}${formattedInteger}${\n      floatingPart.length > 0 ? decimalSeparator : ''\n    }${floatingPart}`;\n\n    return formattedNumber;\n  }\n\n  public round(value: number, decimals: number) {\n    let type = '';\n    type = 'round';\n    const valueDecimals = value % 1;\n    if (valueDecimals !== 0.5) {\n      return Number(Math[type](value + 'e' + decimals) + 'e-' + decimals);\n    } else {\n      return Number(value);\n    }\n  }\n\n  public roundToDown(value: number) {\n    return Math.floor(value);\n  }\n\n  // STRINGS\n  public removeFirstZeros(value: string): string {\n    return value.replace(/^0+/, '');\n  }\n\n  public pad(text: string, wildcard: string, length: number): string {\n    let result = text;\n    while (result.length < length) {\n      result = wildcard + result;\n    }\n    return result;\n  }\n\n  /**\n   * @description Fills up a string with the specified character appending it to the right till lenght is achieved\n   * @param text String to add padding\n   * @param wildcard Character that's gonne be repeated\n   * @param lenght The desired length\n   */\n  public rightPad(\n    text: number | string | undefined,\n    wildcard: string,\n    length: number\n  ): string {\n    if (text === undefined || text === null || text === '') {\n      return wildcard.repeat(length);\n    }\n    let str = text.toString();\n    while (str.length < length) {\n      str += wildcard;\n    }\n\n    return str;\n  }\n\n  public formatMeasureUnit(measureUnit) {\n    switch (measureUnit) {\n      case 'YD3':\n        return 'YdÂ³';\n      case 'M3':\n        return 'MÂ³';\n      default:\n        return measureUnit;\n    }\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from './../services/formatter.service';\n\n@Pipe({\n  name: 'cmxCurrencyCustom',\n  pure: true\n})\nexport class CmxCurrencyCustomPipe implements PipeTransform {\n  private value = '';\n\n  constructor(private formatter: FormatterService) {}\n\n  public transform(\n    $value: any,\n    $currencySymbol: string,\n    $decimalNumbers: string | number,\n    $thousandSeparator: string,\n    $decimalSeparator: string,\n    $floatCurrencySymbolRight?: boolean\n  ): string {\n    try {\n      if ($value !== undefined && isNaN($value) === false) {\n        this.value = $value.toString();\n        $decimalNumbers = parseInt($decimalNumbers.toString(), undefined);\n        if ($value < 0) {\n          // value is negative\n          const v = parseFloat($value.toString().replace(/\\-/g, ''));\n          const $aux: string = this.formatter.formatNumber(\n            v,\n            $decimalNumbers,\n            $thousandSeparator,\n            $decimalSeparator\n          );\n          if ($floatCurrencySymbolRight) {\n            this.value = '-' + $aux + $currencySymbol;\n          } else {\n            this.value = '-' + $currencySymbol + $aux;\n          }\n        } else {\n          this.value =\n            $currencySymbol +\n            this.formatter.formatNumber(\n              $value,\n              $decimalNumbers,\n              $thousandSeparator,\n              $decimalSeparator\n            );\n        }\n      } else {\n        this.value = '';\n      }\n    } catch ($exception) {\n      console.error('Value trying to transform: ', $value);\n      console.error($exception);\n      this.value = '';\n    }\n    return this.value;\n  }\n}\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Pipe, PLATFORM_ID, PipeTransform } from '@angular/core';\n\nimport { ILanguage } from './../interfaces/language.interface';\nimport { FormatterService } from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxCurrency',\n  pure: true\n})\nexport class CmxCurrencyPipe implements PipeTransform {\n  // FIXME: I should be injecting the window object but that will break the implementation. I will not do that just yet.\n  // Making this public so I can access it in the test\n  public window: any;\n\n  constructor(\n    private formatter: FormatterService,\n    private translation: TranslationService,\n    @Inject(PLATFORM_ID) private platformId: any\n  ) {\n    if (isPlatformBrowser(platformId)) {\n      this.window = window;\n    }\n  }\n\n  public transform(value: any, countryCode?: string): string {\n    if (value === '' || value == null || isNaN(value as any)) {\n      console.warn('The value is not a number');\n      return '';\n    }\n\n    countryCode = countryCode || this.window.sessionStorage.getItem('country');\n\n    // tslint:disable-next-line:triple-equals\n    if (countryCode == undefined) {\n      console.warn(`Can't retrieve countryCode`);\n      return '';\n    }\n\n    const lang: ILanguage = this.translation.getLanguageByCountryCode(\n      countryCode\n    );\n\n    const symbolPosition =\n      (lang.currencySymbolFloat && lang.currencySymbolFloat.toLowerCase()) ||\n      'left';\n    const currencySymbol = lang.currencySymbol || '$';\n\n    const formattedNumber: string = this.formatter.formatNumber(\n      value,\n      lang && lang.decimalNumbersMoney,\n      lang && lang.thousandSeparator,\n      lang && lang.decimalSeparator\n    );\n\n    const numberWithCurrency =\n      symbolPosition === 'left'\n        ? `${currencySymbol}${formattedNumber}`\n        : `${formattedNumber}${currencySymbol}`;\n\n    return '&lrm;' + numberWithCurrency;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  FormatterService,\n  DateTimeActions\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDateMoment',\n  pure: false\n})\nexport class CmxDateMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatDate,\n      action\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DateFormatterService {\n  constructor() {\n    //\n  }\n\n  /**\n   * @description Formats a date object to a string given a date format from a language\n   * @param value The date value to format\n   * @param format The format to comply, e.x. DD MM, YYYY\n   * @param daysNames String array of the weekdays' names\n   * @param monthsNames String array of the months' names\n   * @returns String of the formatted date\n   */\n  public format(\n    $value: Date,\n    $format: string,\n    $daysNames: string[],\n    $monthsNames: string[]\n  ): string {\n    let dateAsString = '';\n    let $separator = '/';\n    let day: string;\n    let month: string;\n    let year: string;\n    let $formats = $format.split($separator);\n    if ($formats.length === 1) {\n      $separator = '-';\n      $formats = $format.split($separator);\n    }\n    if ($formats.length === 1) {\n      $separator = ' ';\n      $formats = $format.split($separator);\n    }\n    if ($formats.length === 1) {\n      $separator = '.';\n      $formats = $format.split($separator);\n    }\n    $formats.forEach(($formatItem, $index) => {\n      const $auxValue: any = $value;\n      const $formatCode = $formatItem.replace(',', '');\n      if ($formatItem.includes('d') || $formatItem.includes('D')) {\n        day = this.getDay($auxValue, $formatCode, $daysNames);\n        $formatItem = $formatItem.replace($formatCode, day);\n      } else if ($formatItem.includes('m') || $formatItem.includes('M')) {\n        month = this.getMonth($auxValue, $formatCode, $monthsNames);\n        $formatItem = $formatItem.replace($formatCode, month);\n      } else if ($formatItem.includes('y') || $formatItem.includes('Y')) {\n        year = this.getYear($auxValue, $formatCode);\n        $formatItem = $formatItem.replace($formatCode, year);\n      }\n      if ($index !== $formats.length - 1) {\n        dateAsString += $formatItem + $separator;\n      } else {\n        dateAsString += $formatItem;\n      }\n    });\n    return dateAsString;\n  }\n\n  /**\n   * @description Transforms a valid string to a date object\n   * @param date The date as string\n   * @returns A javascript date object\n   */\n  public getDateObject(date: string): Date {\n    try {\n      const auxDate = date.replace(/-g/, '/');\n      const bits: any = auxDate.split(/\\D/);\n      const month = parseInt(bits[1], undefined) - 1;\n      if (bits.length === 3) {\n        return new Date(bits[0], month, bits[2]);\n      } else {\n        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);\n      }\n    } catch ($exception) {\n      return undefined;\n    }\n  }\n\n  private addZero($number: number): string {\n    return $number < 10 ? '0' + $number : $number.toString();\n  }\n\n  private getDay($date: Date, $format: string, $daysNames: string[]): string {\n    let day: string;\n    if ($format.length === 4) {\n      // requires the complete name of the day\n      day = $daysNames[$date.getDay()];\n    } else if ($format.length === 3) {\n      // requires an abbreviation of the day's name\n      day = $daysNames[$date.getDay()].substring(0, 3);\n    } else if ($format.length === 2 || $format.length === 1) {\n      // requires the value of the day\n      day = this.addZero($date.getDate());\n    }\n    // check if names should use lower or uppercase\n    if ($format === $format.toLowerCase()) {\n      // the format uses d\n      day = day.toLowerCase();\n    }\n    return day;\n  }\n\n  private getMonth(\n    $date: Date,\n    $format: string,\n    $monthsNames: string[]\n  ): string {\n    let month: string;\n    if ($format.length === 4) {\n      // requires the complete name of the month\n      month = $monthsNames[$date.getMonth()];\n    } else if ($format.length === 3) {\n      // requires an abbreviation of the day's name\n      month = $monthsNames[$date.getMonth()].substring(0, 3);\n    } else if ($format.length === 2) {\n      // requires the value of the day\n      month = this.addZero($date.getMonth() + 1);\n    }\n    // check if names should use lower or uppercase\n    if ($format === $format.toLowerCase()) {\n      // the format uses d\n      month = month.toLowerCase();\n    }\n    return month;\n  }\n\n  private getYear($date: Date, $format: string): string {\n    let year: string;\n    if ($format.length === 4) {\n      // requires the complete year\n      year = '' + $date.getFullYear();\n    } else {\n      // requires only the last 2 numbers of the year value\n      year = '' + $date.getFullYear();\n      year = year.substring(2);\n    }\n    return year;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ILanguage } from './../interfaces/language.interface';\nimport { DateFormatterService } from './../services/date-formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDate',\n  pure: true\n})\nexport class CmxDatePipe implements PipeTransform {\n  private value = '';\n  private monthsNames: string[] = [];\n  private daysNames: string[] = [];\n\n  constructor(\n    private translation: TranslationService,\n    private dateFormatter: DateFormatterService\n  ) {}\n\n  public transform(\n    $value: Date | string | number,\n    $countryCode?: string\n  ): string {\n    try {\n      if (typeof $value === 'number') {\n        $value = new Date($value);\n      }\n      if (typeof $value === 'string') {\n        $value = this.dateFormatter.getDateObject($value);\n      }\n      if ($countryCode === undefined || $countryCode === null) {\n        $countryCode = sessionStorage.getItem('country');\n      }\n      if ($value !== undefined && $value instanceof Date) {\n        const $currentLanguage: string = localStorage.getItem('language');\n        const $lang: ILanguage = this.translation.getLanguage(\n          $currentLanguage ? $currentLanguage : 'en_US'\n        );\n        this.daysNames = $lang.dayNames.split(',');\n        this.monthsNames = $lang.monthNames.split(',');\n        this.value = this.dateFormatter.format(\n          $value,\n          $lang.formatDate,\n          this.daysNames,\n          this.monthsNames\n        );\n      } else {\n        console.error('Date trying to transform: ', $value);\n        this.value = '';\n      }\n    } catch ($exception) {\n      console.error('Date trying to transform: ', $value);\n      console.error($exception);\n      this.value = '';\n    }\n    return this.value;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  DateTimeActions,\n  FormatterService\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxDateTimeMoment',\n  pure: false\n})\nexport class CmxDateTimeMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatDate +\n        ' ' +\n        this.translationService.selectedLanguage.formatTime,\n      action\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport { FormatterService } from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxNumber',\n  pure: false\n})\nexport class CmxNumberPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(numberEntry) {\n    return this.formatterService.formatNumberTS(\n      numberEntry,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.decimalNumbers\n    );\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\nimport {\n  DateTimeActions,\n  FormatterService\n} from './../services/formatter.service';\nimport { TranslationService } from './../services/translation.service';\n\n@Pipe({\n  name: 'cmxTimeMoment',\n  pure: false\n})\nexport class CmxTimeMomentPipe implements PipeTransform {\n  constructor(\n    private translationService: TranslationService,\n    private formatterService: FormatterService\n  ) {}\n\n  public transform(\n    dateTime,\n    action: DateTimeActions = DateTimeActions.ConvertToLocal\n  ): string {\n    return this.formatterService.formatDateTimeMoment(\n      dateTime,\n      this.translationService.selectedLanguage.languageISO.replace('_', '-'),\n      this.translationService.selectedLanguage.formatTime,\n      action\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { CmxCurrencyCustomPipe } from './pipes/cmx-currency-custom.pipe';\nimport { CmxCurrencyPipe } from './pipes/cmx-currency.pipe';\nimport { CmxDateMomentPipe } from './pipes/cmx-date-moment.pipe';\nimport { CmxDatePipe } from './pipes/cmx-date.pipe';\nimport { CmxDateTimeMomentPipe } from './pipes/cmx-date-time-moment.pipe';\nimport { CmxNumberPipe } from './pipes/cmx-number.pipe';\nimport { CmxTimeMomentPipe } from './pipes/cmx-time-moment.pipe';\n\n@NgModule({\n  declarations: [\n    CmxCurrencyCustomPipe,\n    CmxCurrencyPipe,\n    CmxDateMomentPipe,\n    CmxDatePipe,\n    CmxDateTimeMomentPipe,\n    CmxNumberPipe,\n    CmxTimeMomentPipe\n  ],\n  exports: [\n    CmxCurrencyCustomPipe,\n    CmxCurrencyPipe,\n    CmxDateMomentPipe,\n    CmxDatePipe,\n    CmxDateTimeMomentPipe,\n    CmxNumberPipe,\n    CmxTimeMomentPipe\n  ],\n  imports: [CommonModule]\n})\nexport class AngularLocalizationModule {}\n","import { Injectable } from '@angular/core';\n\nimport { Observable, Subject } from 'rxjs';\n\nimport { ILanguageDirection } from '../interfaces/languageDirection.interface';\nimport { TranslationService } from './translation.service';\n\n@Injectable()\nexport class DirectionService implements ILanguageDirection {\n  private direction$: Subject<string> = new Subject();\n  private rtl$: Subject<boolean> = new Subject();\n\n  constructor(private translation: TranslationService) {\n    this.translation.getSelectedLanguage().subscribe((language: any) => {\n      this.direction$.next(language.direction);\n      this.rtl$.next(language.rtl);\n    });\n  }\n\n  public getDirection(): Observable<string> {\n    return this.direction$.asObservable();\n  }\n\n  public getRTL(): Observable<boolean> {\n    return this.rtl$.asObservable();\n  }\n\n  public getDirectionFor(languageCode: string) {\n    const language = this.translation.getLanguage(\n      languageCode.split(/[-_]/)[0]\n    );\n    this.direction$.next(language.dir);\n  }\n\n  public getRtlFor(languageCode: string) {\n    const language = this.translation.getLanguage(\n      languageCode.split(/[-_]/)[0]\n    );\n    this.rtl$.next(language.rtl);\n  }\n}\n","// Temporal service.\n// This be will replace by language config data.\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LocaleService {\n  constructor() {\n    // empty\n  }\n\n  public getConfiguration(languageISO) {\n    switch (languageISO) {\n      case 'en':\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec',\n          secondShort: 'sec',\n          weekdaysMin: 'Su,Mo,Tu,We,Th,Fr,Sa',\n          weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'\n        };\n      case 'es':\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Ene,Feb,Mar,Abr,May,Jun,Jul,Ago,Sep,Oct,Nov,Dic',\n          secondShort: 'seg',\n          weekdaysMin: 'Do,Lu,Ma,Mi,Ju,Vi,SÃ¡',\n          weekdaysShort: 'Dom,Lun,Mar,MiÃ©,Jue,Vie,SÃ¡b'\n        };\n      case 'fr':\n        return {\n          hourShort: 'h',\n          minuteShort: 'min',\n          monthsShort: 'Janv,FÃ©vr,Mars,Avr,Mai,Juin,Juil,AoÃ»t,Sept,Oct,Nov,DÃ©c',\n          secondShort: 'sec',\n          weekdaysMin: 'Di,Lu,Ma,Me,Je,Ve,Sa',\n          weekdaysShort: 'Dim,Lun,Mar,Mer,Jeu,Ven,Sam'\n        };\n      case 'de':\n        return {\n          hourShort: 'Std.',\n          minuteShort: 'Min.',\n          monthsShort: 'Jan,Febr,Mrz,Apr,Mai,Jun,Jul,Aug,Sept,Okt,Nov,Dez',\n          secondShort: 'Sekunde',\n          weekdaysMin: 'So,Mo,Di,Mi,Do,Fr,Sa',\n          weekdaysShort: 'So,Mo,Di,Mi,Do,Fr,Sa'\n        };\n      case 'he':\n        return {\n          hourShort: '×©×¢×',\n          minuteShort: '××§××ª',\n          monthsShort:\n            '×× ××³,×¤××¨×³,××¨×¥,××¤×¨×³,×××,××× ×,××××,××××³,×¡×¤××³,×××§×³,× ×××³,××¦××³',\n          secondShort: '×©× ×××',\n          weekdaysMin: '×,×,×,×,×,×,×©',\n          weekdaysShort: '××³,××³,××³,××³,××³,××³,×©×³'\n        };\n      case 'pl':\n        return {\n          hourShort: 'h',\n          minuteShort: 'min',\n          monthsShort: 'Sty,Lut,Mar,Kwi,Maj,Cze,Lip,Sie,Wrz,PaÅº,Lis,Gru',\n          secondShort: 's',\n          weekdaysMin: 'Nd,Pn,Wt,År,Cz,Pt,So',\n          weekdaysShort: 'Ndz,Pon,Wt,År,Czw,Pt,Sob'\n        };\n      default:\n        return {\n          hourShort: 'hr',\n          minuteShort: 'min',\n          monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec',\n          secondShort: 'sec',\n          weekdaysMin: 'Su,Mo,Tu,We,Th,Fr,Sa',\n          weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'\n        };\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  Resolve,\n  RouterStateSnapshot\n} from '@angular/router';\n\nimport { Observable } from 'rxjs';\n\nimport { TranslationService } from './../services/translation.service';\n\n@Injectable()\nexport class TranslationResolver implements Resolve<boolean> {\n  constructor(private translationService: TranslationService) {}\n\n  public resolve(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable<boolean> {\n    return this.translationService.languageLoaded;\n  }\n}\n"]}