import { HttpClient } from '@angular/common/http';
import { Observable, ReplaySubject } from 'rxjs';
import { ILanguage } from './../interfaces/language.interface';
import { ITranslationInterface } from '../interfaces/translation.interface';
export declare class TranslationService implements ITranslationInterface {
    private httpClient;
    private productPath;
    private loadedLanguages;
    private defaultLanguageISO;
    static TRANSLATION_PRODUCT_PATH: string;
    static TRANSLATION_LANGUAGES: string;
    static DEFAULT_LANGUAGE_ISO: string;
    static currentLanguage: ILanguage;
    private static translations;
    private static languages;
    languageLoaded: ReplaySubject<boolean>;
    private selectedLanguageSubject;
    private languagesSubject;
    constructor(httpClient: HttpClient, productPath: string, loadedLanguages: any, defaultLanguageISO: any);
    /**
     * @description Gets the labels data from the server.
     * @param $lang Language code for the file
     */
    getTranslations($lang: string): Observable<any>;
    /**
     * @description Observable to gets the languages that exist in the server
     */
    getLanguages(): Observable<ILanguage[]>;
    getSelectedLanguage(): Observable<ILanguage>;
    /**
     * @description Retrieve the public translation of a label
     * @param $textId Label id as written in the json file
     */
    pt($textId: string): string;
    /**
     * @description Retrieve the public translation of a label
     * @param $textId Label id as written in the json file
     */
    getLabel($textId: string): string;
    /**
     * @description Retrieve language published on the server.
     * @param $languageISO Can be the country code or the language iso combination
     */
    getLanguage($languageISO: string): ILanguage;
    /**
     * @description Retrieve language published on the server.
     * @param $countryCode Can be the country code or the language iso combination
     */
    getLanguageByCountryCode($countryCode: string): ILanguage;
    /**
     * @description Set language by languageISO or CountryCode.
     * @param $languageISO Can be the country code or the language iso combination
     */
    setLanguage($languageISO: string): void;
    populateTranslation($result: any): void;
    selectedLanguage: ILanguage;
    getDefaultLanguage(): ILanguage;
    getLanguagesByCountryCode(countryCode: string): ILanguage[];
    private getMomentConfig;
}
