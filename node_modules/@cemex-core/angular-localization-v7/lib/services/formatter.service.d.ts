import * as moment_ from 'moment';
export declare enum DateTimeActions {
    ConvertToLocal = 0,
    NoConvertToLocal = 1
}
export declare class FormatterService {
    constructor();
    /**
     * @description Transforms a valid string to a date object
     * @param date The date as string
     * @returns A javascript date object
     */
    getDateObject(date: string): Date;
    formatDateTimeMoment(date: any, languageISO: any, format: any, action?: DateTimeActions): string;
    /**
     * @description Format a number by TypeScript Number function
     * The static value '-u-nu-latn' is for always returns commons numbers '1,2,3,4,5,6,7,8,9,0'
     * @param numberEntry: value to format
     * @param languageISO: specifict language to format
     * @param decimalNumbers: quantity decimals to set in the format
     * @returns A value formatted
     */
    formatNumberTS(numberEntry: any, languageISO: any, decimalNumbers: any): string | 0;
    utcToLocal(dateEntry: any): moment_.Moment;
    localToUtc(date: any, format?: any): string;
    timeToMinutes(time: any): number;
    /**
     * @description Formats a number as a currency preserving its precision.
     * In order the keep the precision the number must be passed as a string
     * @param value The number value to format
     * @param numberDecimals The number of decimals to use
     * @param thousandSeparator The string character to use when separating numbers
     * @param decimalSeparator The string character to use when separating the decimal and integer part
     * @returns The number as a currency string
     */
    formatNumber(value: number | string, numberDecimals?: number, thousandSeparator?: string, decimalSeparator?: string): string;
    round(value: number, decimals: number): number;
    roundToDown(value: number): number;
    removeFirstZeros(value: string): string;
    pad(text: string, wildcard: string, length: number): string;
    /**
     * @description Fills up a string with the specified character appending it to the right till lenght is achieved
     * @param text String to add padding
     * @param wildcard Character that's gonne be repeated
     * @param lenght The desired length
     */
    rightPad(text: number | string | undefined, wildcard: string, length: number): string;
    formatMeasureUnit(measureUnit: any): any;
}
