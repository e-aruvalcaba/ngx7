/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class CalendarEvents {
    constructor() {
        this.datesSubject = new BehaviorSubject({
            start: this.moment(),
            end: this.moment()
        });
        // Observable items streams
        this.dates$ = this.datesSubject.asObservable();
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    setDates(dates) {
        ((/** @type {?} */ (window))).localStorage.setItem('dates', JSON.stringify(dates));
        /** @type {?} */
        const currentDates = this.getCurrentValue();
        if (dates.start.diff(currentDates.start, 'days') !== 0 || dates.end.diff(currentDates.end, 'days') !== 0) {
            this.datesSubject.next(dates);
        }
    }
    /**
     * @return {?}
     */
    getDates() {
        return this.dates$;
    }
    /**
     * @return {?}
     */
    getCurrentValue() {
        return this.datesSubject.getValue();
    }
}
CalendarEvents.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    CalendarEvents.prototype.moment;
    /**
     * @type {?}
     * @private
     */
    CalendarEvents.prototype.datesSubject;
    /**
     * @type {?}
     * @private
     */
    CalendarEvents.prototype.dates$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9ldmVudHMtdjcvIiwic291cmNlcyI6WyJsaWIvY2FsZW5kYXIuZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxNQUFNLE9BQU8sY0FBYztJQUQzQjtRQUlZLGlCQUFZLEdBQUcsSUFBSSxlQUFlLENBQU07WUFDNUMsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDcEIsR0FBRyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUU7U0FDckIsQ0FBQyxDQUFDOztRQUdLLFdBQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBaUJ0RCxDQUFDOzs7OztJQWZHLFFBQVEsQ0FBQyxLQUFVO1FBQ2YsQ0FBQyxtQkFBSyxNQUFNLEVBQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzs7Y0FDN0QsWUFBWSxHQUFHLElBQUksQ0FBQyxlQUFlLEVBQUU7UUFDM0MsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0RyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLENBQUM7OztZQTFCSixVQUFVOzs7O0lBR1AsZ0NBQW1COzs7OztJQUNuQixzQ0FHRzs7Ozs7SUFHSCxnQ0FBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FsZW5kYXJFdmVudHMge1xuICAgIC8vIE9ic2VydmFibGUgaXRlbXMgc291cmNlc1xuICAgIHB1YmxpYyBtb21lbnQ6IGFueTtcbiAgICBwcml2YXRlIGRhdGVzU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55Pih7XG4gICAgICAgIHN0YXJ0OiB0aGlzLm1vbWVudCgpLFxuICAgICAgICBlbmQ6IHRoaXMubW9tZW50KClcbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmFibGUgaXRlbXMgc3RyZWFtc1xuICAgIHByaXZhdGUgZGF0ZXMkID0gdGhpcy5kYXRlc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBzZXREYXRlcyhkYXRlczogYW55KSB7XG4gICAgICAgICg8YW55PndpbmRvdykubG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2RhdGVzJywgSlNPTi5zdHJpbmdpZnkoZGF0ZXMpKTtcbiAgICAgICAgY29uc3QgY3VycmVudERhdGVzID0gdGhpcy5nZXRDdXJyZW50VmFsdWUoKTtcbiAgICAgICAgaWYgKGRhdGVzLnN0YXJ0LmRpZmYoY3VycmVudERhdGVzLnN0YXJ0LCAnZGF5cycpICE9PSAwIHx8IGRhdGVzLmVuZC5kaWZmKGN1cnJlbnREYXRlcy5lbmQsICdkYXlzJykgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0ZXNTdWJqZWN0Lm5leHQoZGF0ZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RGF0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVzJDtcbiAgICB9XG5cbiAgICBnZXRDdXJyZW50VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGVzU3ViamVjdC5nZXRWYWx1ZSgpO1xuICAgIH1cbn1cbiJdfQ==