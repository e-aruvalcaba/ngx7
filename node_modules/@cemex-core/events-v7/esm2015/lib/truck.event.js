/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class TruckEvents {
    constructor() {
        // Observable items sources
        this.selectedTruckSubject = new BehaviorSubject(null);
    }
    /**
     * @param {?} truck
     * @return {?}
     */
    selectTruck(truck) {
        /** @type {?} */
        const currentTruck = this.truckValue();
        // Fire only if selected truck differs from the previous one
        if (currentTruck !== truck) {
            this.selectedTruckSubject.next(truck);
        }
    }
    /**
     * @return {?}
     */
    selectedTruck() {
        return this.selectedTruckSubject.asObservable();
    }
    /**
     * @return {?}
     */
    truckValue() {
        return this.selectedTruckSubject.getValue();
    }
}
TruckEvents.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TruckEvents.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TruckEvents.prototype.selectedTruckSubject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1Y2suZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9ldmVudHMtdjcvIiwic291cmNlcyI6WyJsaWIvdHJ1Y2suZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxNQUFNLE9BQU8sV0FBVztJQUlwQjs7UUFGUSx5QkFBb0IsR0FBRyxJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztJQUU5QyxDQUFDOzs7OztJQUVqQixXQUFXLENBQUMsS0FBVTs7Y0FDWixZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUV0Qyw0REFBNEQ7UUFDNUQsSUFBSSxZQUFZLEtBQUssS0FBSyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekM7SUFDTCxDQUFDOzs7O0lBRUQsYUFBYTtRQUNULE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7SUFFRCxVQUFVO1FBQ04sT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7O1lBdEJKLFVBQVU7Ozs7Ozs7OztJQUdQLDJDQUE4RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUcnVja0V2ZW50cyB7XG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzb3VyY2VzXG4gICAgcHJpdmF0ZSBzZWxlY3RlZFRydWNrU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PihudWxsKTtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBzZWxlY3RUcnVjayh0cnVjazogYW55KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUcnVjayA9IHRoaXMudHJ1Y2tWYWx1ZSgpO1xuXG4gICAgICAgIC8vIEZpcmUgb25seSBpZiBzZWxlY3RlZCB0cnVjayBkaWZmZXJzIGZyb20gdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBpZiAoY3VycmVudFRydWNrICE9PSB0cnVjaykge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFRydWNrU3ViamVjdC5uZXh0KHRydWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdGVkVHJ1Y2soKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVHJ1Y2tTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHRydWNrVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVHJ1Y2tTdWJqZWN0LmdldFZhbHVlKCk7XG4gICAgfVxufVxuIl19