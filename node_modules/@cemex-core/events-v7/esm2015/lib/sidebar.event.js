/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
export class SidebarEvents {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        // Observable items sources
        this.jobsiteSubject = new BehaviorSubject(null);
        this.customerSubject = new BehaviorSubject(null);
        this.customersSubject = new BehaviorSubject(null);
        // Observable items streams
        this.jobsite$ = this.jobsiteSubject.asObservable();
        this.customer$ = this.customerSubject.asObservable();
    }
    /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    selectJobsite(jobsite, redirect = false, lock = false) {
        /** @type {?} */
        const currentJobsite = this.jobsiteSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentJobsite !== jobsite) {
            if (!lock) {
                this.jobsiteSubject.next(jobsite);
            }
        }
        if (jobsite && redirect) {
            this.router.navigate(['app/jobsite', jobsite.jobsiteId]);
        }
    }
    /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    selectCustomer(customer, redirect = true) {
        /** @type {?} */
        const currentCustomer = this.customerSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentCustomer !== customer) {
            this.customerSubject.next(customer);
        }
        // If its not requesting an order directly
        if (redirect) {
            this.selectJobsite(null);
            this.router.navigate(['app/client-detail']);
        }
    }
    /**
     * @param {?} customers
     * @return {?}
     */
    setCustomers(customers) {
        this.customersSubject.next(customers);
    }
    /**
     * @return {?}
     */
    getJobsiteSelected() {
        return this.jobsite$;
    }
    /**
     * @return {?}
     */
    getCustomerSelected() {
        return this.customer$;
    }
    /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    selectCustomerByCode(code, redirect = false) {
        for (const customer of this.customersSubject.getValue()) {
            if (customer.customerCode === code) {
                this.selectCustomer(customer, redirect);
            }
        }
    }
    /**
     * @return {?}
     */
    currentCustomer() {
        return this.customerSubject.getValue();
    }
    /**
     * @return {?}
     */
    currentJobsite() {
        return this.jobsiteSubject.getValue();
    }
}
SidebarEvents.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SidebarEvents.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.jobsiteSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.customerSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.customersSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.jobsite$;
    /** @type {?} */
    SidebarEvents.prototype.customer$;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5ldmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2V2ZW50cy12Ny8iLCJzb3VyY2VzIjpbImxpYi9zaWRlYmFyLmV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBTXZDLE1BQU0sT0FBTyxhQUFhOzs7O0lBVXRCLFlBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFROztRQVIxQixtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFhLElBQUksQ0FBQyxDQUFDO1FBQ3ZELG9CQUFlLEdBQUcsSUFBSSxlQUFlLENBQWMsSUFBSSxDQUFDLENBQUM7UUFDekQscUJBQWdCLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7O1FBRzdDLGFBQVEsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3RELGNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxDQUFDO0lBRVYsQ0FBQzs7Ozs7OztJQUV2QyxhQUFhLENBQUMsT0FBbUIsRUFBRSxRQUFRLEdBQUcsS0FBSyxFQUFFLElBQUksR0FBRyxLQUFLOztjQUN2RCxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7UUFDckQsc0RBQXNEO1FBQ3RELElBQUksY0FBYyxLQUFLLE9BQU8sRUFBRTtZQUM1QixJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNQLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3JDO1NBQ0o7UUFFRCxJQUFJLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDNUQ7SUFDTCxDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsUUFBcUIsRUFBRSxRQUFRLEdBQUcsSUFBSTs7Y0FDM0MsZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFO1FBRXZELHNEQUFzRDtRQUN0RCxJQUFJLGVBQWUsS0FBSyxRQUFRLEVBQUU7WUFDOUIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7UUFFRCwwQ0FBMEM7UUFDMUMsSUFBSSxRQUFRLEVBQUU7WUFDVixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1NBQy9DO0lBQ0wsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsU0FBUztRQUNsQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7Ozs7SUFFRCxrQkFBa0I7UUFDZCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7SUFDekIsQ0FBQzs7OztJQUVELG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFFRCxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUs7UUFDdkMsS0FBSyxNQUFNLFFBQVEsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDckQsSUFBSSxRQUFRLENBQUMsWUFBWSxLQUFLLElBQUksRUFBRTtnQkFDaEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7YUFDM0M7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzFDLENBQUM7OztZQXBFSixVQUFVOzs7O1lBUEYsTUFBTTs7Ozs7OztJQVVYLHVDQUErRDs7Ozs7SUFDL0Qsd0NBQWlFOzs7OztJQUNqRSx5Q0FBcUQ7Ozs7O0lBR3JELGlDQUFzRDs7SUFDdEQsa0NBQWdEOzs7OztJQUVwQywrQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbi8vIE1vZGVsc1xuaW1wb3J0IEpvYnNpdGVEVE8gZnJvbSAnQGNlbWV4LWNvcmUvdHlwZXMtdjEvZGlzdC9qb2JzaXRlRFRPJztcbmltcG9ydCBDdXN0b21lckRUTyBmcm9tICdAY2VtZXgtY29yZS90eXBlcy12MS9kaXN0L2N1c3RvbWVyRFRPJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNpZGViYXJFdmVudHMge1xuICAgIC8vIE9ic2VydmFibGUgaXRlbXMgc291cmNlc1xuICAgIHByaXZhdGUgam9ic2l0ZVN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEpvYnNpdGVEVE8+KG51bGwpO1xuICAgIHByaXZhdGUgY3VzdG9tZXJTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxDdXN0b21lckRUTz4obnVsbCk7XG4gICAgcHJpdmF0ZSBjdXN0b21lcnNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcblxuICAgIC8vIE9ic2VydmFibGUgaXRlbXMgc3RyZWFtc1xuICAgIHByaXZhdGUgam9ic2l0ZSQgPSB0aGlzLmpvYnNpdGVTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICAgIGN1c3RvbWVyJCA9IHRoaXMuY3VzdG9tZXJTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikgeyB9XG5cbiAgICBzZWxlY3RKb2JzaXRlKGpvYnNpdGU6IEpvYnNpdGVEVE8sIHJlZGlyZWN0ID0gZmFsc2UsIGxvY2sgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBjdXJyZW50Sm9ic2l0ZSA9IHRoaXMuam9ic2l0ZVN1YmplY3QuZ2V0VmFsdWUoKTtcbiAgICAgICAgLy8gRmlyZSBvbmx5IGlmIGN1c3RvbWVyIGRpZmZlcnMgZnJvbSB0aGUgc2VsZWN0ZWQgb25lXG4gICAgICAgIGlmIChjdXJyZW50Sm9ic2l0ZSAhPT0gam9ic2l0ZSkge1xuICAgICAgICAgICAgaWYgKCFsb2NrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qb2JzaXRlU3ViamVjdC5uZXh0KGpvYnNpdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGpvYnNpdGUgJiYgcmVkaXJlY3QpIHtcbiAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnYXBwL2pvYnNpdGUnLCBqb2JzaXRlLmpvYnNpdGVJZF0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0Q3VzdG9tZXIoY3VzdG9tZXI6IEN1c3RvbWVyRFRPLCByZWRpcmVjdCA9IHRydWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudEN1c3RvbWVyID0gdGhpcy5jdXN0b21lclN1YmplY3QuZ2V0VmFsdWUoKTtcblxuICAgICAgICAvLyBGaXJlIG9ubHkgaWYgY3VzdG9tZXIgZGlmZmVycyBmcm9tIHRoZSBzZWxlY3RlZCBvbmVcbiAgICAgICAgaWYgKGN1cnJlbnRDdXN0b21lciAhPT0gY3VzdG9tZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tZXJTdWJqZWN0Lm5leHQoY3VzdG9tZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgaXRzIG5vdCByZXF1ZXN0aW5nIGFuIG9yZGVyIGRpcmVjdGx5XG4gICAgICAgIGlmIChyZWRpcmVjdCkge1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RKb2JzaXRlKG51bGwpO1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydhcHAvY2xpZW50LWRldGFpbCddKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEN1c3RvbWVycyhjdXN0b21lcnMpIHtcbiAgICAgICAgdGhpcy5jdXN0b21lcnNTdWJqZWN0Lm5leHQoY3VzdG9tZXJzKTtcbiAgICB9XG5cbiAgICBnZXRKb2JzaXRlU2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpvYnNpdGUkO1xuICAgIH1cblxuICAgIGdldEN1c3RvbWVyU2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbWVyJDtcbiAgICB9XG5cbiAgICBzZWxlY3RDdXN0b21lckJ5Q29kZShjb2RlLCByZWRpcmVjdCA9IGZhbHNlKSB7XG4gICAgICAgIGZvciAoY29uc3QgY3VzdG9tZXIgb2YgdGhpcy5jdXN0b21lcnNTdWJqZWN0LmdldFZhbHVlKCkpIHtcbiAgICAgICAgICAgIGlmIChjdXN0b21lci5jdXN0b21lckNvZGUgPT09IGNvZGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEN1c3RvbWVyKGN1c3RvbWVyLCByZWRpcmVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjdXJyZW50Q3VzdG9tZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbWVyU3ViamVjdC5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIGN1cnJlbnRKb2JzaXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qb2JzaXRlU3ViamVjdC5nZXRWYWx1ZSgpO1xuICAgIH1cbn1cbiJdfQ==