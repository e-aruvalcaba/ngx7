import { filter, map } from 'rxjs/operators';
import { __values } from 'tslib';
import { Router } from '@angular/router';
import { Injectable } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Broadcaster = /** @class */ (function () {
    function Broadcaster() {
        if (Broadcaster._eventBus == null || Broadcaster._eventBus === undefined) {
            Broadcaster._eventBus = new Subject();
        }
    }
    /**
     * @param {?} key
     * @param {?=} data
     * @return {?}
     */
    Broadcaster.prototype.broadcast = /**
     * @param {?} key
     * @param {?=} data
     * @return {?}
     */
    function (key, data) {
        Broadcaster._eventBus.next({ key: key, data: data });
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    Broadcaster.prototype.on = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var result = Broadcaster._eventBus.asObservable()
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return event.key === key;
        })), map((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return (/** @type {?} */ (event.data)); })));
        return result;
    };
    Broadcaster.CHANGE_SCREEN_HOME = 'change_screen';
    Broadcaster.DCM_APP_LOGOUT = 'dcm_app_logout_event';
    Broadcaster.DCM_LANGUAGE_CHANGE = 'dcm_language_change_event';
    Broadcaster.DCM_LANGUAGE_FETCHED = 'dcm_language_fetched_event';
    Broadcaster.DCM_LEGAL_ENTITY_CHANGE = 'dcm_legal_entity_change_event';
    Broadcaster.DCM_LANGUAGE_SELECTION = 'dcm_language_selection_event';
    Broadcaster._eventBus = null;
    Broadcaster.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    Broadcaster.ctorParameters = function () { return []; };
    return Broadcaster;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CalendarEvents = /** @class */ (function () {
    function CalendarEvents() {
        this.datesSubject = new BehaviorSubject({
            start: this.moment(),
            end: this.moment()
        });
        // Observable items streams
        this.dates$ = this.datesSubject.asObservable();
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    CalendarEvents.prototype.setDates = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        ((/** @type {?} */ (window))).localStorage.setItem('dates', JSON.stringify(dates));
        /** @type {?} */
        var currentDates = this.getCurrentValue();
        if (dates.start.diff(currentDates.start, 'days') !== 0 || dates.end.diff(currentDates.end, 'days') !== 0) {
            this.datesSubject.next(dates);
        }
    };
    /**
     * @return {?}
     */
    CalendarEvents.prototype.getDates = /**
     * @return {?}
     */
    function () {
        return this.dates$;
    };
    /**
     * @return {?}
     */
    CalendarEvents.prototype.getCurrentValue = /**
     * @return {?}
     */
    function () {
        return this.datesSubject.getValue();
    };
    CalendarEvents.decorators = [
        { type: Injectable }
    ];
    return CalendarEvents;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var OrderEvents = /** @class */ (function () {
    function OrderEvents() {
        // Observable items sources
        this.orderSelectedSubject = new BehaviorSubject(null);
        // Observable items streams
        this.order$ = this.orderSelectedSubject.asObservable();
    }
    /**
     * @param {?} order
     * @return {?}
     */
    OrderEvents.prototype.selectOrder = /**
     * @param {?} order
     * @return {?}
     */
    function (order) {
        /** @type {?} */
        var currentOrder = this.orderSelectedSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentOrder !== order) {
            this.orderSelectedSubject.next(order);
        }
    };
    /**
     * @return {?}
     */
    OrderEvents.prototype.getOrderSelected = /**
     * @return {?}
     */
    function () {
        return this.order$;
    };
    /**
     * @return {?}
     */
    OrderEvents.prototype.currentOrderSelected = /**
     * @return {?}
     */
    function () {
        return this.orderSelectedSubject.getValue();
    };
    OrderEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OrderEvents.ctorParameters = function () { return []; };
    return OrderEvents;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SidebarEvents = /** @class */ (function () {
    function SidebarEvents(router) {
        this.router = router;
        // Observable items sources
        this.jobsiteSubject = new BehaviorSubject(null);
        this.customerSubject = new BehaviorSubject(null);
        this.customersSubject = new BehaviorSubject(null);
        // Observable items streams
        this.jobsite$ = this.jobsiteSubject.asObservable();
        this.customer$ = this.customerSubject.asObservable();
    }
    /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    SidebarEvents.prototype.selectJobsite = /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    function (jobsite, redirect, lock) {
        if (redirect === void 0) { redirect = false; }
        if (lock === void 0) { lock = false; }
        /** @type {?} */
        var currentJobsite = this.jobsiteSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentJobsite !== jobsite) {
            if (!lock) {
                this.jobsiteSubject.next(jobsite);
            }
        }
        if (jobsite && redirect) {
            this.router.navigate(['app/jobsite', jobsite.jobsiteId]);
        }
    };
    /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    SidebarEvents.prototype.selectCustomer = /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    function (customer, redirect) {
        if (redirect === void 0) { redirect = true; }
        /** @type {?} */
        var currentCustomer = this.customerSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentCustomer !== customer) {
            this.customerSubject.next(customer);
        }
        // If its not requesting an order directly
        if (redirect) {
            this.selectJobsite(null);
            this.router.navigate(['app/client-detail']);
        }
    };
    /**
     * @param {?} customers
     * @return {?}
     */
    SidebarEvents.prototype.setCustomers = /**
     * @param {?} customers
     * @return {?}
     */
    function (customers) {
        this.customersSubject.next(customers);
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.getJobsiteSelected = /**
     * @return {?}
     */
    function () {
        return this.jobsite$;
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.getCustomerSelected = /**
     * @return {?}
     */
    function () {
        return this.customer$;
    };
    /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    SidebarEvents.prototype.selectCustomerByCode = /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    function (code, redirect) {
        if (redirect === void 0) { redirect = false; }
        var e_1, _a;
        try {
            for (var _b = __values(this.customersSubject.getValue()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var customer = _c.value;
                if (customer.customerCode === code) {
                    this.selectCustomer(customer, redirect);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.currentCustomer = /**
     * @return {?}
     */
    function () {
        return this.customerSubject.getValue();
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.currentJobsite = /**
     * @return {?}
     */
    function () {
        return this.jobsiteSubject.getValue();
    };
    SidebarEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SidebarEvents.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return SidebarEvents;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TruckEvents = /** @class */ (function () {
    function TruckEvents() {
        // Observable items sources
        this.selectedTruckSubject = new BehaviorSubject(null);
    }
    /**
     * @param {?} truck
     * @return {?}
     */
    TruckEvents.prototype.selectTruck = /**
     * @param {?} truck
     * @return {?}
     */
    function (truck) {
        /** @type {?} */
        var currentTruck = this.truckValue();
        // Fire only if selected truck differs from the previous one
        if (currentTruck !== truck) {
            this.selectedTruckSubject.next(truck);
        }
    };
    /**
     * @return {?}
     */
    TruckEvents.prototype.selectedTruck = /**
     * @return {?}
     */
    function () {
        return this.selectedTruckSubject.asObservable();
    };
    /**
     * @return {?}
     */
    TruckEvents.prototype.truckValue = /**
     * @return {?}
     */
    function () {
        return this.selectedTruckSubject.getValue();
    };
    TruckEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TruckEvents.ctorParameters = function () { return []; };
    return TruckEvents;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Broadcaster, CalendarEvents, OrderEvents, SidebarEvents, TruckEvents };

//# sourceMappingURL=cemex-core-events-v7.js.map