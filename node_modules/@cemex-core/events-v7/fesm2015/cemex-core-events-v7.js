import { filter, map } from 'rxjs/operators';
import { Router } from '@angular/router';
import { Injectable } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Broadcaster {
    constructor() {
        if (Broadcaster._eventBus == null || Broadcaster._eventBus === undefined) {
            Broadcaster._eventBus = new Subject();
        }
    }
    /**
     * @param {?} key
     * @param {?=} data
     * @return {?}
     */
    broadcast(key, data) {
        Broadcaster._eventBus.next({ key, data });
    }
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    on(key) {
        /** @type {?} */
        const result = Broadcaster._eventBus.asObservable()
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            return event.key === key;
        })), map((/**
         * @param {?} event
         * @return {?}
         */
        event => (/** @type {?} */ (event.data)))));
        return result;
    }
}
Broadcaster.CHANGE_SCREEN_HOME = 'change_screen';
Broadcaster.DCM_APP_LOGOUT = 'dcm_app_logout_event';
Broadcaster.DCM_LANGUAGE_CHANGE = 'dcm_language_change_event';
Broadcaster.DCM_LANGUAGE_FETCHED = 'dcm_language_fetched_event';
Broadcaster.DCM_LEGAL_ENTITY_CHANGE = 'dcm_legal_entity_change_event';
Broadcaster.DCM_LANGUAGE_SELECTION = 'dcm_language_selection_event';
Broadcaster._eventBus = null;
Broadcaster.decorators = [
    { type: Injectable }
];
/** @nocollapse */
Broadcaster.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CalendarEvents {
    constructor() {
        this.datesSubject = new BehaviorSubject({
            start: this.moment(),
            end: this.moment()
        });
        // Observable items streams
        this.dates$ = this.datesSubject.asObservable();
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    setDates(dates) {
        ((/** @type {?} */ (window))).localStorage.setItem('dates', JSON.stringify(dates));
        /** @type {?} */
        const currentDates = this.getCurrentValue();
        if (dates.start.diff(currentDates.start, 'days') !== 0 || dates.end.diff(currentDates.end, 'days') !== 0) {
            this.datesSubject.next(dates);
        }
    }
    /**
     * @return {?}
     */
    getDates() {
        return this.dates$;
    }
    /**
     * @return {?}
     */
    getCurrentValue() {
        return this.datesSubject.getValue();
    }
}
CalendarEvents.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OrderEvents {
    constructor() {
        // Observable items sources
        this.orderSelectedSubject = new BehaviorSubject(null);
        // Observable items streams
        this.order$ = this.orderSelectedSubject.asObservable();
    }
    /**
     * @param {?} order
     * @return {?}
     */
    selectOrder(order) {
        /** @type {?} */
        const currentOrder = this.orderSelectedSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentOrder !== order) {
            this.orderSelectedSubject.next(order);
        }
    }
    /**
     * @return {?}
     */
    getOrderSelected() {
        return this.order$;
    }
    /**
     * @return {?}
     */
    currentOrderSelected() {
        return this.orderSelectedSubject.getValue();
    }
}
OrderEvents.decorators = [
    { type: Injectable }
];
/** @nocollapse */
OrderEvents.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SidebarEvents {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        // Observable items sources
        this.jobsiteSubject = new BehaviorSubject(null);
        this.customerSubject = new BehaviorSubject(null);
        this.customersSubject = new BehaviorSubject(null);
        // Observable items streams
        this.jobsite$ = this.jobsiteSubject.asObservable();
        this.customer$ = this.customerSubject.asObservable();
    }
    /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    selectJobsite(jobsite, redirect = false, lock = false) {
        /** @type {?} */
        const currentJobsite = this.jobsiteSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentJobsite !== jobsite) {
            if (!lock) {
                this.jobsiteSubject.next(jobsite);
            }
        }
        if (jobsite && redirect) {
            this.router.navigate(['app/jobsite', jobsite.jobsiteId]);
        }
    }
    /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    selectCustomer(customer, redirect = true) {
        /** @type {?} */
        const currentCustomer = this.customerSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentCustomer !== customer) {
            this.customerSubject.next(customer);
        }
        // If its not requesting an order directly
        if (redirect) {
            this.selectJobsite(null);
            this.router.navigate(['app/client-detail']);
        }
    }
    /**
     * @param {?} customers
     * @return {?}
     */
    setCustomers(customers) {
        this.customersSubject.next(customers);
    }
    /**
     * @return {?}
     */
    getJobsiteSelected() {
        return this.jobsite$;
    }
    /**
     * @return {?}
     */
    getCustomerSelected() {
        return this.customer$;
    }
    /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    selectCustomerByCode(code, redirect = false) {
        for (const customer of this.customersSubject.getValue()) {
            if (customer.customerCode === code) {
                this.selectCustomer(customer, redirect);
            }
        }
    }
    /**
     * @return {?}
     */
    currentCustomer() {
        return this.customerSubject.getValue();
    }
    /**
     * @return {?}
     */
    currentJobsite() {
        return this.jobsiteSubject.getValue();
    }
}
SidebarEvents.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SidebarEvents.ctorParameters = () => [
    { type: Router }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TruckEvents {
    constructor() {
        // Observable items sources
        this.selectedTruckSubject = new BehaviorSubject(null);
    }
    /**
     * @param {?} truck
     * @return {?}
     */
    selectTruck(truck) {
        /** @type {?} */
        const currentTruck = this.truckValue();
        // Fire only if selected truck differs from the previous one
        if (currentTruck !== truck) {
            this.selectedTruckSubject.next(truck);
        }
    }
    /**
     * @return {?}
     */
    selectedTruck() {
        return this.selectedTruckSubject.asObservable();
    }
    /**
     * @return {?}
     */
    truckValue() {
        return this.selectedTruckSubject.getValue();
    }
}
TruckEvents.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TruckEvents.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { Broadcaster, CalendarEvents, OrderEvents, SidebarEvents, TruckEvents };

//# sourceMappingURL=cemex-core-events-v7.js.map