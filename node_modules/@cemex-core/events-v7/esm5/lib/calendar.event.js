/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var CalendarEvents = /** @class */ (function () {
    function CalendarEvents() {
        this.datesSubject = new BehaviorSubject({
            start: this.moment(),
            end: this.moment()
        });
        // Observable items streams
        this.dates$ = this.datesSubject.asObservable();
    }
    /**
     * @param {?} dates
     * @return {?}
     */
    CalendarEvents.prototype.setDates = /**
     * @param {?} dates
     * @return {?}
     */
    function (dates) {
        ((/** @type {?} */ (window))).localStorage.setItem('dates', JSON.stringify(dates));
        /** @type {?} */
        var currentDates = this.getCurrentValue();
        if (dates.start.diff(currentDates.start, 'days') !== 0 || dates.end.diff(currentDates.end, 'days') !== 0) {
            this.datesSubject.next(dates);
        }
    };
    /**
     * @return {?}
     */
    CalendarEvents.prototype.getDates = /**
     * @return {?}
     */
    function () {
        return this.dates$;
    };
    /**
     * @return {?}
     */
    CalendarEvents.prototype.getCurrentValue = /**
     * @return {?}
     */
    function () {
        return this.datesSubject.getValue();
    };
    CalendarEvents.decorators = [
        { type: Injectable }
    ];
    return CalendarEvents;
}());
export { CalendarEvents };
if (false) {
    /** @type {?} */
    CalendarEvents.prototype.moment;
    /**
     * @type {?}
     * @private
     */
    CalendarEvents.prototype.datesSubject;
    /**
     * @type {?}
     * @private
     */
    CalendarEvents.prototype.dates$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9ldmVudHMtdjcvIiwic291cmNlcyI6WyJsaWIvY2FsZW5kYXIuZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QztJQUFBO1FBSVksaUJBQVksR0FBRyxJQUFJLGVBQWUsQ0FBTTtZQUM1QyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNwQixHQUFHLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRTtTQUNyQixDQUFDLENBQUM7O1FBR0ssV0FBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFpQnRELENBQUM7Ozs7O0lBZkcsaUNBQVE7Ozs7SUFBUixVQUFTLEtBQVU7UUFDZixDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDOztZQUM3RCxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsRUFBRTtRQUMzQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3RHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQzs7OztJQUVELGlDQUFROzs7SUFBUjtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsd0NBQWU7OztJQUFmO1FBQ0ksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3hDLENBQUM7O2dCQTFCSixVQUFVOztJQTJCWCxxQkFBQztDQUFBLEFBM0JELElBMkJDO1NBMUJZLGNBQWM7OztJQUV2QixnQ0FBbUI7Ozs7O0lBQ25CLHNDQUdHOzs7OztJQUdILGdDQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWxlbmRhckV2ZW50cyB7XG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzb3VyY2VzXG4gICAgcHVibGljIG1vbWVudDogYW55O1xuICAgIHByaXZhdGUgZGF0ZXNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KHtcbiAgICAgICAgc3RhcnQ6IHRoaXMubW9tZW50KCksXG4gICAgICAgIGVuZDogdGhpcy5tb21lbnQoKVxuICAgIH0pO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzdHJlYW1zXG4gICAgcHJpdmF0ZSBkYXRlcyQgPSB0aGlzLmRhdGVzU3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICAgIHNldERhdGVzKGRhdGVzOiBhbnkpIHtcbiAgICAgICAgKDxhbnk+d2luZG93KS5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnZGF0ZXMnLCBKU09OLnN0cmluZ2lmeShkYXRlcykpO1xuICAgICAgICBjb25zdCBjdXJyZW50RGF0ZXMgPSB0aGlzLmdldEN1cnJlbnRWYWx1ZSgpO1xuICAgICAgICBpZiAoZGF0ZXMuc3RhcnQuZGlmZihjdXJyZW50RGF0ZXMuc3RhcnQsICdkYXlzJykgIT09IDAgfHwgZGF0ZXMuZW5kLmRpZmYoY3VycmVudERhdGVzLmVuZCwgJ2RheXMnKSAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kYXRlc1N1YmplY3QubmV4dChkYXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXREYXRlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZXMkO1xuICAgIH1cblxuICAgIGdldEN1cnJlbnRWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0ZXNTdWJqZWN0LmdldFZhbHVlKCk7XG4gICAgfVxufVxuIl19