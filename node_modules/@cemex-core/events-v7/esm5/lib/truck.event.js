/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var TruckEvents = /** @class */ (function () {
    function TruckEvents() {
        // Observable items sources
        this.selectedTruckSubject = new BehaviorSubject(null);
    }
    /**
     * @param {?} truck
     * @return {?}
     */
    TruckEvents.prototype.selectTruck = /**
     * @param {?} truck
     * @return {?}
     */
    function (truck) {
        /** @type {?} */
        var currentTruck = this.truckValue();
        // Fire only if selected truck differs from the previous one
        if (currentTruck !== truck) {
            this.selectedTruckSubject.next(truck);
        }
    };
    /**
     * @return {?}
     */
    TruckEvents.prototype.selectedTruck = /**
     * @return {?}
     */
    function () {
        return this.selectedTruckSubject.asObservable();
    };
    /**
     * @return {?}
     */
    TruckEvents.prototype.truckValue = /**
     * @return {?}
     */
    function () {
        return this.selectedTruckSubject.getValue();
    };
    TruckEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TruckEvents.ctorParameters = function () { return []; };
    return TruckEvents;
}());
export { TruckEvents };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TruckEvents.prototype.selectedTruckSubject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJ1Y2suZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9ldmVudHMtdjcvIiwic291cmNlcyI6WyJsaWIvdHJ1Y2suZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QztJQUtJOztRQUZRLHlCQUFvQixHQUFHLElBQUksZUFBZSxDQUFNLElBQUksQ0FBQyxDQUFDO0lBRTlDLENBQUM7Ozs7O0lBRWpCLGlDQUFXOzs7O0lBQVgsVUFBWSxLQUFVOztZQUNaLFlBQVksR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFO1FBRXRDLDREQUE0RDtRQUM1RCxJQUFJLFlBQVksS0FBSyxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7Ozs7SUFFRCxtQ0FBYTs7O0lBQWI7UUFDSSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNwRCxDQUFDOzs7O0lBRUQsZ0NBQVU7OztJQUFWO1FBQ0ksT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEQsQ0FBQzs7Z0JBdEJKLFVBQVU7Ozs7SUF1Qlgsa0JBQUM7Q0FBQSxBQXZCRCxJQXVCQztTQXRCWSxXQUFXOzs7Ozs7SUFFcEIsMkNBQThEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFRydWNrRXZlbnRzIHtcbiAgICAvLyBPYnNlcnZhYmxlIGl0ZW1zIHNvdXJjZXNcbiAgICBwcml2YXRlIHNlbGVjdGVkVHJ1Y2tTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KG51bGwpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHNlbGVjdFRydWNrKHRydWNrOiBhbnkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFRydWNrID0gdGhpcy50cnVja1ZhbHVlKCk7XG5cbiAgICAgICAgLy8gRmlyZSBvbmx5IGlmIHNlbGVjdGVkIHRydWNrIGRpZmZlcnMgZnJvbSB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIGlmIChjdXJyZW50VHJ1Y2sgIT09IHRydWNrKSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVHJ1Y2tTdWJqZWN0Lm5leHQodHJ1Y2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VsZWN0ZWRUcnVjaygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRUcnVja1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgfVxuXG4gICAgdHJ1Y2tWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRUcnVja1N1YmplY3QuZ2V0VmFsdWUoKTtcbiAgICB9XG59XG4iXX0=