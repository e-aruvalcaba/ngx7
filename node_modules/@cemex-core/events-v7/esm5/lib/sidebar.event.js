/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
var SidebarEvents = /** @class */ (function () {
    function SidebarEvents(router) {
        this.router = router;
        // Observable items sources
        this.jobsiteSubject = new BehaviorSubject(null);
        this.customerSubject = new BehaviorSubject(null);
        this.customersSubject = new BehaviorSubject(null);
        // Observable items streams
        this.jobsite$ = this.jobsiteSubject.asObservable();
        this.customer$ = this.customerSubject.asObservable();
    }
    /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    SidebarEvents.prototype.selectJobsite = /**
     * @param {?} jobsite
     * @param {?=} redirect
     * @param {?=} lock
     * @return {?}
     */
    function (jobsite, redirect, lock) {
        if (redirect === void 0) { redirect = false; }
        if (lock === void 0) { lock = false; }
        /** @type {?} */
        var currentJobsite = this.jobsiteSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentJobsite !== jobsite) {
            if (!lock) {
                this.jobsiteSubject.next(jobsite);
            }
        }
        if (jobsite && redirect) {
            this.router.navigate(['app/jobsite', jobsite.jobsiteId]);
        }
    };
    /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    SidebarEvents.prototype.selectCustomer = /**
     * @param {?} customer
     * @param {?=} redirect
     * @return {?}
     */
    function (customer, redirect) {
        if (redirect === void 0) { redirect = true; }
        /** @type {?} */
        var currentCustomer = this.customerSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentCustomer !== customer) {
            this.customerSubject.next(customer);
        }
        // If its not requesting an order directly
        if (redirect) {
            this.selectJobsite(null);
            this.router.navigate(['app/client-detail']);
        }
    };
    /**
     * @param {?} customers
     * @return {?}
     */
    SidebarEvents.prototype.setCustomers = /**
     * @param {?} customers
     * @return {?}
     */
    function (customers) {
        this.customersSubject.next(customers);
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.getJobsiteSelected = /**
     * @return {?}
     */
    function () {
        return this.jobsite$;
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.getCustomerSelected = /**
     * @return {?}
     */
    function () {
        return this.customer$;
    };
    /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    SidebarEvents.prototype.selectCustomerByCode = /**
     * @param {?} code
     * @param {?=} redirect
     * @return {?}
     */
    function (code, redirect) {
        if (redirect === void 0) { redirect = false; }
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(this.customersSubject.getValue()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var customer = _c.value;
                if (customer.customerCode === code) {
                    this.selectCustomer(customer, redirect);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.currentCustomer = /**
     * @return {?}
     */
    function () {
        return this.customerSubject.getValue();
    };
    /**
     * @return {?}
     */
    SidebarEvents.prototype.currentJobsite = /**
     * @return {?}
     */
    function () {
        return this.jobsiteSubject.getValue();
    };
    SidebarEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SidebarEvents.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return SidebarEvents;
}());
export { SidebarEvents };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.jobsiteSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.customerSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.customersSubject;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.jobsite$;
    /** @type {?} */
    SidebarEvents.prototype.customer$;
    /**
     * @type {?}
     * @private
     */
    SidebarEvents.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lkZWJhci5ldmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2V2ZW50cy12Ny8iLCJzb3VyY2VzIjpbImxpYi9zaWRlYmFyLmV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFekMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUt2QztJQVdJLHVCQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTs7UUFSMUIsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBYSxJQUFJLENBQUMsQ0FBQztRQUN2RCxvQkFBZSxHQUFHLElBQUksZUFBZSxDQUFjLElBQUksQ0FBQyxDQUFDO1FBQ3pELHFCQUFnQixHQUFHLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDOztRQUc3QyxhQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN0RCxjQUFTLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUVWLENBQUM7Ozs7Ozs7SUFFdkMscUNBQWE7Ozs7OztJQUFiLFVBQWMsT0FBbUIsRUFBRSxRQUFnQixFQUFFLElBQVk7UUFBOUIseUJBQUEsRUFBQSxnQkFBZ0I7UUFBRSxxQkFBQSxFQUFBLFlBQVk7O1lBQ3ZELGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRTtRQUNyRCxzREFBc0Q7UUFDdEQsSUFBSSxjQUFjLEtBQUssT0FBTyxFQUFFO1lBQzVCLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDckM7U0FDSjtRQUVELElBQUksT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUNyQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztTQUM1RDtJQUNMLENBQUM7Ozs7OztJQUVELHNDQUFjOzs7OztJQUFkLFVBQWUsUUFBcUIsRUFBRSxRQUFlO1FBQWYseUJBQUEsRUFBQSxlQUFlOztZQUMzQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUU7UUFFdkQsc0RBQXNEO1FBQ3RELElBQUksZUFBZSxLQUFLLFFBQVEsRUFBRTtZQUM5QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUN2QztRQUVELDBDQUEwQztRQUMxQyxJQUFJLFFBQVEsRUFBRTtZQUNWLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7U0FDL0M7SUFDTCxDQUFDOzs7OztJQUVELG9DQUFZOzs7O0lBQVosVUFBYSxTQUFTO1FBQ2xCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELDBDQUFrQjs7O0lBQWxCO1FBQ0ksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFFRCwyQ0FBbUI7OztJQUFuQjtRQUNJLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDOzs7Ozs7SUFFRCw0Q0FBb0I7Ozs7O0lBQXBCLFVBQXFCLElBQUksRUFBRSxRQUFnQjtRQUFoQix5QkFBQSxFQUFBLGdCQUFnQjs7O1lBQ3ZDLEtBQXVCLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLENBQUEsZ0JBQUEsNEJBQUU7Z0JBQXBELElBQU0sUUFBUSxXQUFBO2dCQUNmLElBQUksUUFBUSxDQUFDLFlBQVksS0FBSyxJQUFJLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUMzQzthQUNKOzs7Ozs7Ozs7SUFDTCxDQUFDOzs7O0lBRUQsdUNBQWU7OztJQUFmO1FBQ0ksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzNDLENBQUM7Ozs7SUFFRCxzQ0FBYzs7O0lBQWQ7UUFDSSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDMUMsQ0FBQzs7Z0JBcEVKLFVBQVU7Ozs7Z0JBUEYsTUFBTTs7SUE0RWYsb0JBQUM7Q0FBQSxBQXJFRCxJQXFFQztTQXBFWSxhQUFhOzs7Ozs7SUFFdEIsdUNBQStEOzs7OztJQUMvRCx3Q0FBaUU7Ozs7O0lBQ2pFLHlDQUFxRDs7Ozs7SUFHckQsaUNBQXNEOztJQUN0RCxrQ0FBZ0Q7Ozs7O0lBRXBDLCtCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuLy8gTW9kZWxzXG5pbXBvcnQgSm9ic2l0ZURUTyBmcm9tICdAY2VtZXgtY29yZS90eXBlcy12MS9kaXN0L2pvYnNpdGVEVE8nO1xuaW1wb3J0IEN1c3RvbWVyRFRPIGZyb20gJ0BjZW1leC1jb3JlL3R5cGVzLXYxL2Rpc3QvY3VzdG9tZXJEVE8nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU2lkZWJhckV2ZW50cyB7XG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzb3VyY2VzXG4gICAgcHJpdmF0ZSBqb2JzaXRlU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Sm9ic2l0ZURUTz4obnVsbCk7XG4gICAgcHJpdmF0ZSBjdXN0b21lclN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEN1c3RvbWVyRFRPPihudWxsKTtcbiAgICBwcml2YXRlIGN1c3RvbWVyc1N1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG51bGwpO1xuXG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzdHJlYW1zXG4gICAgcHJpdmF0ZSBqb2JzaXRlJCA9IHRoaXMuam9ic2l0ZVN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG4gICAgY3VzdG9tZXIkID0gdGhpcy5jdXN0b21lclN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7IH1cblxuICAgIHNlbGVjdEpvYnNpdGUoam9ic2l0ZTogSm9ic2l0ZURUTywgcmVkaXJlY3QgPSBmYWxzZSwgbG9jayA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRKb2JzaXRlID0gdGhpcy5qb2JzaXRlU3ViamVjdC5nZXRWYWx1ZSgpO1xuICAgICAgICAvLyBGaXJlIG9ubHkgaWYgY3VzdG9tZXIgZGlmZmVycyBmcm9tIHRoZSBzZWxlY3RlZCBvbmVcbiAgICAgICAgaWYgKGN1cnJlbnRKb2JzaXRlICE9PSBqb2JzaXRlKSB7XG4gICAgICAgICAgICBpZiAoIWxvY2spIHtcbiAgICAgICAgICAgICAgICB0aGlzLmpvYnNpdGVTdWJqZWN0Lm5leHQoam9ic2l0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoam9ic2l0ZSAmJiByZWRpcmVjdCkge1xuICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydhcHAvam9ic2l0ZScsIGpvYnNpdGUuam9ic2l0ZUlkXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZWxlY3RDdXN0b21lcihjdXN0b21lcjogQ3VzdG9tZXJEVE8sIHJlZGlyZWN0ID0gdHJ1ZSkge1xuICAgICAgICBjb25zdCBjdXJyZW50Q3VzdG9tZXIgPSB0aGlzLmN1c3RvbWVyU3ViamVjdC5nZXRWYWx1ZSgpO1xuXG4gICAgICAgIC8vIEZpcmUgb25seSBpZiBjdXN0b21lciBkaWZmZXJzIGZyb20gdGhlIHNlbGVjdGVkIG9uZVxuICAgICAgICBpZiAoY3VycmVudEN1c3RvbWVyICE9PSBjdXN0b21lcikge1xuICAgICAgICAgICAgdGhpcy5jdXN0b21lclN1YmplY3QubmV4dChjdXN0b21lcik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBpdHMgbm90IHJlcXVlc3RpbmcgYW4gb3JkZXIgZGlyZWN0bHlcbiAgICAgICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdEpvYnNpdGUobnVsbCk7XG4gICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ2FwcC9jbGllbnQtZGV0YWlsJ10pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q3VzdG9tZXJzKGN1c3RvbWVycykge1xuICAgICAgICB0aGlzLmN1c3RvbWVyc1N1YmplY3QubmV4dChjdXN0b21lcnMpO1xuICAgIH1cblxuICAgIGdldEpvYnNpdGVTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuam9ic2l0ZSQ7XG4gICAgfVxuXG4gICAgZ2V0Q3VzdG9tZXJTZWxlY3RlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tZXIkO1xuICAgIH1cblxuICAgIHNlbGVjdEN1c3RvbWVyQnlDb2RlKGNvZGUsIHJlZGlyZWN0ID0gZmFsc2UpIHtcbiAgICAgICAgZm9yIChjb25zdCBjdXN0b21lciBvZiB0aGlzLmN1c3RvbWVyc1N1YmplY3QuZ2V0VmFsdWUoKSkge1xuICAgICAgICAgICAgaWYgKGN1c3RvbWVyLmN1c3RvbWVyQ29kZSA9PT0gY29kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Q3VzdG9tZXIoY3VzdG9tZXIsIHJlZGlyZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGN1cnJlbnRDdXN0b21lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tZXJTdWJqZWN0LmdldFZhbHVlKCk7XG4gICAgfVxuXG4gICAgY3VycmVudEpvYnNpdGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmpvYnNpdGVTdWJqZWN0LmdldFZhbHVlKCk7XG4gICAgfVxufVxuIl19