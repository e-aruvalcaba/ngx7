/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var OrderEvents = /** @class */ (function () {
    function OrderEvents() {
        // Observable items sources
        this.orderSelectedSubject = new BehaviorSubject(null);
        // Observable items streams
        this.order$ = this.orderSelectedSubject.asObservable();
    }
    /**
     * @param {?} order
     * @return {?}
     */
    OrderEvents.prototype.selectOrder = /**
     * @param {?} order
     * @return {?}
     */
    function (order) {
        /** @type {?} */
        var currentOrder = this.orderSelectedSubject.getValue();
        // Fire only if customer differs from the selected one
        if (currentOrder !== order) {
            this.orderSelectedSubject.next(order);
        }
    };
    /**
     * @return {?}
     */
    OrderEvents.prototype.getOrderSelected = /**
     * @return {?}
     */
    function () {
        return this.order$;
    };
    /**
     * @return {?}
     */
    OrderEvents.prototype.currentOrderSelected = /**
     * @return {?}
     */
    function () {
        return this.orderSelectedSubject.getValue();
    };
    OrderEvents.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    OrderEvents.ctorParameters = function () { return []; };
    return OrderEvents;
}());
export { OrderEvents };
if (false) {
    /**
     * @type {?}
     * @private
     */
    OrderEvents.prototype.orderSelectedSubject;
    /**
     * @type {?}
     * @private
     */
    OrderEvents.prototype.order$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXIuZXZlbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9ldmVudHMtdjcvIiwic291cmNlcyI6WyJsaWIvb3JkZXIuZXZlbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QztJQVFJOztRQUxRLHlCQUFvQixHQUFHLElBQUksZUFBZSxDQUFNLElBQUksQ0FBQyxDQUFDOztRQUd0RCxXQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBRTFDLENBQUM7Ozs7O0lBRWpCLGlDQUFXOzs7O0lBQVgsVUFBWSxLQUFVOztZQUNaLFlBQVksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFO1FBRXpELHNEQUFzRDtRQUN0RCxJQUFJLFlBQVksS0FBSyxLQUFLLEVBQUU7WUFDeEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7Ozs7SUFFRCxzQ0FBZ0I7OztJQUFoQjtRQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsMENBQW9COzs7SUFBcEI7UUFDSSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRCxDQUFDOztnQkF6QkosVUFBVTs7OztJQTBCWCxrQkFBQztDQUFBLEFBMUJELElBMEJDO1NBekJZLFdBQVc7Ozs7OztJQUVwQiwyQ0FBOEQ7Ozs7O0lBRzlELDZCQUEwRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBPcmRlckV2ZW50cyB7XG4gICAgLy8gT2JzZXJ2YWJsZSBpdGVtcyBzb3VyY2VzXG4gICAgcHJpdmF0ZSBvcmRlclNlbGVjdGVkU3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PihudWxsKTtcblxuICAgIC8vIE9ic2VydmFibGUgaXRlbXMgc3RyZWFtc1xuICAgIHByaXZhdGUgb3JkZXIkID0gdGhpcy5vcmRlclNlbGVjdGVkU3ViamVjdC5hc09ic2VydmFibGUoKTtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBzZWxlY3RPcmRlcihvcmRlcjogYW55KSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRPcmRlciA9IHRoaXMub3JkZXJTZWxlY3RlZFN1YmplY3QuZ2V0VmFsdWUoKTtcblxuICAgICAgICAvLyBGaXJlIG9ubHkgaWYgY3VzdG9tZXIgZGlmZmVycyBmcm9tIHRoZSBzZWxlY3RlZCBvbmVcbiAgICAgICAgaWYgKGN1cnJlbnRPcmRlciAhPT0gb3JkZXIpIHtcbiAgICAgICAgICAgIHRoaXMub3JkZXJTZWxlY3RlZFN1YmplY3QubmV4dChvcmRlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRPcmRlclNlbGVjdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vcmRlciQ7XG4gICAgfVxuXG4gICAgY3VycmVudE9yZGVyU2VsZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVyU2VsZWN0ZWRTdWJqZWN0LmdldFZhbHVlKCk7XG4gICAgfVxufVxuIl19