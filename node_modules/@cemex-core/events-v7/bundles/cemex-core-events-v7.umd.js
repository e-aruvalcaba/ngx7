(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('@angular/router'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@cemex-core/events-v7', ['exports', 'rxjs/operators', '@angular/router', '@angular/core', 'rxjs'], factory) :
    (factory((global['cemex-core'] = global['cemex-core'] || {}, global['cemex-core']['events-v7'] = {}),global.rxjs.operators,global.ng.router,global.ng.core,global.rxjs));
}(this, (function (exports,operators,router,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Broadcaster = /** @class */ (function () {
        function Broadcaster() {
            if (Broadcaster._eventBus == null || Broadcaster._eventBus === undefined) {
                Broadcaster._eventBus = new rxjs.Subject();
            }
        }
        /**
         * @param {?} key
         * @param {?=} data
         * @return {?}
         */
        Broadcaster.prototype.broadcast = /**
         * @param {?} key
         * @param {?=} data
         * @return {?}
         */
            function (key, data) {
                Broadcaster._eventBus.next({ key: key, data: data });
            };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        Broadcaster.prototype.on = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var result = Broadcaster._eventBus.asObservable()
                    .pipe(operators.filter(( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                    return event.key === key;
                })), operators.map(( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) { return ( /** @type {?} */(event.data)); })));
                return result;
            };
        Broadcaster.CHANGE_SCREEN_HOME = 'change_screen';
        Broadcaster.DCM_APP_LOGOUT = 'dcm_app_logout_event';
        Broadcaster.DCM_LANGUAGE_CHANGE = 'dcm_language_change_event';
        Broadcaster.DCM_LANGUAGE_FETCHED = 'dcm_language_fetched_event';
        Broadcaster.DCM_LEGAL_ENTITY_CHANGE = 'dcm_legal_entity_change_event';
        Broadcaster.DCM_LANGUAGE_SELECTION = 'dcm_language_selection_event';
        Broadcaster._eventBus = null;
        Broadcaster.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        Broadcaster.ctorParameters = function () { return []; };
        return Broadcaster;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarEvents = /** @class */ (function () {
        function CalendarEvents() {
            this.datesSubject = new rxjs.BehaviorSubject({
                start: this.moment(),
                end: this.moment()
            });
            // Observable items streams
            this.dates$ = this.datesSubject.asObservable();
        }
        /**
         * @param {?} dates
         * @return {?}
         */
        CalendarEvents.prototype.setDates = /**
         * @param {?} dates
         * @return {?}
         */
            function (dates) {
                (( /** @type {?} */(window))).localStorage.setItem('dates', JSON.stringify(dates));
                /** @type {?} */
                var currentDates = this.getCurrentValue();
                if (dates.start.diff(currentDates.start, 'days') !== 0 || dates.end.diff(currentDates.end, 'days') !== 0) {
                    this.datesSubject.next(dates);
                }
            };
        /**
         * @return {?}
         */
        CalendarEvents.prototype.getDates = /**
         * @return {?}
         */
            function () {
                return this.dates$;
            };
        /**
         * @return {?}
         */
        CalendarEvents.prototype.getCurrentValue = /**
         * @return {?}
         */
            function () {
                return this.datesSubject.getValue();
            };
        CalendarEvents.decorators = [
            { type: core.Injectable }
        ];
        return CalendarEvents;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var OrderEvents = /** @class */ (function () {
        function OrderEvents() {
            // Observable items sources
            this.orderSelectedSubject = new rxjs.BehaviorSubject(null);
            // Observable items streams
            this.order$ = this.orderSelectedSubject.asObservable();
        }
        /**
         * @param {?} order
         * @return {?}
         */
        OrderEvents.prototype.selectOrder = /**
         * @param {?} order
         * @return {?}
         */
            function (order) {
                /** @type {?} */
                var currentOrder = this.orderSelectedSubject.getValue();
                // Fire only if customer differs from the selected one
                if (currentOrder !== order) {
                    this.orderSelectedSubject.next(order);
                }
            };
        /**
         * @return {?}
         */
        OrderEvents.prototype.getOrderSelected = /**
         * @return {?}
         */
            function () {
                return this.order$;
            };
        /**
         * @return {?}
         */
        OrderEvents.prototype.currentOrderSelected = /**
         * @return {?}
         */
            function () {
                return this.orderSelectedSubject.getValue();
            };
        OrderEvents.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        OrderEvents.ctorParameters = function () { return []; };
        return OrderEvents;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SidebarEvents = /** @class */ (function () {
        function SidebarEvents(router$$1) {
            this.router = router$$1;
            // Observable items sources
            this.jobsiteSubject = new rxjs.BehaviorSubject(null);
            this.customerSubject = new rxjs.BehaviorSubject(null);
            this.customersSubject = new rxjs.BehaviorSubject(null);
            // Observable items streams
            this.jobsite$ = this.jobsiteSubject.asObservable();
            this.customer$ = this.customerSubject.asObservable();
        }
        /**
         * @param {?} jobsite
         * @param {?=} redirect
         * @param {?=} lock
         * @return {?}
         */
        SidebarEvents.prototype.selectJobsite = /**
         * @param {?} jobsite
         * @param {?=} redirect
         * @param {?=} lock
         * @return {?}
         */
            function (jobsite, redirect, lock) {
                if (redirect === void 0) {
                    redirect = false;
                }
                if (lock === void 0) {
                    lock = false;
                }
                /** @type {?} */
                var currentJobsite = this.jobsiteSubject.getValue();
                // Fire only if customer differs from the selected one
                if (currentJobsite !== jobsite) {
                    if (!lock) {
                        this.jobsiteSubject.next(jobsite);
                    }
                }
                if (jobsite && redirect) {
                    this.router.navigate(['app/jobsite', jobsite.jobsiteId]);
                }
            };
        /**
         * @param {?} customer
         * @param {?=} redirect
         * @return {?}
         */
        SidebarEvents.prototype.selectCustomer = /**
         * @param {?} customer
         * @param {?=} redirect
         * @return {?}
         */
            function (customer, redirect) {
                if (redirect === void 0) {
                    redirect = true;
                }
                /** @type {?} */
                var currentCustomer = this.customerSubject.getValue();
                // Fire only if customer differs from the selected one
                if (currentCustomer !== customer) {
                    this.customerSubject.next(customer);
                }
                // If its not requesting an order directly
                if (redirect) {
                    this.selectJobsite(null);
                    this.router.navigate(['app/client-detail']);
                }
            };
        /**
         * @param {?} customers
         * @return {?}
         */
        SidebarEvents.prototype.setCustomers = /**
         * @param {?} customers
         * @return {?}
         */
            function (customers) {
                this.customersSubject.next(customers);
            };
        /**
         * @return {?}
         */
        SidebarEvents.prototype.getJobsiteSelected = /**
         * @return {?}
         */
            function () {
                return this.jobsite$;
            };
        /**
         * @return {?}
         */
        SidebarEvents.prototype.getCustomerSelected = /**
         * @return {?}
         */
            function () {
                return this.customer$;
            };
        /**
         * @param {?} code
         * @param {?=} redirect
         * @return {?}
         */
        SidebarEvents.prototype.selectCustomerByCode = /**
         * @param {?} code
         * @param {?=} redirect
         * @return {?}
         */
            function (code, redirect) {
                if (redirect === void 0) {
                    redirect = false;
                }
                var e_1, _a;
                try {
                    for (var _b = __values(this.customersSubject.getValue()), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var customer = _c.value;
                        if (customer.customerCode === code) {
                            this.selectCustomer(customer, redirect);
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
            };
        /**
         * @return {?}
         */
        SidebarEvents.prototype.currentCustomer = /**
         * @return {?}
         */
            function () {
                return this.customerSubject.getValue();
            };
        /**
         * @return {?}
         */
        SidebarEvents.prototype.currentJobsite = /**
         * @return {?}
         */
            function () {
                return this.jobsiteSubject.getValue();
            };
        SidebarEvents.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SidebarEvents.ctorParameters = function () {
            return [
                { type: router.Router }
            ];
        };
        return SidebarEvents;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TruckEvents = /** @class */ (function () {
        function TruckEvents() {
            // Observable items sources
            this.selectedTruckSubject = new rxjs.BehaviorSubject(null);
        }
        /**
         * @param {?} truck
         * @return {?}
         */
        TruckEvents.prototype.selectTruck = /**
         * @param {?} truck
         * @return {?}
         */
            function (truck) {
                /** @type {?} */
                var currentTruck = this.truckValue();
                // Fire only if selected truck differs from the previous one
                if (currentTruck !== truck) {
                    this.selectedTruckSubject.next(truck);
                }
            };
        /**
         * @return {?}
         */
        TruckEvents.prototype.selectedTruck = /**
         * @return {?}
         */
            function () {
                return this.selectedTruckSubject.asObservable();
            };
        /**
         * @return {?}
         */
        TruckEvents.prototype.truckValue = /**
         * @return {?}
         */
            function () {
                return this.selectedTruckSubject.getValue();
            };
        TruckEvents.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TruckEvents.ctorParameters = function () { return []; };
        return TruckEvents;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.Broadcaster = Broadcaster;
    exports.CalendarEvents = CalendarEvents;
    exports.OrderEvents = OrderEvents;
    exports.SidebarEvents = SidebarEvents;
    exports.TruckEvents = TruckEvents;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=cemex-core-events-v7.umd.js.map