import { Response } from '@angular/http';
import { Observable } from 'rxjs';
import { Broadcaster } from '@cemex-core/events-v7';
import { IApplicationMenu, ICustomer, ILegalEntity, IUserProfile } from '@cemex-core/types-v2/dist/index.interface';
import { HttpCemex } from './http.service';
export declare class SessionService {
    protected http: HttpCemex;
    protected eventBroadcaster: Broadcaster;
    private authTokenVersion;
    static LOGIN_SUCCESS_EVENT: string;
    static LOGIN_FAIL_EVENT: string;
    static LOGIN_LOGOUT_EVENT: string;
    static AUTH_TOKEN_VERSION: string;
    private siteDomain;
    private _siteDomain;
    private _endpoint;
    private _menuApplication;
    private _currentLegalEntity;
    private _userProfile;
    private _beforeLogout;
    constructor(http: HttpCemex, eventBroadcaster: Broadcaster, authTokenVersion: string);
    readonly menuApplicationItems: Observable<IApplicationMenu[]>;
    setLegalEntity(value: ILegalEntity): void;
    readonly currentLegalEntity: Observable<ILegalEntity>;
    readonly isLoggedIn: boolean;
    logout(): Observable<{
        success: boolean;
        message: string;
    }>;
    login(user: string, password: string, generateCookie?: boolean, appName?: string, validateTempPassword?: boolean): Promise<any>;
    readonly userRegion: string;
    readonly userCountry: string;
    readonly userProfile: IUserProfile;
    getLegalEntities(fetch?: number, page?: number, legalEntityCode?: string): Observable<ILegalEntity[]>;
    setBeforeLogout(method: Observable<any>): void;
    getBeforeLogout(): Observable<any>;
    reloadAppMenuItems(): void;
    createCookie(name: string, value: string, days?: number): void;
    readCookie(name: string): string;
    clearCookie(name: any): void;
    setUserProfile(): void;
    clean(): void;
    generateUrlString(user: string, password: string, appName?: string): string;
    processDataFromLogin(data: any, generateCookie?: boolean): void;
    getDCMApplications(): Observable<IApplicationMenu[]>;
    convertJsonTo<T>(obj: string): T;
    readonly customer: ICustomer;
    handleError(error: Response | any): any;
    addQueryParams(endpoint: string, fetch?: number, page?: number, legalEntityCode?: string): string;
    logoutApp(): void;
    readonly userAuth: any;
    readonly userInfo: any;
    readonly userProfileV6: any;
    readonly userCustomer: any;
    readonly userApplications: any;
    readonly userRoles: any;
    encrypt(str: any): string;
    decrypt(str: any): any;
}
