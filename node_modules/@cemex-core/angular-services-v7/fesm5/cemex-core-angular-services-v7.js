import { Router } from '@angular/router';
import { __values, __awaiter, __generator } from 'tslib';
import { Headers, Http, RequestOptions, Response } from '@angular/http';
import { Observable, BehaviorSubject, throwError, Subject } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { SessionServiceConstants, EndpointsConstants } from '@cemex-core/constants-v2/dist';
import { Broadcaster } from '@cemex-core/events-v7';
import { Injectable, Inject, Optional, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ProjectSettings = /** @class */ (function () {
    function ProjectSettings() {
        /** @type {?} */
        var APP_KEYS = {
            API_ENV_KEY: 'API_ENV',
            API_HOST_KEY: 'API_HOST',
            API_ORG_KEY: 'API_ORG',
            APP_CODE_KEY: 'APP_CODE',
            CLIENT_ID_KEY: 'CLIENT_ID'
        };
        this._appCode = ((/** @type {?} */ (global)))[APP_KEYS.APP_CODE_KEY];
        this._clientId = ((/** @type {?} */ (global)))[APP_KEYS.CLIENT_ID_KEY];
        this._apiBasePath = ((/** @type {?} */ (global)))[APP_KEYS.API_HOST_KEY];
        this._apiOrg = ((/** @type {?} */ (global)))[APP_KEYS.API_ORG_KEY];
        this._apiEnv = ((/** @type {?} */ (global)))[APP_KEYS.API_ENV_KEY];
        if (this._apiBasePath === undefined) {
            console.warn('environment variable \'API_HOST\' is missing !!');
        }
    }
    Object.defineProperty(ProjectSettings.prototype, "appCode", {
        // ============================================================================================
        // Getters
        // ============================================================================================
        get: 
        // ============================================================================================
        // Getters
        // ============================================================================================
        /**
         * @return {?}
         */
        function () {
            return this._appCode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProjectSettings.prototype, "clientId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._clientId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProjectSettings.prototype, "apiBasePath", {
        get: /**
         * @return {?}
         */
        function () {
            return this._apiBasePath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProjectSettings.prototype, "apiOrg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._apiOrg;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProjectSettings.prototype, "apiEnv", {
        get: /**
         * @return {?}
         */
        function () {
            return this._apiEnv;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    ProjectSettings.prototype.generateEndpoint = /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    function (apiEndpoint) {
        /** @type {?} */
        var url = "" + this._apiBasePath + this._apiOrg + this._apiEnv + apiEndpoint;
        return url;
    };
    /**
     * @return {?}
     */
    ProjectSettings.prototype.getBaseOrgEnvPath = /**
     * @return {?}
     */
    function () {
        return this._apiBasePath + this._apiOrg + this._apiEnv;
    };
    /**
     * @param {?} newKeys
     * @return {?}
     */
    ProjectSettings.prototype.setAppKeys = /**
     * @param {?} newKeys
     * @return {?}
     */
    function (newKeys) {
        this._appCode = newKeys.APP_CODE;
        this._clientId = newKeys.CLIENT_ID;
        if (this._apiBasePath === undefined) {
            console.warn('environment variable \'API_HOST\' is missing !!');
        }
    };
    ProjectSettings.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ProjectSettings.ctorParameters = function () { return []; };
    return ProjectSettings;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HttpCemex = /** @class */ (function () {
    function HttpCemex(http, projectSettings) {
        this.http = http;
        this.projectSettings = projectSettings;
        this._validSettings = false;
        this._validSettings = this.validateProjectSettings();
    }
    /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    HttpCemex.prototype.generateEndpoint = /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    function (apiEndpoint) {
        return this.projectSettings.generateEndpoint(apiEndpoint);
    };
    Object.defineProperty(HttpCemex.prototype, "clientId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.projectSettings.clientId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpCemex.prototype, "appCode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.projectSettings.appCode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpCemex.prototype.request = /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options);
        return this.http.request(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.get = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.get(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.post = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        if (!this._validSettings) {
            /** @type {?} */
            var message = 'Set missing environment variables of API_HOST, API_ORG, API_ENV, APP_CODE, CLIENT_ID';
            return Observable.throw(new Error(message));
        }
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.post(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.put = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.put(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.patch = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.patch(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.delete = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.delete(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.head = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.head(url, loptions);
    };
    /**
     * @return {?}
     */
    HttpCemex.prototype.isRunningOnBrowser = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (global))) !== null && ((/** @type {?} */ (global))) !== undefined;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    HttpCemex.prototype.encrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    /**
     * @param {?} str
     * @return {?}
     */
    HttpCemex.prototype.decrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    };
    /**
     * @param {?} newKeys
     * @return {?}
     */
    HttpCemex.prototype.setProjectSettingsNewKeys = /**
     * @param {?} newKeys
     * @return {?}
     */
    function (newKeys) {
        this.projectSettings.setAppKeys(newKeys);
    };
    /**
     * @protected
     * @param {?} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.createAuthorizationHeader = /**
     * @protected
     * @param {?} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (options, overrideHeader) {
        var e_1, _a;
        /** @type {?} */
        var containsHeader = options && options.headers && options.headers.keys().length > 0;
        /** @type {?} */
        var result = options
            ? Object.assign({}, options)
            : new RequestOptions();
        /** @type {?} */
        var headers = new Headers();
        /** @type {?} */
        var language = this.isRunningOnBrowser()
            ? ((/** @type {?} */ (window))).localStorage.getItem('language') || 'en'
            : 'en';
        headers.append('Accept', 'application/json');
        headers.append('X-IBM-Client-Id', this.projectSettings.clientId);
        headers.append('App-Code', this.projectSettings.appCode);
        headers.append('Accept-Language', language);
        /** @type {?} */
        var accessToken = sessionStorage.getItem('access_token');
        /** @type {?} */
        var isContainsToken = accessToken && accessToken !== undefined;
        if (isContainsToken) {
            headers.append('Authorization', 'Bearer ' + accessToken);
        }
        /** @type {?} */
        var jwtApp = sessionStorage.getItem('jwt');
        if (this.isRunningOnBrowser() && jwtApp && jwtApp !== undefined) {
            headers.append('jwt', jwtApp);
        }
        // overwrite existing headers or add new headers
        /** @type {?} */
        var headerKeys = containsHeader ? options.headers.keys() : [];
        try {
            for (var headerKeys_1 = __values(headerKeys), headerKeys_1_1 = headerKeys_1.next(); !headerKeys_1_1.done; headerKeys_1_1 = headerKeys_1.next()) {
                var keyHeader = headerKeys_1_1.value;
                headers.set(keyHeader, options.headers.get(keyHeader));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (headerKeys_1_1 && !headerKeys_1_1.done && (_a = headerKeys_1.return)) _a.call(headerKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        result.headers = headers;
        if (overrideHeader && containsHeader) {
            result.headers = options.headers;
        }
        return result;
    };
    /**
     * @private
     * @return {?}
     */
    HttpCemex.prototype.validateProjectSettings = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var settings = this.projectSettings;
        return (settings.apiBasePath !== undefined &&
            settings.apiEnv !== undefined &&
            settings.apiOrg !== undefined &&
            settings.appCode !== undefined &&
            settings.clientId !== undefined);
    };
    HttpCemex.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpCemex.ctorParameters = function () { return [
        { type: Http },
        { type: ProjectSettings }
    ]; };
    return HttpCemex;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SessionService = /** @class */ (function () {
    function SessionService(http, eventBroadcaster, authTokenVersion) {
        this.http = http;
        this.eventBroadcaster = eventBroadcaster;
        this.authTokenVersion = authTokenVersion;
        this.siteDomain = 'SITE_DOMAIN';
        this._siteDomain = window[this.siteDomain] || '';
        this._menuApplication = new BehaviorSubject([]);
        this._currentLegalEntity = new BehaviorSubject(null);
        this._userProfile = null;
        this._beforeLogout = null;
        if (authTokenVersion) {
            switch (authTokenVersion.toLocaleLowerCase()) {
                case 'v6':
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_V6;
                    break;
                default:
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
            }
        }
        else {
            this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
        }
        if (localStorage.getItem('language') === undefined ||
            (localStorage.getItem('language') === null &&
                (sessionStorage.getItem('language') !== undefined && sessionStorage.getItem('language') !== null))) {
            localStorage.setItem('language', sessionStorage.getItem('language'));
        }
    }
    Object.defineProperty(SessionService.prototype, "menuApplicationItems", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._menuApplication.getValue().length === 0) {
                this.reloadAppMenuItems();
            }
            return this._menuApplication.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SessionService.prototype.setLegalEntity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        sessionStorage.setItem('user_legal_entity', JSON.stringify(value));
        this.eventBroadcaster.broadcast(Broadcaster.DCM_LEGAL_ENTITY_CHANGE, JSON.stringify(value));
        this._currentLegalEntity.next(value);
    };
    Object.defineProperty(SessionService.prototype, "currentLegalEntity", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentLegalEntity.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isLoggedIn", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var accessToken = sessionStorage.getItem('access_token');
            /** @type {?} */
            var jwtToken = sessionStorage.getItem('jwt');
            return (accessToken !== null &&
                accessToken !== undefined &&
                accessToken !== '' &&
                jwtToken != null &&
                jwtToken !== undefined &&
                jwtToken !== '');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SessionService.prototype.logout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (_this._beforeLogout) {
                _this._beforeLogout.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.logoutApp();
                    observer.next({
                        message: 'success',
                        success: true
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.next({
                        message: error,
                        success: false
                    });
                }));
            }
            else {
                _this.logoutApp();
                observer.next({
                    message: 'success',
                    success: true
                });
            }
            return observer;
        }));
    };
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} generateCookie
     * @param {?=} appName
     * @param {?=} validateTempPassword
     * @return {?}
     */
    SessionService.prototype.login = /**
     * @param {?} user
     * @param {?} password
     * @param {?=} generateCookie
     * @param {?=} appName
     * @param {?=} validateTempPassword
     * @return {?}
     */
    function (user, password, generateCookie, appName, validateTempPassword) {
        var _this = this;
        this.clean();
        /** @type {?} */
        var options = new RequestOptions({
            headers: new Headers({
                'Content-Type': 'application/x-www-form-urlencoded',
                accept: 'text/plain, */*'
            })
        });
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(this._endpoint);
        /** @type {?} */
        var urlPost = this.generateUrlString(user, password, appName);
        return this.http
            .post(endpoint, urlPost, options)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return __awaiter(_this, void 0, void 0, function () {
            var data, userId;
            return __generator(this, function (_a) {
                data = response.json();
                userId = this.authTokenVersion === 'v6'
                    ? data.userId
                        ? data.userId
                        : data.profile.userId
                    : data.profile.userId;
                this.processDataFromLogin(data, generateCookie);
                this.eventBroadcaster.broadcast(SessionService.LOGIN_SUCCESS_EVENT);
                if (validateTempPassword &&
                    data.profile &&
                    data.profile.hasTemporaryPassword) {
                    return [2 /*return*/, Promise.resolve(data)];
                }
                return [2 /*return*/];
            });
        }); }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error(error);
            _this.eventBroadcaster.broadcast(SessionService.LOGIN_FAIL_EVENT);
            return Promise.reject(error);
        }));
    };
    Object.defineProperty(SessionService.prototype, "userRegion", {
        get: /**
         * @return {?}
         */
        function () {
            return sessionStorage.getItem('region') || 'US';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userCountry", {
        get: /**
         * @return {?}
         */
        function () {
            return sessionStorage.getItem('country') || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userProfile", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._userProfile) {
                this.setUserProfile();
            }
            return this._userProfile;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    SessionService.prototype.getLegalEntities = /**
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    function (fetch, page, legalEntityCode) {
        var _this = this;
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_LEGAL_ENTITIES);
        endpoint = this.addQueryParams(endpoint, fetch, page, legalEntityCode);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var responseMap = [];
            /** @type {?} */
            var tmpJson = response.json();
            if (tmpJson) {
                responseMap = response.json();
            }
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return Observable.throw(_this.handleError(e)); })));
    };
    /**
     * @param {?} method
     * @return {?}
     */
    SessionService.prototype.setBeforeLogout = /**
     * @param {?} method
     * @return {?}
     */
    function (method) {
        this._beforeLogout = method;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.getBeforeLogout = /**
     * @return {?}
     */
    function () {
        return this._beforeLogout;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.reloadAppMenuItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.getDCMApplications().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            _this._menuApplication.next(result);
        }));
    };
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    SessionService.prototype.createCookie = /**
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    function (name, value, days) {
        /** @type {?} */
        var expires = '';
        if (days) {
            /** @type {?} */
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = date.toUTCString();
        }
        else {
            days = 0;
        }
        /** @type {?} */
        var cookie = name + "=" + value + ";expires=" + expires + ";domain=" + this._siteDomain + ";path=/";
        document.cookie = cookie;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SessionService.prototype.readCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var ca = document.cookie.split(';');
        /** @type {?} */
        var caLen = ca.length;
        /** @type {?} */
        var cookieName = name + "=";
        /** @type {?} */
        var c;
        for (var i = 0; i < caLen; i += 1) {
            c = ca[i].replace(/^\s+/g, '');
            if (c.indexOf(cookieName) === 0) {
                return c.substring(cookieName.length, c.length);
            }
        }
        return null;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SessionService.prototype.clearCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createCookie(name, '', -1);
    };
    /**
     * @return {?}
     */
    SessionService.prototype.setUserProfile = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var strProfile = sessionStorage.getItem('user_profile');
        /** @type {?} */
        var tmpProfile = this.convertJsonTo(strProfile);
        if (tmpProfile) {
            /** @type {?} */
            var strCustomer = sessionStorage.getItem('user_customer');
            /** @type {?} */
            var userCustomer = this.convertJsonTo(strCustomer);
            if (userCustomer) {
                tmpProfile.customer = userCustomer;
            }
            else {
                console.warn('Exception at parsing User Customer from sessionStore');
            }
            this._userProfile = tmpProfile;
        }
        else {
            console.warn('Exception at parsing User Profile from sessionStore');
        }
    };
    /**
     * @return {?}
     */
    SessionService.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.clearCookie('CemexGoRegion');
        this.clearCookie('up_session');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('expires_in');
        sessionStorage.removeItem('jwt');
        sessionStorage.removeItem('region');
        sessionStorage.removeItem('user_profile');
        sessionStorage.removeItem('user_customer');
        sessionStorage.removeItem('user_legal_entity');
        sessionStorage.removeItem('user_applications');
        // patch-fix for react
        sessionStorage.removeItem('auth_token');
        sessionStorage.removeItem('userInfo');
        sessionStorage.removeItem('country');
        sessionStorage.removeItem('token_data');
        sessionStorage.removeItem('applications');
        sessionStorage.removeItem('role');
        sessionStorage.removeItem('username');
        // new verssion API ( v6 )
        sessionStorage.removeItem('userAuthV6');
        sessionStorage.removeItem('userInfoV6');
        sessionStorage.removeItem('userProfileV6');
        sessionStorage.removeItem('userCustomerV6');
        sessionStorage.removeItem('userApplicationsV6');
        sessionStorage.removeItem('userRolesV6');
    };
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} appName
     * @return {?}
     */
    SessionService.prototype.generateUrlString = /**
     * @param {?} user
     * @param {?} password
     * @param {?=} appName
     * @return {?}
     */
    function (user, password, appName) {
        /** @type {?} */
        var include = '&include=userinfo,profile,applications,roles,customers,oldVersion';
        /** @type {?} */
        var url = 'grant_type=password&scope=security&username=' +
            user +
            '&password=' +
            encodeURIComponent(password) +
            '&client_id=' +
            this.http.clientId;
        if (appName) {
            url = url + '&app_name=' + appName;
        }
        if (this.authTokenVersion) {
            if (this.authTokenVersion.toLowerCase() === 'v6') {
                url = url + "&userinformation=false" + include;
            }
        }
        return url;
    };
    /**
     * @param {?} data
     * @param {?=} generateCookie
     * @return {?}
     */
    SessionService.prototype.processDataFromLogin = /**
     * @param {?} data
     * @param {?=} generateCookie
     * @return {?}
     */
    function (data, generateCookie) {
        // session cookie
        if (generateCookie) {
            /** @type {?} */
            var sessionCookie = {
                auth: data.oauth2.access_token,
                expires_in: data.oauth2.expires_in,
                jwt: data.jwt,
                refresh_token: data.oauth2.refresh_token,
                region: data.oauth2.region,
            };
            this.createCookie('up_session', JSON.stringify(sessionCookie), null);
        }
        this.createCookie('CemexGoRegion', data.oauth2.region, null);
        sessionStorage.setItem('access_token', data.oauth2.access_token);
        sessionStorage.setItem('refresh_token', data.oauth2.refresh_token);
        sessionStorage.setItem('expires_in', data.oauth2.expires_in);
        sessionStorage.setItem('jwt', data.jwt);
        sessionStorage.setItem('auth_token', data.oauth2.access_token);
        sessionStorage.setItem('user_profile', JSON.stringify(data.profile));
        sessionStorage.setItem('user_customer', JSON.stringify(data.customer));
        sessionStorage.setItem('user_applications', JSON.stringify(data.applications));
        // react
        sessionStorage.setItem('userInfo', JSON.stringify(data));
        sessionStorage.setItem('country', data.country);
        sessionStorage.setItem('token_data', JSON.stringify(data));
        sessionStorage.setItem('applications', JSON.stringify(data.applications));
        sessionStorage.setItem('region', data.oauth2.region);
        sessionStorage.setItem('role', data.role);
        sessionStorage.setItem('username', data.profile.userAccount);
        this.setUserProfile();
        // call API V6 ( New Model)
        /** @type {?} */
        var accessToKen = {
            oauth2: data.oauth2,
            // tslint:disable-next-line:object-literal-sort-keys
            jwt: data.jwt,
            userId: data.userId ? data.userId : data.profile.userId,
        };
        /** @type {?} */
        var encryptData = this.encrypt(JSON.stringify(accessToKen));
        sessionStorage.setItem('userAuthV6', encryptData);
        if (data._users) {
            /** @type {?} */
            var firstUser = data._users[0];
            /** @type {?} */
            var user = {
                accountType: firstUser.accountType,
                countryCode: firstUser.country.countryCode,
                customerId: (firstUser.customer) ? firstUser.customer.customerId : 0,
                firstName: firstUser.firstName,
                fullName: firstUser.fullName,
                lastName: firstUser.lastName,
                phoneNumber: firstUser.phoneNumber,
                userAccount: firstUser.userAccount,
                userId: firstUser.userId,
                userSelectedId: firstUser.userSelectedId,
                userStatus: firstUser.userStatus,
                userType: firstUser.userType,
            };
            /** @type {?} */
            var encryptUser = this.encrypt(JSON.stringify(user));
            sessionStorage.setItem('userInfoV6', encryptUser);
        }
        if (data._profile) {
            /** @type {?} */
            var dataProfile = data._profile;
            /** @type {?} */
            var profile = {
                allowEmailUpdates: dataProfile.allowEmailUpdates,
                allowInformationShare: dataProfile.allowInformationShare,
                hasTemporaryPassword: dataProfile.hasTemporaryPassword,
                userEmail: dataProfile.userEmail,
                userId: dataProfile.userId,
                userPosition: dataProfile.userPosition,
                userProfileId: dataProfile.userProfileId,
            };
            /** @type {?} */
            var encryptProfile = this.encrypt(JSON.stringify(profile));
            sessionStorage.setItem('userProfileV6', encryptProfile);
        }
        if (data._customers) {
            /** @type {?} */
            var dataCustomer = data._customers;
            /** @type {?} */
            var customer = {
                countryCode: dataCustomer.country.countryCode,
                customerCode: dataCustomer.customerCode,
                customerCodeLZR: dataCustomer.customerCodeLZR,
                customerDesc: dataCustomer.customerDesc,
                customerDesc2: dataCustomer.customerDesc2,
                customerId: dataCustomer.customerId,
                email: dataCustomer.email,
                faxNumber: dataCustomer.faxNumber,
                phoneNumber: dataCustomer.phoneNumber,
                regionId: dataCustomer.region.regionId,
                vAT: dataCustomer.vAT,
            };
            /** @type {?} */
            var encryptcustomer = this.encrypt(JSON.stringify(customer));
            sessionStorage.setItem('userCustomerV6', encryptcustomer);
        }
        if (data._applications) {
            /** @type {?} */
            var apps = data._applications.map((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                return {
                    applicationCode: app.applicationCode,
                    applicationId: app.applicationId,
                    applicationType: app.applicationType,
                    isVisible: app.isVisible,
                };
            }));
            /** @type {?} */
            var encryptApplications = this.encrypt(JSON.stringify(apps));
            sessionStorage.setItem('userApplicationsV6', encryptApplications);
        }
        if (data._roles) {
            /** @type {?} */
            var roles = data._roles.map((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                return {
                    applicationId: role.application.applicationId,
                    isInternal: role.isInternal,
                    isOptional: role.isOptional,
                    isVisible: role.isVisible,
                    roleCode: role.roleCode,
                    roleId: role.roleId,
                    roleType: role.roleType,
                };
            }));
            /** @type {?} */
            var encryptRoles = this.encrypt(JSON.stringify(roles));
            sessionStorage.setItem('userRolesV6', encryptRoles);
        }
    };
    /**
     * @return {?}
     */
    SessionService.prototype.getDCMApplications = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_APPLICATION_MENU);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var tmpJson = response.json();
            if (!tmpJson || tmpJson === undefined) {
                console.warn('Configuration of menu application is empty!!');
                return [];
            }
            /** @type {?} */
            var responseMap = (/** @type {?} */ (response.json()));
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return Observable.throw(_this.handleError(e)); })));
    };
    /**
     * @template T
     * @param {?} obj
     * @return {?}
     */
    SessionService.prototype.convertJsonTo = /**
     * @template T
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        try {
            /** @type {?} */
            var tmpJson = JSON.parse(obj);
            return (/** @type {?} */ (tmpJson));
        }
        catch (e) {
            console.warn('Exception at parsing object from sessionStore:', e);
        }
        return null;
    };
    Object.defineProperty(SessionService.prototype, "customer", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result;
            /** @type {?} */
            var str = sessionStorage.getItem('user_customer');
            if (str) {
                try {
                    /** @type {?} */
                    var profile = JSON.parse(str);
                    result = (/** @type {?} */ (profile));
                }
                catch (e) {
                    console.warn('Exception at parsing user_customer from sessionStore:', e);
                    return null;
                }
            }
            else {
                console.warn('There is no user customer at session storage');
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} error
     * @return {?}
     */
    SessionService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        var errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            var body = error.json() || '';
            errMsg = error.status + " - " + (error.statusText || '');
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return throwError(error);
    };
    /**
     * @param {?} endpoint
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    SessionService.prototype.addQueryParams = /**
     * @param {?} endpoint
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    function (endpoint, fetch, page, legalEntityCode) {
        /** @type {?} */
        var validPagination = Number.isInteger(fetch) && Number.isInteger(page);
        endpoint += validPagination ? '?fetch=' + fetch + '&page=' + page : '';
        endpoint +=
            legalEntityCode && validPagination
                ? '&legalEntityCode=' + legalEntityCode
                : legalEntityCode && !validPagination
                    ? '?legalEntityCode=' + legalEntityCode
                    : '';
        return endpoint;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.logoutApp = /**
     * @return {?}
     */
    function () {
        this.clean();
        this.eventBroadcaster.broadcast(Broadcaster.DCM_APP_LOGOUT);
    };
    Object.defineProperty(SessionService.prototype, "userAuth", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userAuthV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userInfoV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userProfileV6", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userProfileV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userCustomer", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userCustomerV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userApplications", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userApplicationsV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userRoles", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userRolesV6')));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} str
     * @return {?}
     */
    SessionService.prototype.encrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    /**
     * @param {?} str
     * @return {?}
     */
    SessionService.prototype.decrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    };
    SessionService.LOGIN_SUCCESS_EVENT = 'LOGIN_SUCCESS_EVENT';
    SessionService.LOGIN_FAIL_EVENT = 'LOGIN_FAIL_EVENT';
    SessionService.LOGIN_LOGOUT_EVENT = 'LOGIN_LOGOUT_EVENT';
    SessionService.AUTH_TOKEN_VERSION = 'auth_token_version';
    SessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SessionService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: Broadcaster },
        { type: String, decorators: [{ type: Inject, args: [SessionService.AUTH_TOKEN_VERSION,] }, { type: Optional }] }
    ]; };
    return SessionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LegalEntity = /** @class */ (function () {
    function LegalEntity(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
    }
    /**
     * @return {?}
     */
    LegalEntity.prototype.getLegalEntity = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentity'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            return aux;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @return {?}
     */
    LegalEntity.prototype.getAllLegalEntityCustomers = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentitycustomers'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @return {?}
     */
    LegalEntity.prototype.getLegalEntityByCustomer = /**
     * @param {?} customerCode
     * @return {?}
     */
    function (customerCode) {
        return this.http
            .get(this.getUrl('legalentity?customerCode=' + customerCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.company;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} companyCode
     * @return {?}
     */
    LegalEntity.prototype.getLegalEntityByCompany = /**
     * @param {?} companyCode
     * @return {?}
     */
    function (companyCode) {
        return this.http
            .get(this.getUrl('legalentity?companyCode=' + companyCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    LegalEntity.prototype.getLegalEntityJobsites = /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    function (customerCode, companyCode) {
        /** @type {?} */
        var api = 'legalentityjobsites?companyCode=' +
            companyCode +
            '&customerCode=' +
            customerCode;
        return this.http
            .get(this.getUrl(api))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.jobSite;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} api
     * @return {?}
     */
    LegalEntity.prototype.getUrl = /**
     * @param {?} api
     * @return {?}
     */
    function (api) {
        /** @type {?} */
        var url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.armCapability + api);
        return url;
    };
    LegalEntity.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LegalEntity.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: EndpointsConstants }
    ]; };
    return LegalEntity;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FinancialDocuments = /** @class */ (function () {
    function FinancialDocuments(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
    }
    /**
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntity = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentity'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            return aux;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @return {?}
     */
    FinancialDocuments.prototype.getAllLegalEntityCustomers = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentitycustomers'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityByCustomer = /**
     * @param {?} customerCode
     * @return {?}
     */
    function (customerCode) {
        return this.http
            .get(this.getUrl('legalentity?customerCode=' + customerCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.company;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} companyCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityByCompany = /**
     * @param {?} companyCode
     * @return {?}
     */
    function (companyCode) {
        return this.http
            .get(this.getUrl('legalentity?companyCode=' + companyCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityJobsites = /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    function (customerCode, companyCode) {
        /** @type {?} */
        var api = 'legalentityjobsites?companyCode=' +
            companyCode +
            '&customerCode=' +
            customerCode;
        return this.http
            .get(this.getUrl(api))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.jobSite;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @private
     * @param {?} api
     * @return {?}
     */
    FinancialDocuments.prototype.getUrl = /**
     * @private
     * @param {?} api
     * @return {?}
     */
    function (api) {
        /** @type {?} */
        var url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.armCapability + api);
        return url;
    };
    FinancialDocuments.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FinancialDocuments.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: EndpointsConstants }
    ]; };
    return FinancialDocuments;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthGuard = /** @class */ (function () {
    function AuthGuard(router, sessionService) {
        this.router = router;
        this.sessionService = sessionService;
    }
    /**
     * @return {?}
     */
    AuthGuard.prototype.canActivate = /**
     * @return {?}
     */
    function () {
        if (this.sessionService.isLoggedIn) {
            return true;
        }
        else {
            this.router.navigate(['/login']);
            return false;
        }
    };
    AuthGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthGuard.ctorParameters = function () { return [
        { type: Router },
        { type: SessionService }
    ]; };
    return AuthGuard;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TranslationService = /** @class */ (function () {
    function TranslationService(eventBroadcaster, http, _productPath, useTranslationServer, _translationUrl) {
        this.eventBroadcaster = eventBroadcaster;
        this.http = http;
        this._productPath = _productPath;
        this.useTranslationServer = useTranslationServer;
        this._translationUrl = _translationUrl;
        this._useTranslationServer = false;
        this.productPath = '';
        this._localeData = new Subject();
        this.productPath = _productPath || '/';
        this._useTranslationServer = useTranslationServer || false;
        if (this._translationUrl === null) {
            this._translationUrl = '/translate/translate';
        }
        if (this.isRunningOnBrowser()) {
            /** @type {?} */
            var comingFromReact = ((/** @type {?} */ (global))).sessionStorage.getItem('language') || 'en_US';
            /** @type {?} */
            var langLocalStorage = ((/** @type {?} */ (global))).localStorage.getItem('language');
            if (comingFromReact.indexOf('es') !== -1 && !this._useTranslationServer) {
                langLocalStorage = 'es';
                ((/** @type {?} */ (global))).localStorage.setItem('language', 'es');
            }
            else if (comingFromReact.indexOf('en') !== -1 &&
                !this._useTranslationServer) {
                langLocalStorage = 'en';
                ((/** @type {?} */ (global))).localStorage.setItem('language', 'en');
            }
            else {
                langLocalStorage = comingFromReact;
                ((/** @type {?} */ (global))).localStorage.setItem('language', langLocalStorage);
            }
            /** @type {?} */
            var localLang = void 0;
            if (this._useTranslationServer) {
                this.lang(langLocalStorage ? langLocalStorage : 'en_US');
                localLang = langLocalStorage ? langLocalStorage : 'en_US';
            }
            else {
                this.lang(langLocalStorage ? langLocalStorage : 'en');
                localLang = langLocalStorage ? langLocalStorage : 'en';
            }
            // add this next line to correct react projects
            if (localLang === 'en') {
                localLang = localLang + '_US';
            }
            else if (localLang === 'es') {
                localLang = localLang + '_MX';
            }
            ((/** @type {?} */ (global))).sessionStorage.setItem('language', localLang);
        }
        else {
            if (this._useTranslationServer) {
                this.lang('en_US');
            }
            else {
                this.lang('en');
            }
        }
    }
    /**
     * st comes from static-translation
     */
    /**
     * st comes from static-translation
     * @param {?} textID
     * @return {?}
     */
    TranslationService.st = /**
     * st comes from static-translation
     * @param {?} textID
     * @return {?}
     */
    function (textID) {
        /** @type {?} */
        var textValue = this.translation.get(textID);
        if (!textValue || textValue === undefined) {
            return 'NOT:' + textID;
        }
        return textValue;
    };
    /**
     * gets all translations
     */
    /**
     * gets all translations
     * @return {?}
     */
    TranslationService.all = /**
     * gets all translations
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.translation;
        return result;
    };
    Object.defineProperty(TranslationService.prototype, "localeData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localeData.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TranslationService.prototype.isRunningOnBrowser = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (global))) !== null && ((/** @type {?} */ (global))) !== undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TranslationService.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.labels = value;
        this._localeData.next(value);
    };
    /**
     * this method is left here for backwards compatibility
     */
    /**
     * this method is left here for backwards compatibility
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.lang = /**
     * this method is left here for backwards compatibility
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        if (lang === TranslationService.language) {
            return;
        }
        TranslationService.language = lang;
        // add this next line to correct react projects, need to correct this
        /** @type {?} */
        var localLang = TranslationService.language;
        if (localLang === 'en') {
            localLang = localLang + '_US';
        }
        else if (localLang === 'es') {
            localLang = localLang + '_MX';
        }
        if (this.isRunningOnBrowser()) {
            sessionStorage.setItem('language', localLang);
        }
        // if the language is only 2 letters it might be a legacy application
        if (!this._useTranslationServer) {
            this.http
                .get(this.productPath + 'vendor/locale-' + lang + '.json')
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateTranslation(response.json()); }))
                .catch(this.handleError);
        }
        else {
            // if the translation name is bigger than 2 letters, request to external server
            this.http
                .get(this._translationUrl + this.productPath + localLang)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateTranslation(response.json()); }))
                .catch(this.handleError);
        }
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.isoLang = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        // must contain either one of these symbols
        if (lang.indexOf('-') !== -1 || lang.indexOf('_') !== -1) {
            TranslationService.language = lang;
            ((/** @type {?} */ (global))).sessionStorage.setItem('language', lang);
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    TranslationService.prototype.file = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        this.http
            .get(url)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.populateTranslation(response.json()); }))
            .catch(this.handleError);
    };
    /**
     * pt comes from public-translation
     */
    /**
     * pt comes from public-translation
     * @param {?} textID
     * @return {?}
     */
    TranslationService.prototype.pt = /**
     * pt comes from public-translation
     * @param {?} textID
     * @return {?}
     */
    function (textID) {
        /** @type {?} */
        var textValue = TranslationService.translation.get(textID);
        if (!textValue || textValue === undefined) {
            return 'NOT:' + textID;
        }
        return textValue;
    };
    /**
     * @param {?} textId
     * @return {?}
     */
    TranslationService.prototype.getLabel = /**
     * @param {?} textId
     * @return {?}
     */
    function (textId) {
        /** @type {?} */
        var textValue = TranslationService.translation.get(textId);
        if (!textValue) {
            return undefined;
        }
        return textValue;
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.getlang = /**
     * @return {?}
     */
    function () {
        return TranslationService.language;
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.getCountryCode = /**
     * @return {?}
     */
    function () {
        return TranslationService.language.split('_')[1];
    };
    /**
     * @param {?} result
     * @return {?}
     */
    TranslationService.prototype.populateTranslation = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(result)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                TranslationService.translation.set(item, result[item]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.eventBroadcaster.broadcast(Broadcaster.DCM_LANGUAGE_FETCHED, TranslationService.language);
        this.onChange(result);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TranslationService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return Promise.reject(error.message || error);
    };
    TranslationService.translation = new Map();
    TranslationService.language = '';
    // Must be set on path constants
    TranslationService.PRODUCT_PATH = 'PRODUCT_PATH';
    TranslationService.USE_TRANSLATION_SERVER = 'USE_TRANSLATION_SERVER';
    TranslationService.TRANSLATION_BASE_URL = 'TRANSLATION_BASE_URL';
    TranslationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TranslationService.ctorParameters = function () { return [
        { type: Broadcaster },
        { type: Http },
        { type: String, decorators: [{ type: Inject, args: [TranslationService.PRODUCT_PATH,] }, { type: Optional }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TranslationService.USE_TRANSLATION_SERVER,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_BASE_URL,] }, { type: Optional }] }
    ]; };
    return TranslationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Logger = /** @class */ (function () {
    function Logger() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    Logger.log = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        console.log(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Logger.error = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        console.error(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Logger.warn = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        console.warn(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Logger.logf = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        console.log(value);
    };
    Logger.decorators = [
        { type: Injectable }
    ];
    return Logger;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FeatureToggleService = /** @class */ (function () {
    function FeatureToggleService(eventBroadcaster, http, _productPath, _productEnvironment, localManifest) {
        this.eventBroadcaster = eventBroadcaster;
        this.http = http;
        this._productPath = _productPath;
        this._productEnvironment = _productEnvironment;
        this.localManifest = localManifest;
        this.productPath = '';
        this.productEnvironment = '';
        this.productPath = _productPath || '/';
        this.productEnvironment = _productEnvironment || 'development';
        this.getFeatureList(this.localManifest || false);
    }
    /**
     * gets all features
     */
    /**
     * gets all features
     * @return {?}
     */
    FeatureToggleService.all = /**
     * gets all features
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.featureList;
        return result;
    };
    /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     */
    /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    FeatureToggleService.prototype.feature = /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    function (featureId, releaseVersion, featureVersion, hostName) {
        var _this = this;
        if (typeof featureId === 'string') {
            return this.coreValidator(featureId, releaseVersion, featureVersion, hostName);
        }
        else {
            featureId.forEach((/**
             * @param {?} singleFeature
             * @return {?}
             */
            function (singleFeature) {
                if (!_this.coreValidator(singleFeature, releaseVersion, featureVersion, hostName)) {
                    return false;
                }
            }));
        }
        return true;
    };
    /**
     * this method returns all list of features
     */
    /**
     * this method returns all list of features
     * @return {?}
     */
    FeatureToggleService.prototype.getAll = /**
     * this method returns all list of features
     * @return {?}
     */
    function () {
        return FeatureToggleService.featureList;
    };
    /**
     * this method allows to load the feature list from the file
     */
    /**
     * this method allows to load the feature list from the file
     * @param {?} loadFromLocalList
     * @return {?}
     */
    FeatureToggleService.prototype.getFeatureList = /**
     * this method allows to load the feature list from the file
     * @param {?} loadFromLocalList
     * @return {?}
     */
    function (loadFromLocalList) {
        var _this = this;
        // if the loadfromlocallist is true, then load the local-feature.json file
        if (loadFromLocalList) {
            this.http
                .get(this.productPath + 'vendor/local-feature.json')
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateFeatures(response.json()); }))
                .catch(this.handleError);
        }
        else {
            // if the API is ready then switch is this one
            this.http
                .get('/feature/api' + this.productPath)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateFeatures(response.json()); }))
                .catch(this.handleError);
        }
    };
    /**
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    FeatureToggleService.prototype.coreValidator = /**
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    function (featureId, releaseVersion, featureVersion, hostName) {
        // todo smaller refactor
        /** @type {?} */
        var localFind = FeatureToggleService.featureList.get(featureId);
        if (localFind === undefined) {
            return false;
        }
        // if it is found then verify against the country
        if (localFind.country !== null && localFind.country !== undefined) {
            // we can take the country from the session storage
            if (window.sessionStorage.getItem('country').indexOf(localFind.country) ===
                -1) {
                return false;
            }
        }
        if (localFind.role !== null && localFind.role !== undefined) {
            /** @type {?} */
            var isRoleAssigned_1 = false;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (((/** @type {?} */ (role))).roleCode === localFind.role) {
                        isRoleAssigned_1 = true;
                    }
                }));
            }));
            if (!isRoleAssigned_1) {
                return false;
            }
        }
        if (localFind.role_match !== null && localFind.role_match !== undefined) {
            /** @type {?} */
            var rolesAssigned_1 = 0;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (localFind.role_match.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned_1 = rolesAssigned_1 + 1;
                    }
                }));
            }));
            if (rolesAssigned_1 !== localFind.role_match.split(',').length) {
                return false;
            }
        }
        if (localFind.role_any !== null && localFind.role_any !== undefined) {
            /** @type {?} */
            var rolesAssigned_2 = 0;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (localFind.role_any.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned_2 = rolesAssigned_2 + 1;
                    }
                }));
            }));
            if (rolesAssigned_2 === 0) {
                return false;
            }
        }
        if (localFind.environment !== null && localFind.environment !== undefined) {
            // verify the injection of the environment
            if (localFind.environment !== this.productEnvironment) {
                return false;
            }
        }
        if (localFind.release_version !== null &&
            localFind.release_version !== undefined) {
            // verify the injection of the environment
            if (localFind.release_version !== releaseVersion) {
                return false;
            }
        }
        if (localFind.feature_version !== null &&
            localFind.feature_version !== undefined) {
            // verify the injection of the environment
            if (localFind.feature_version !== featureVersion) {
                return false;
            }
        }
        if (localFind.host_name !== null && localFind.host_name !== undefined) {
            // verify the injection of the environment
            if (localFind.host_name !== hostName) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FeatureToggleService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return Promise.reject(error.message || error);
    };
    /**
     * @param {?} result
     * @return {?}
     */
    FeatureToggleService.prototype.populateFeatures = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var e_1, _a;
        try {
            for (var _b = __values(Object.keys(result)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                FeatureToggleService.featureList.set(((/** @type {?} */ (result[item]))).feature, result[item]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // this.eventBroadcaster.broadcast(Broadcaster.DCM_LANGUAGE_FETCHED, TranslationService.language);
        // this.onChange(result);
    };
    FeatureToggleService.featureList = new Map();
    FeatureToggleService.language = '';
    // Must be set on path constants
    FeatureToggleService.PRODUCT_PATH = 'PRODUCT_PATH';
    FeatureToggleService.ENVIRONMENT = 'PRODUCT_PATH';
    FeatureToggleService.USE_LOCAL_MANIFEST = 'USE_LOCAL_MANIFEST';
    FeatureToggleService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureToggleService.ctorParameters = function () { return [
        { type: Broadcaster },
        { type: Http },
        { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.PRODUCT_PATH,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.ENVIRONMENT,] }, { type: Optional }] },
        { type: Boolean, decorators: [{ type: Inject, args: [FeatureToggleService.USE_LOCAL_MANIFEST,] }, { type: Optional }] }
    ]; };
    return FeatureToggleService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountryConfigService = /** @class */ (function () {
    function CountryConfigService(http, projectEnv, sessionService) {
        var _this = this;
        this.http = http;
        this.projectEnv = projectEnv;
        this.sessionService = sessionService;
        this._countryConfig = new BehaviorSubject(null);
        this._countryConfigApiPath = '/v5/secm/console/countryconfig';
        if (!this._countryConfig.getValue()) {
            this.getCountryConfiguration().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this._countryConfig.next(data);
            }));
        }
    }
    Object.defineProperty(CountryConfigService.prototype, "countryConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._countryConfig.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CountryConfigService.prototype.getCountryConfiguration = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userCountry = this.sessionService.userCountry || 'US';
        /** @type {?} */
        var url = "" + this.projectEnv.getBaseOrgEnvPath() + this._countryConfigApiPath + "?countryCode=" + userCountry;
        return this.http.get(url).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.json(); })), catchError(this.handleError));
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    CountryConfigService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        var errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            var body = error.json() || '';
            /** @type {?} */
            var err = body.error || JSON.stringify(body);
            errMsg = error.status + " - " + (error.statusText || '');
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return Observable.throw(error);
    };
    CountryConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CountryConfigService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: ProjectSettings },
        { type: SessionService }
    ]; };
    return CountryConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EmailValidators = /** @class */ (function () {
    function EmailValidators() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    EmailValidators.pattern = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        if (regex.test(c.value)) {
            return null;
        }
        else {
            return {
                patternInvalid: true
            };
        }
    };
    return EmailValidators;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberValidators = /** @class */ (function () {
    function NumberValidators() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.isNumeric = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (!isNaN(parseFloat(c.value)) && isFinite(c.value)) {
            return null;
        }
        else {
            return {
                notNumeric: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.onlyTwoDecimals = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var regexp = /^\d+(\.\d{1,2})?$/;
        if (regexp.test(c.value)) {
            return null;
        }
        else {
            return {
                patternInvalid: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.greaterThanZero = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (parseFloat(c.value) > 0) {
            return null;
        }
        else {
            return {
                lessThanZero: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.isPositive = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (parseFloat(c.value) >= 0) {
            return null;
        }
        else {
            return {
                isNegative: true
            };
        }
    };
    /**
     * @param {?} max
     * @return {?}
     */
    NumberValidators.lessThan = /**
     * @param {?} max
     * @return {?}
     */
    function (max) {
        /** @type {?} */
        var maxNumber = max;
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var num = +control.value;
            if (isNaN(num) || num > maxNumber) {
                return {
                    isGreater: true
                };
            }
            return null;
        });
    };
    /**
     * @param {?} min
     * @return {?}
     */
    NumberValidators.greaterThan = /**
     * @param {?} min
     * @return {?}
     */
    function (min) {
        /** @type {?} */
        var minNumber = min;
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var num = +control.value;
            if (isNaN(num) || num < minNumber) {
                return {
                    isLess: true
                };
            }
            return null;
        });
    };
    return NumberValidators;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CashSalesService = /** @class */ (function () {
    function CashSalesService(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
        // TODO: MOVE TO PATH CONSTANTS
        this.apiCashDocuments = 'cashdocuments';
    }
    /**
     * @param {?} companyCode
     * @param {?} customerCode
     * @param {?} jobSiteCode
     * @return {?}
     */
    CashSalesService.prototype.getCreditDocs = /**
     * @param {?} companyCode
     * @param {?} customerCode
     * @param {?} jobSiteCode
     * @return {?}
     */
    function (companyCode, customerCode, jobSiteCode) {
        var _this = this;
        /** @type {?} */
        var apiQuery = "companyCode=" + companyCode + "&customerCode=" + customerCode + "&jobSiteCode=" + jobSiteCode;
        /** @type {?} */
        var endpoint = this.apiCashDocuments + "?" + apiQuery;
        return this.http
            .get(this.getUrl(endpoint))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            return _this.handleCashDocumentsData(aux);
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @private
     * @param {?} aux
     * @return {?}
     */
    CashSalesService.prototype.handleCashDocumentsData = /**
     * @private
     * @param {?} aux
     * @return {?}
     */
    function (aux) {
        aux.forEach((/**
         * @param {?} document
         * @param {?} i
         * @return {?}
         */
        function (document, i) {
            document.index = i;
            document.flagInvalidAmnt = false;
            document.errMsg = '';
            document.toCommit = 0;
            // document.createDate = '2017-01-01T00:00:00';
            if (document.createDate) {
                /** @type {?} */
                var d1 = document.createDate.split('T')[0].split('-');
                /** @type {?} */
                var d2 = document.createDate.split('T')[1];
                document.createDate = d1[2] + '-' + d1[1] + '-' + d1[0] + 'T' + d2;
                // document.createDate = this.getDateObject(document.createDate).toString();
            }
            document.amount = !document.amount ? 0 : document.amount;
            document.reconciledAmount = !document.reconciledAmount
                ? 0
                : document.reconciledAmount;
            document.commitedAmount = !document.commitedAmount
                ? 0
                : document.commitedAmount;
        }));
        return aux;
    };
    /**
     * @private
     * @param {?} api
     * @return {?}
     */
    CashSalesService.prototype.getUrl = /**
     * @private
     * @param {?} api
     * @return {?}
     */
    function (api) {
        /** @type {?} */
        var url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.peCapability + api);
        return url;
    };
    CashSalesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CashSalesService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: EndpointsConstants }
    ]; };
    return CashSalesService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CountlyService = /** @class */ (function () {
    function CountlyService() {
        this.defaultTrackings = [
            ['track_pageview'],
            ['track_clicks'],
            ['track_errors'],
            ['track_links'],
            ['track_forms'],
            ['collect_from_forms'] /*['track_sessions'] */
        ];
        this.Countly = ((/** @type {?} */ (window))).Countly;
    }
    /**
     * @return {?}
     */
    CountlyService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.addTracking('track_sessions');
        this.Countly.init();
    };
    /**
     * @param {?} flag
     * @return {?}
     */
    CountlyService.prototype.debug = /**
     * @param {?} flag
     * @return {?}
     */
    function (flag) {
        this.Countly.debug = flag;
    };
    /**
     * @param {?} url
     * @param {?} appKey
     * @return {?}
     */
    CountlyService.prototype.startService = /**
     * @param {?} url
     * @param {?} appKey
     * @return {?}
     */
    function (url, appKey) {
        if (this.Countly !== undefined) {
            this.Countly.url = url;
            this.Countly.app_key = appKey;
            this.Countly.q = this.defaultTrackings;
        }
    };
    /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    CountlyService.prototype.addTracking = /**
     * @param {?} key
     * @param {?=} value
     * @return {?}
     */
    function (key, value) {
        if (!value) {
            this.Countly.q.push([key]);
        }
        else {
            this.Countly.q.push([key, value]);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CountlyService.prototype.addTrackingPage = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.Countly.q.push(['track_pageview', key]);
    };
    /**
     * @param {?} countryCode
     * @param {?} newId
     * @return {?}
     */
    CountlyService.prototype.changeId = /**
     * @param {?} countryCode
     * @param {?} newId
     * @return {?}
     */
    function (countryCode, newId) {
        this.Countly.q.push(['change_id', countryCode + newId]);
    };
    /**
     * @param {?} userfields
     * @return {?}
     */
    CountlyService.prototype.identifyUser = /**
     * @param {?} userfields
     * @return {?}
     */
    function (userfields) {
        this.Countly.q.push(['user_details', userfields]);
    };
    /**
     * @return {?}
     */
    CountlyService.prototype.endSession = /**
     * @return {?}
     */
    function () {
        this.Countly.q.push(['end_session']);
    };
    /**
     * @param {?} trackingjson
     * @return {?}
     */
    CountlyService.prototype.removeTracking = /**
     * @param {?} trackingjson
     * @return {?}
     */
    function (trackingjson) {
        this.Countly.q.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.indexOf(trackingjson) !== -1) {
                element[0] = 'canceled';
            }
        }));
    };
    return CountlyService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AnalyticsFactory = /** @class */ (function () {
    function AnalyticsFactory() {
    }
    /**
     * @param {?} analitycServiceType
     * @param {?} configuration
     * @return {?}
     */
    AnalyticsFactory.prototype.createService = /**
     * @param {?} analitycServiceType
     * @param {?} configuration
     * @return {?}
     */
    function (analitycServiceType, configuration) {
        switch (analitycServiceType) {
            case AnalyticsFactory.Type.Countly:
                /** @type {?} */
                var service = new CountlyService();
                service.startService(configuration.url, configuration.key);
                return service;
            case AnalyticsFactory.Type.Clevertap:
                return null;
            case AnalyticsFactory.Type.Other:
                return null;
            default:
                return null;
        }
    };
    // tslint:disable-next-line:variable-name
    AnalyticsFactory.Type = { Countly: 1, Clevertap: 2, Other: 0 };
    return AnalyticsFactory;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PushNotificationsConstants = /** @class */ (function () {
    function PushNotificationsConstants() {
        // tslint:disable-next-line:no-string-literal
        this.appCode = window['APP_CODE']; // 'Foreman_App'
        // tslint:disable-next-line:no-string-literal
        this.apiClientId = window['CLIENT_ID']; // 'f624df7f-9b35-41c0-8a41-4854b86c84f1';
        // tslint:disable-next-line:no-string-literal
        this.apiHost = window['API_HOST']; // 'https://uscldcnxapmd01.azure-api.net/';
        // tslint:disable-next-line:no-string-literal
        this.appLanguage = window['LANGUAGE']; // 'es-MX';
        this.authToken = 'Bearer ' + sessionStorage.getItem('auth_token');
        this.jwt = sessionStorage.getItem('jwt');
        this.urlServiceWorker = 'service-worker/push_sw.js';
        this.deviceApi = this.apiHost + 'v5/cm/notifications/devices';
        this.sourcePush = 'postMessageSW';
        this.vapidPublicKey = '';
    }
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getAppCode = /**
     * @return {?}
     */
    function () {
        return this.appCode;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getClientId = /**
     * @return {?}
     */
    function () {
        return this.apiClientId;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getApiBasePath = /**
     * @return {?}
     */
    function () {
        return this.apiBasePath;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getAppLanguage = /**
     * @return {?}
     */
    function () {
        return this.appLanguage;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getAuthToken = /**
     * @return {?}
     */
    function () {
        return this.authToken;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getJwt = /**
     * @return {?}
     */
    function () {
        return this.jwt;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getUrlSW = /**
     * @return {?}
     */
    function () {
        return this.urlServiceWorker;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getDevicesPath = /**
     * @return {?}
     */
    function () {
        return this.deviceApi;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getSourcePush = /**
     * @return {?}
     */
    function () {
        return this.sourcePush;
    };
    /**
     * @return {?}
     */
    PushNotificationsConstants.prototype.getVapidPublicKey = /**
     * @return {?}
     */
    function () {
        return this.vapidPublicKey;
    };
    /**
     * @param {?} pVapidPublicKey
     * @return {?}
     */
    PushNotificationsConstants.prototype.setVapidPublicKey = /**
     * @param {?} pVapidPublicKey
     * @return {?}
     */
    function (pVapidPublicKey) {
        this.vapidPublicKey = pVapidPublicKey;
    };
    /**
     * @param {?} urlSW
     * @return {?}
     */
    PushNotificationsConstants.prototype.setUrlSW = /**
     * @param {?} urlSW
     * @return {?}
     */
    function (urlSW) {
        this.urlServiceWorker = urlSW;
    };
    PushNotificationsConstants.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PushNotificationsConstants.ctorParameters = function () { return []; };
    return PushNotificationsConstants;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PushNotificationService = /** @class */ (function () {
    function PushNotificationService(constants) {
        this.constants = constants;
        this._devUUID = '';
        this._devId = '';
        this._platform = '';
        this._token = '';
        // this.initialize();
    }
    /**
     * @param {?} methodCallBack
     * @return {?}
     */
    PushNotificationService.prototype.initialize = /**
     * @param {?} methodCallBack
     * @return {?}
     */
    function (methodCallBack) {
        this._methodCallBack = methodCallBack;
        this._vapidPublicKey = this.constants.getVapidPublicKey();
        if (this.validateSw()) {
            // tslint:disable-next-line:only-arrow-functions
            /** @type {?} */
            var swReg = this.registerSw().catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Push Service Worker registration has failed: ' + error);
            }));
            // tslint:disable-next-line:only-arrow-functions
            this.subscriptionSw(swReg).catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Push Service Worker subscription has failed: ' + error);
            }));
        }
    };
    /**
     * @return {?}
     */
    PushNotificationService.prototype.validateSw = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var isValid = false;
        if ('serviceWorker' in navigator && 'PushManager' in window) {
            isValid = true;
            console.log('Service Workers is supported');
        }
        return isValid;
    };
    /**
     * @private
     * @return {?}
     */
    PushNotificationService.prototype.registerSw = /**
     * @private
     * @return {?}
     */
    function () {
        // tslint:disable-next-line:only-arrow-functions
        return navigator.serviceWorker
            .register(this.constants.getUrlSW())
            .then((/**
         * @param {?} swReg
         * @return {?}
         */
        function (swReg) {
            if (swReg.installing) {
                console.log('Service worker installing');
            }
            else if (swReg.waiting) {
                console.log('Service worker installed');
            }
            else if (swReg.active) {
                console.log('Service worker active');
            }
            if (!swReg.showNotification) {
                console.log('Notifications aren\'t supported on service workers.');
            }
            return swReg;
        }));
    };
    /**
     * @private
     * @param {?} registration
     * @return {?}
     */
    PushNotificationService.prototype.subscriptionSw = /**
     * @private
     * @param {?} registration
     * @return {?}
     */
    function (registration) {
        /** @type {?} */
        var mSetSubscription = this.setSubscription;
        /** @type {?} */
        var global = this;
        // tslint:disable-next-line:only-arrow-functions
        return registration.then((/**
         * @param {?} swReg
         * @return {?}
         */
        function (swReg) {
            swReg.pushManager
                .getSubscription()
                // tslint:disable-next-line:only-arrow-functions
                .then((/**
             * @param {?} subscriptionInit
             * @return {?}
             */
            function (subscriptionInit) {
                if (subscriptionInit) {
                    return mSetSubscription(subscriptionInit, global);
                }
                else {
                    /** @type {?} */
                    var options = {
                        // tslint:disable-next-line:max-line-length
                        applicationServerKey: !global._vapidPublicKey
                            ? null
                            : global.urlB64ToUint8Array(global._vapidPublicKey),
                        userVisibleOnly: true
                    };
                    return (swReg.pushManager
                        .subscribe(options)
                        // tslint:disable-next-line:only-arrow-functions
                        .then((/**
                     * @param {?} subscription
                     * @return {?}
                     */
                    function (subscription) {
                        console.log(subscription);
                        return mSetSubscription(subscription, global);
                        // tslint:disable-next-line:only-arrow-functions
                    }))
                        .catch((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('Unable to subscribe to push.', error);
                    })));
                }
            }));
        }));
    };
    /**
     * @private
     * @param {?} subscription
     * @param {?} global
     * @return {?}
     */
    PushNotificationService.prototype.setSubscription = /**
     * @private
     * @param {?} subscription
     * @param {?} global
     * @return {?}
     */
    function (subscription, global) {
        global.generateTokenForRegisterDevice(subscription);
        global.registerBroadcastListener();
    };
    /**
     * @private
     * @return {?}
     */
    PushNotificationService.prototype.registerBroadcastListener = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var callBack = this._methodCallBack;
        /** @type {?} */
        var sPush = this.constants.getSourcePush();
        navigator.serviceWorker.addEventListener('message', (/**
         * @param {?} event
         * @return {?}
         */
        function handler(event) {
            /** @type {?} */
            var data = event.data;
            if (data && data.source === sPush) {
                console.log(event.data);
                if (callBack) {
                    callBack(data.payload);
                }
            }
        }));
    };
    // tslint:disable-next-line:member-ordering
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} subscription
     * @return {?}
     */
    PushNotificationService.prototype.generateTokenForRegisterDevice = 
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} subscription
     * @return {?}
     */
    function (subscription) {
        localStorage.setItem('token', JSON.stringify(subscription));
        if (!localStorage.getItem('deviceUUID')) {
            this.generateUUID('');
        }
        else {
            this._devUUID = localStorage.getItem('deviceUUID');
            if (!localStorage.getItem('deviceId')) {
                this._devId = localStorage.getItem('deviceId');
            }
        }
        this._platform = '';
        this._devUUID = localStorage.getItem('deviceUUID');
        this._devId = localStorage.getItem('deviceId');
        /** @type {?} */
        var rawKey = subscription.getKey ? subscription.getKey('p256dh') : '';
        /** @type {?} */
        var key = rawKey
            ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawKey)))
            : '';
        /** @type {?} */
        var rawAuthSecret = subscription.getKey
            ? subscription.getKey('auth')
            : '';
        /** @type {?} */
        var authSecret = rawAuthSecret
            ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret)))
            : '';
        /** @type {?} */
        var tokenValue = {
            endpoint: subscription.endpoint,
            userAuth: authSecret,
            userPublicKey: key
        };
        this._token = JSON.stringify(tokenValue);
        if (navigator.userAgent.indexOf('Firefox') !== -1) {
            this._platform = 'F'; // Firefox Browser
        }
        else if (navigator.userAgent.indexOf('Chrome') !== -1) {
            this._platform = 'C'; // Chrome Browser
        }
        /** @type {?} */
        var device = null;
        if (this.validateInput(this._devId)) {
            device = {
                deviceId: this._devId,
                platform: this._platform,
                token: this._token,
                uuid: this._devUUID
            };
        }
        else {
            device = {
                platform: this._platform,
                token: this._token,
                uuid: this._devUUID
            };
        }
        this.registerDevice(device);
    };
    // tslint:disable-next-line:member-ordering
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} device
     * @return {?}
     */
    PushNotificationService.prototype.registerDevice = 
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} device
     * @return {?}
     */
    function (device) {
        console.log('Device details:', device);
        /** @type {?} */
        var xhr = this.setRequest(this.constants.getDevicesPath(), 'POST', true);
        /*this.http.post(this.constants.getDevicesPath(), device)
            .then((response) => {
                console.log('Response register,', response);
                localStorage.setItem('deviceId', response);
            });*/
        // tslint:disable-next-line:only-arrow-functions
        xhr.onreadystatechange = (/**
         * @return {?}
         */
        function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log('Response register,', xhr);
                localStorage.setItem('deviceId', xhr.responseText);
            }
        });
        xhr.send(JSON.stringify(device));
    };
    // tslint:disable-next-line:member-ordering
    // tslint:disable-next-line:member-ordering
    /**
     * @return {?}
     */
    PushNotificationService.prototype.unRegisterDevice = 
    // tslint:disable-next-line:member-ordering
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            _this._devId = localStorage.getItem('deviceId');
            /** @type {?} */
            var global = _this;
            // tslint:disable-next-line:only-arrow-functions
            navigator.serviceWorker.ready
                .then((/**
             * @param {?} registration
             * @return {?}
             */
            function (registration) {
                registration
                    .unregister()
                    // tslint:disable-next-line:only-arrow-functions
                    .then((/**
                 * @param {?} checkUnregister
                 * @return {?}
                 */
                function (checkUnregister) {
                    if (!checkUnregister) {
                        console.log('unregister failed');
                        resolve();
                    }
                    global
                        .unsubscribeDevice(global._devId, global)
                        // tslint:disable-next-line:only-arrow-functions
                        .then((/**
                     * @return {?}
                     */
                    function () {
                        resolve();
                    }));
                }));
            }))
                // tslint:disable-next-line:only-arrow-functions
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Registration failed with ' + error);
                resolve();
            }));
        }));
        return promise;
    };
    // tslint:disable-next-line:member-ordering
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} deviceID
     * @param {?} global
     * @return {?}
     */
    PushNotificationService.prototype.unsubscribeDevice = 
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} deviceID
     * @param {?} global
     * @return {?}
     */
    function (deviceID, global) {
        /** @type {?} */
        var promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var deviceId = localStorage.getItem('deviceId');
            /** @type {?} */
            var device = {
                devices: {
                    deviceId: global._devId,
                    platform: global._platform,
                    token: global._token,
                    uuid: global._devUUID
                }
            };
            if (deviceID) {
                /** @type {?} */
                var xhr_1 = global.setRequest(global.constants.getDevicesPath() + '/' + deviceID, 'DELETE', true);
                // tslint:disable-next-line:only-arrow-functions
                xhr_1.onreadystatechange = (/**
                 * @return {?}
                 */
                function () {
                    if (xhr_1.readyState === 4 && xhr_1.status === 200) {
                        console.log('The response is ,', xhr_1);
                        console.log('Successfully unregistered the device');
                        localStorage.setItem('deviceUUID', '');
                        localStorage.setItem('deviceId', '');
                        localStorage.setItem('token', '');
                        resolve();
                    }
                });
                xhr_1.send(JSON.stringify(device));
            }
            else {
                resolve();
            }
        }));
        return promise;
    };
    /**
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?} asyncP
     * @return {?}
     */
    PushNotificationService.prototype.setRequest = /**
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?} asyncP
     * @return {?}
     */
    function (url, method, asyncP) {
        /** @type {?} */
        var xhr = new XMLHttpRequest();
        xhr.open(method, url, asyncP);
        xhr = this.setHeaders(xhr, method);
        return xhr;
    };
    /**
     * @private
     * @param {?} xhr
     * @param {?} method
     * @return {?}
     */
    PushNotificationService.prototype.setHeaders = /**
     * @private
     * @param {?} xhr
     * @param {?} method
     * @return {?}
     */
    function (xhr, method) {
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.setRequestHeader('x-ibm-client-id', this.constants.getClientId());
        xhr.setRequestHeader('App-Code', this.constants.getAppCode());
        xhr.setRequestHeader('Accept-Language', this.constants.getAppLanguage());
        xhr.setRequestHeader('Authorization', this.constants.getAuthToken());
        xhr.setRequestHeader('jwt', this.constants.getJwt());
        xhr.timeout = 3000;
        if (method === 'POST' || method === 'PUT') {
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        }
        return xhr;
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    PushNotificationService.prototype.generateUUID = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var dateTime = new Date().getTime();
        if (window.performance && typeof window.performance.now === 'function') {
            dateTime += performance.now(); // use high-precision timer if available
        }
        /** @type {?} */
        var hostname = window.location.hostname;
        /** @type {?} */
        var arrayData = [];
        arrayData.push(this.hashCode(dateTime));
        arrayData.push(this.hashCode(token));
        arrayData.push(this.hashCode(hostname));
        arrayData.push(this.hashCode(this._platform));
        /** @type {?} */
        var finalString = arrayData
            .join('')
            .replace(/[-.]/g, '')
            .replace(/[,.]/g, '');
        /** @type {?} */
        var uuid = '';
        for (var i = 0; i < 32; i++) {
            uuid += finalString.charAt(Math.floor(Math.random() * finalString.length));
        }
        localStorage.setItem('deviceUUID', uuid);
        this._devUUID = uuid;
        return this._devUUID;
    };
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    PushNotificationService.prototype.hashCode = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var hash = 0;
        /** @type {?} */
        var i;
        /** @type {?} */
        var chr;
        /** @type {?} */
        var len;
        if (str.length === 0) {
            return hash;
        }
        for (i = 0, len = str.length; i < len; i++) {
            chr = str.charCodeAt(i);
            // tslint:disable-next-line:no-bitwise
            hash = (hash << 5) - hash + chr;
            // tslint:disable-next-line:no-bitwise
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    };
    /**
     * @private
     * @param {?} stringValue
     * @return {?}
     */
    PushNotificationService.prototype.validateInput = /**
     * @private
     * @param {?} stringValue
     * @return {?}
     */
    function (stringValue) {
        // tslint:disable-next-line:max-line-length
        return stringValue === undefined ||
            stringValue == null ||
            stringValue.length <= 0 ||
            stringValue === ''
            ? false
            : true;
    };
    /**
     * @private
     * @param {?} base64String
     * @return {?}
     */
    PushNotificationService.prototype.urlB64ToUint8Array = /**
     * @private
     * @param {?} base64String
     * @return {?}
     */
    function (base64String) {
        /** @type {?} */
        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        /** @type {?} */
        var base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        /** @type {?} */
        var rawData = window.atob(base64);
        /** @type {?} */
        var outputArray = new Uint8Array(rawData.length);
        for (var i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    };
    PushNotificationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PushNotificationService.ctorParameters = function () { return [
        { type: PushNotificationsConstants }
    ]; };
    return PushNotificationService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var CORE_COMMON_PROVIDERS = [
    ProjectSettings,
    HttpCemex,
    SessionService,
    Broadcaster,
    AuthGuard,
    TranslationService
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CmxCoreCommonModule = /** @class */ (function () {
    function CmxCoreCommonModule() {
    }
    CmxCoreCommonModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    exports: [],
                    imports: [],
                    providers: [CORE_COMMON_PROVIDERS]
                },] }
    ];
    return CmxCoreCommonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CORE_COMMON_PROVIDERS, CmxCoreCommonModule, HttpCemex, SessionService, LegalEntity, FinancialDocuments, ProjectSettings, AuthGuard, TranslationService, Logger, FeatureToggleService, CountryConfigService, EmailValidators, NumberValidators, CashSalesService, AnalyticsFactory, CountlyService, PushNotificationsConstants, PushNotificationService };

//# sourceMappingURL=cemex-core-angular-services-v7.js.map