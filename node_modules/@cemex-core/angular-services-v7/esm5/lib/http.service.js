/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Headers, Http, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs';
import { ProjectSettings } from './project.settings';
var HttpCemex = /** @class */ (function () {
    function HttpCemex(http, projectSettings) {
        this.http = http;
        this.projectSettings = projectSettings;
        this._validSettings = false;
        this._validSettings = this.validateProjectSettings();
    }
    /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    HttpCemex.prototype.generateEndpoint = /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    function (apiEndpoint) {
        return this.projectSettings.generateEndpoint(apiEndpoint);
    };
    Object.defineProperty(HttpCemex.prototype, "clientId", {
        get: /**
         * @return {?}
         */
        function () {
            return this.projectSettings.clientId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HttpCemex.prototype, "appCode", {
        get: /**
         * @return {?}
         */
        function () {
            return this.projectSettings.appCode;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    HttpCemex.prototype.request = /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    function (url, options) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options);
        return this.http.request(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.get = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.get(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.post = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        if (!this._validSettings) {
            /** @type {?} */
            var message = 'Set missing environment variables of API_HOST, API_ORG, API_ENV, APP_CODE, CLIENT_ID';
            return Observable.throw(new Error(message));
        }
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.post(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.put = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.put(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.patch = /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, body, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.patch(url, body, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.delete = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.delete(url, loptions);
    };
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.head = /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (url, options, overrideHeader) {
        /** @type {?} */
        var loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.head(url, loptions);
    };
    /**
     * @return {?}
     */
    HttpCemex.prototype.isRunningOnBrowser = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (global))) !== null && ((/** @type {?} */ (global))) !== undefined;
    };
    /**
     * @param {?} str
     * @return {?}
     */
    HttpCemex.prototype.encrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    /**
     * @param {?} str
     * @return {?}
     */
    HttpCemex.prototype.decrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    };
    /**
     * @param {?} newKeys
     * @return {?}
     */
    HttpCemex.prototype.setProjectSettingsNewKeys = /**
     * @param {?} newKeys
     * @return {?}
     */
    function (newKeys) {
        this.projectSettings.setAppKeys(newKeys);
    };
    /**
     * @protected
     * @param {?} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    HttpCemex.prototype.createAuthorizationHeader = /**
     * @protected
     * @param {?} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    function (options, overrideHeader) {
        var e_1, _a;
        /** @type {?} */
        var containsHeader = options && options.headers && options.headers.keys().length > 0;
        /** @type {?} */
        var result = options
            ? Object.assign({}, options)
            : new RequestOptions();
        /** @type {?} */
        var headers = new Headers();
        /** @type {?} */
        var language = this.isRunningOnBrowser()
            ? ((/** @type {?} */ (window))).localStorage.getItem('language') || 'en'
            : 'en';
        headers.append('Accept', 'application/json');
        headers.append('X-IBM-Client-Id', this.projectSettings.clientId);
        headers.append('App-Code', this.projectSettings.appCode);
        headers.append('Accept-Language', language);
        /** @type {?} */
        var accessToken = sessionStorage.getItem('access_token');
        /** @type {?} */
        var isContainsToken = accessToken && accessToken !== undefined;
        if (isContainsToken) {
            headers.append('Authorization', 'Bearer ' + accessToken);
        }
        /** @type {?} */
        var jwtApp = sessionStorage.getItem('jwt');
        if (this.isRunningOnBrowser() && jwtApp && jwtApp !== undefined) {
            headers.append('jwt', jwtApp);
        }
        // overwrite existing headers or add new headers
        /** @type {?} */
        var headerKeys = containsHeader ? options.headers.keys() : [];
        try {
            for (var headerKeys_1 = tslib_1.__values(headerKeys), headerKeys_1_1 = headerKeys_1.next(); !headerKeys_1_1.done; headerKeys_1_1 = headerKeys_1.next()) {
                var keyHeader = headerKeys_1_1.value;
                headers.set(keyHeader, options.headers.get(keyHeader));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (headerKeys_1_1 && !headerKeys_1_1.done && (_a = headerKeys_1.return)) _a.call(headerKeys_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        result.headers = headers;
        if (overrideHeader && containsHeader) {
            result.headers = options.headers;
        }
        return result;
    };
    /**
     * @private
     * @return {?}
     */
    HttpCemex.prototype.validateProjectSettings = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var settings = this.projectSettings;
        return (settings.apiBasePath !== undefined &&
            settings.apiEnv !== undefined &&
            settings.apiOrg !== undefined &&
            settings.appCode !== undefined &&
            settings.clientId !== undefined);
    };
    HttpCemex.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpCemex.ctorParameters = function () { return [
        { type: Http },
        { type: ProjectSettings }
    ]; };
    return HttpCemex;
}());
export { HttpCemex };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCemex.prototype._validSettings;
    /**
     * @type {?}
     * @protected
     */
    HttpCemex.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpCemex.prototype.projectSettings;
}
//# sourceMappingURL=data:application/json;base64,