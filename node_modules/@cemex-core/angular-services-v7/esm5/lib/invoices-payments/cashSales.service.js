/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { EndpointsConstants } from '@cemex-core/constants-v2/dist';
import { HttpCemex } from '../http.service';
var CashSalesService = /** @class */ (function () {
    function CashSalesService(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
        // TODO: MOVE TO PATH CONSTANTS
        this.apiCashDocuments = 'cashdocuments';
    }
    /**
     * @param {?} companyCode
     * @param {?} customerCode
     * @param {?} jobSiteCode
     * @return {?}
     */
    CashSalesService.prototype.getCreditDocs = /**
     * @param {?} companyCode
     * @param {?} customerCode
     * @param {?} jobSiteCode
     * @return {?}
     */
    function (companyCode, customerCode, jobSiteCode) {
        var _this = this;
        /** @type {?} */
        var apiQuery = "companyCode=" + companyCode + "&customerCode=" + customerCode + "&jobSiteCode=" + jobSiteCode;
        /** @type {?} */
        var endpoint = this.apiCashDocuments + "?" + apiQuery;
        return this.http
            .get(this.getUrl(endpoint))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            return _this.handleCashDocumentsData(aux);
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @private
     * @param {?} aux
     * @return {?}
     */
    CashSalesService.prototype.handleCashDocumentsData = /**
     * @private
     * @param {?} aux
     * @return {?}
     */
    function (aux) {
        aux.forEach((/**
         * @param {?} document
         * @param {?} i
         * @return {?}
         */
        function (document, i) {
            document.index = i;
            document.flagInvalidAmnt = false;
            document.errMsg = '';
            document.toCommit = 0;
            // document.createDate = '2017-01-01T00:00:00';
            if (document.createDate) {
                /** @type {?} */
                var d1 = document.createDate.split('T')[0].split('-');
                /** @type {?} */
                var d2 = document.createDate.split('T')[1];
                document.createDate = d1[2] + '-' + d1[1] + '-' + d1[0] + 'T' + d2;
                // document.createDate = this.getDateObject(document.createDate).toString();
            }
            document.amount = !document.amount ? 0 : document.amount;
            document.reconciledAmount = !document.reconciledAmount
                ? 0
                : document.reconciledAmount;
            document.commitedAmount = !document.commitedAmount
                ? 0
                : document.commitedAmount;
        }));
        return aux;
    };
    /**
     * @private
     * @param {?} api
     * @return {?}
     */
    CashSalesService.prototype.getUrl = /**
     * @private
     * @param {?} api
     * @return {?}
     */
    function (api) {
        /** @type {?} */
        var url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.peCapability + api);
        return url;
    };
    CashSalesService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CashSalesService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: EndpointsConstants }
    ]; };
    return CashSalesService;
}());
export { CashSalesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CashSalesService.prototype.apiCashDocuments;
    /**
     * @type {?}
     * @private
     */
    CashSalesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CashSalesService.prototype.endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzaFNhbGVzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLXNlcnZpY2VzLXY3LyIsInNvdXJjZXMiOlsibGliL2ludm9pY2VzLXBheW1lbnRzL2Nhc2hTYWxlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUduRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUM7SUFJRSwwQkFBb0IsSUFBZSxFQUFVLFNBQTZCO1FBQXRELFNBQUksR0FBSixJQUFJLENBQVc7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFvQjtRQUN4RSwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztJQUMxQyxDQUFDOzs7Ozs7O0lBRU0sd0NBQWE7Ozs7OztJQUFwQixVQUNFLFdBQW1CLEVBQ25CLFlBQW9CLEVBQ3BCLFdBQW1CO1FBSHJCLGlCQWtCQzs7WUFiTyxRQUFRLEdBQUcsaUJBQWUsV0FBVyxzQkFBaUIsWUFBWSxxQkFBZ0IsV0FBYTs7WUFDL0YsUUFBUSxHQUFNLElBQUksQ0FBQyxnQkFBZ0IsU0FBSSxRQUFVO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUMxQixJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsUUFBUTs7Z0JBQ0osR0FBRyxHQUFtQixRQUFRLENBQUMsSUFBSSxFQUFFO1lBQzNDLE9BQU8sS0FBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNDLENBQUMsRUFBQyxDQUNIO2FBQ0EsU0FBUyxFQUFFO2FBQ1gsSUFBSTs7OztRQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsSUFBSSxFQUFKLENBQUksRUFBQzthQUNsQixLQUFLOzs7O1FBQUMsVUFBQSxLQUFLLElBQUksT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFDLENBQUM7SUFDM0IsQ0FBQzs7Ozs7O0lBRU8sa0RBQXVCOzs7OztJQUEvQixVQUFnQyxHQUFtQjtRQUNqRCxHQUFHLENBQUMsT0FBTzs7Ozs7UUFBQyxVQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1lBQ25CLFFBQVEsQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1lBQ2pDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ3RCLCtDQUErQztZQUMvQyxJQUFJLFFBQVEsQ0FBQyxVQUFVLEVBQUU7O29CQUNqQixFQUFFLEdBQUcsUUFBUSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7b0JBQ2pELEVBQUUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVDLFFBQVEsQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDO2dCQUNuRSw0RUFBNEU7YUFDN0U7WUFDRCxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQ3pELFFBQVEsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0I7Z0JBQ3BELENBQUMsQ0FBQyxDQUFDO2dCQUNILENBQUMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUM7WUFDOUIsUUFBUSxDQUFDLGNBQWMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxjQUFjO2dCQUNoRCxDQUFDLENBQUMsQ0FBQztnQkFDSCxDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Ozs7O0lBRU8saUNBQU07Ozs7O0lBQWQsVUFBZSxHQUFXOztZQUNsQixHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FDcEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEdBQUcsR0FBRyxDQUN0RDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Z0JBMURGLFVBQVU7Ozs7Z0JBRkYsU0FBUztnQkFIVCxrQkFBa0I7O0lBZ0UzQix1QkFBQztDQUFBLEFBM0RELElBMkRDO1NBMURZLGdCQUFnQjs7Ozs7O0lBQzNCLDRDQUFpQzs7Ozs7SUFFckIsZ0NBQXVCOzs7OztJQUFFLHFDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFbmRwb2ludHNDb25zdGFudHMgfSBmcm9tICdAY2VtZXgtY29yZS9jb25zdGFudHMtdjIvZGlzdCc7XG5pbXBvcnQgeyBDYXNoRG9jdW1lbnQgfSBmcm9tICdAY2VtZXgtY29yZS90eXBlcy12Mi9kaXN0L2ludm9pY2VzLXBheW1lbnRzJztcblxuaW1wb3J0IHsgSHR0cENlbWV4IH0gZnJvbSAnLi4vaHR0cC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhc2hTYWxlc1NlcnZpY2Uge1xuICBwcml2YXRlIGFwaUNhc2hEb2N1bWVudHM6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDZW1leCwgcHJpdmF0ZSBlbmRwb2ludHM6IEVuZHBvaW50c0NvbnN0YW50cykge1xuICAgIC8vIFRPRE86IE1PVkUgVE8gUEFUSCBDT05TVEFOVFNcbiAgICB0aGlzLmFwaUNhc2hEb2N1bWVudHMgPSAnY2FzaGRvY3VtZW50cyc7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q3JlZGl0RG9jcyhcbiAgICBjb21wYW55Q29kZTogc3RyaW5nLFxuICAgIGN1c3RvbWVyQ29kZTogc3RyaW5nLFxuICAgIGpvYlNpdGVDb2RlOiBzdHJpbmdcbiAgKTogUHJvbWlzZTxDYXNoRG9jdW1lbnRbXT4ge1xuICAgIGNvbnN0IGFwaVF1ZXJ5ID0gYGNvbXBhbnlDb2RlPSR7Y29tcGFueUNvZGV9JmN1c3RvbWVyQ29kZT0ke2N1c3RvbWVyQ29kZX0mam9iU2l0ZUNvZGU9JHtqb2JTaXRlQ29kZX1gO1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYCR7dGhpcy5hcGlDYXNoRG9jdW1lbnRzfT8ke2FwaVF1ZXJ5fWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybChlbmRwb2ludCkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IENhc2hEb2N1bWVudFtdID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIHJldHVybiB0aGlzLmhhbmRsZUNhc2hEb2N1bWVudHNEYXRhKGF1eCk7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUNhc2hEb2N1bWVudHNEYXRhKGF1eDogQ2FzaERvY3VtZW50W10pOiBDYXNoRG9jdW1lbnRbXSB7XG4gICAgYXV4LmZvckVhY2goKGRvY3VtZW50LCBpKSA9PiB7XG4gICAgICBkb2N1bWVudC5pbmRleCA9IGk7XG4gICAgICBkb2N1bWVudC5mbGFnSW52YWxpZEFtbnQgPSBmYWxzZTtcbiAgICAgIGRvY3VtZW50LmVyck1zZyA9ICcnO1xuICAgICAgZG9jdW1lbnQudG9Db21taXQgPSAwO1xuICAgICAgLy8gZG9jdW1lbnQuY3JlYXRlRGF0ZSA9ICcyMDE3LTAxLTAxVDAwOjAwOjAwJztcbiAgICAgIGlmIChkb2N1bWVudC5jcmVhdGVEYXRlKSB7XG4gICAgICAgIGNvbnN0IGQxID0gZG9jdW1lbnQuY3JlYXRlRGF0ZS5zcGxpdCgnVCcpWzBdLnNwbGl0KCctJyk7XG4gICAgICAgIGNvbnN0IGQyID0gZG9jdW1lbnQuY3JlYXRlRGF0ZS5zcGxpdCgnVCcpWzFdO1xuICAgICAgICBkb2N1bWVudC5jcmVhdGVEYXRlID0gZDFbMl0gKyAnLScgKyBkMVsxXSArICctJyArIGQxWzBdICsgJ1QnICsgZDI7XG4gICAgICAgIC8vIGRvY3VtZW50LmNyZWF0ZURhdGUgPSB0aGlzLmdldERhdGVPYmplY3QoZG9jdW1lbnQuY3JlYXRlRGF0ZSkudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICAgIGRvY3VtZW50LmFtb3VudCA9ICFkb2N1bWVudC5hbW91bnQgPyAwIDogZG9jdW1lbnQuYW1vdW50O1xuICAgICAgZG9jdW1lbnQucmVjb25jaWxlZEFtb3VudCA9ICFkb2N1bWVudC5yZWNvbmNpbGVkQW1vdW50XG4gICAgICAgID8gMFxuICAgICAgICA6IGRvY3VtZW50LnJlY29uY2lsZWRBbW91bnQ7XG4gICAgICBkb2N1bWVudC5jb21taXRlZEFtb3VudCA9ICFkb2N1bWVudC5jb21taXRlZEFtb3VudFxuICAgICAgICA/IDBcbiAgICAgICAgOiBkb2N1bWVudC5jb21taXRlZEFtb3VudDtcbiAgICB9KTtcbiAgICByZXR1cm4gYXV4O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVcmwoYXBpOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuaHR0cC5nZW5lcmF0ZUVuZHBvaW50KFxuICAgICAgdGhpcy5lbmRwb2ludHMuVjEgKyB0aGlzLmVuZHBvaW50cy5wZUNhcGFiaWxpdHkgKyBhcGlcbiAgICApO1xuICAgIHJldHVybiB1cmw7XG4gIH1cbn1cbiJdfQ==