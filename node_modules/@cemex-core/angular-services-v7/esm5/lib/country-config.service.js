/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Response } from '@angular/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { HttpCemex } from './http.service';
import { ProjectSettings } from './project.settings';
import { SessionService } from './session.service';
var CountryConfigService = /** @class */ (function () {
    function CountryConfigService(http, projectEnv, sessionService) {
        var _this = this;
        this.http = http;
        this.projectEnv = projectEnv;
        this.sessionService = sessionService;
        this._countryConfig = new BehaviorSubject(null);
        this._countryConfigApiPath = '/v5/secm/console/countryconfig';
        if (!this._countryConfig.getValue()) {
            this.getCountryConfiguration().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this._countryConfig.next(data);
            }));
        }
    }
    Object.defineProperty(CountryConfigService.prototype, "countryConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._countryConfig.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CountryConfigService.prototype.getCountryConfiguration = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var userCountry = this.sessionService.userCountry || 'US';
        /** @type {?} */
        var url = "" + this.projectEnv.getBaseOrgEnvPath() + this._countryConfigApiPath + "?countryCode=" + userCountry;
        return this.http.get(url).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.json(); })), catchError(this.handleError));
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    CountryConfigService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        var errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            var body = error.json() || '';
            /** @type {?} */
            var err = body.error || JSON.stringify(body);
            errMsg = error.status + " - " + (error.statusText || '');
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return Observable.throw(error);
    };
    CountryConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CountryConfigService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: ProjectSettings },
        { type: SessionService }
    ]; };
    return CountryConfigService;
}());
export { CountryConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype._countryConfig;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype._countryConfigApiPath;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.projectEnv;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.sessionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItc2VydmljZXMtdjcvIiwic291cmNlcyI6WyJsaWIvY291bnRyeS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbkQ7SUFLRSw4QkFDVSxJQUFlLEVBQ2YsVUFBMkIsRUFDM0IsY0FBOEI7UUFIeEMsaUJBVUM7UUFUUyxTQUFJLEdBQUosSUFBSSxDQUFXO1FBQ2YsZUFBVSxHQUFWLFVBQVUsQ0FBaUI7UUFDM0IsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBTmhDLG1CQUFjLEdBQUcsSUFBSSxlQUFlLENBQWlCLElBQUksQ0FBQyxDQUFDO1FBQzNELDBCQUFxQixHQUFHLGdDQUFnQyxDQUFDO1FBTy9ELElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25DLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLFNBQVM7Ozs7WUFBQyxVQUFDLElBQW9CO2dCQUM1RCxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVELHNCQUFXLCtDQUFhOzs7O1FBQXhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzVDLENBQUM7OztPQUFBOzs7O0lBRU0sc0RBQXVCOzs7SUFBOUI7O1lBQ1EsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxJQUFJLElBQUk7O1lBQ3JELEdBQUcsR0FBRyxLQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsR0FDaEQsSUFBSSxDQUFDLHFCQUFxQixxQkFDWixXQUFhO1FBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUM1QixHQUFHOzs7O1FBQUMsVUFBQyxHQUFhLElBQUssT0FBQSxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQVYsQ0FBVSxFQUFDLEVBQ2xDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQzdCLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFFTywwQ0FBVzs7Ozs7SUFBbkIsVUFBb0IsS0FBcUI7OztZQUVuQyxNQUFjO1FBQ2xCLElBQUksS0FBSyxZQUFZLFFBQVEsRUFBRTs7Z0JBQ3ZCLElBQUksR0FBUSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRTs7Z0JBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzlDLE1BQU0sR0FBTSxLQUFLLENBQUMsTUFBTSxZQUFNLEtBQUssQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFFLENBQUM7U0FDeEQ7YUFBTTtZQUNMLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDM0Q7UUFDRCxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sVUFBVSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOztnQkE1Q0YsVUFBVTs7OztnQkFKRixTQUFTO2dCQUNULGVBQWU7Z0JBQ2YsY0FBYzs7SUErQ3ZCLDJCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0E1Q1ksb0JBQW9COzs7Ozs7SUFDL0IsOENBQW1FOzs7OztJQUNuRSxxREFBaUU7Ozs7O0lBRy9ELG9DQUF1Qjs7Ozs7SUFDdkIsMENBQW1DOzs7OztJQUNuQyw4Q0FBc0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgSUNvdW50cnlDb25maWcgfSBmcm9tICdAY2VtZXgtY29yZS90eXBlcy12Mic7XG5cbmltcG9ydCB7IEh0dHBDZW1leCB9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcbmltcG9ydCB7IFByb2plY3RTZXR0aW5ncyB9IGZyb20gJy4vcHJvamVjdC5zZXR0aW5ncyc7XG5pbXBvcnQgeyBTZXNzaW9uU2VydmljZSB9IGZyb20gJy4vc2Vzc2lvbi5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvdW50cnlDb25maWdTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY291bnRyeUNvbmZpZyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8SUNvdW50cnlDb25maWc+KG51bGwpO1xuICBwcml2YXRlIF9jb3VudHJ5Q29uZmlnQXBpUGF0aCA9ICcvdjUvc2VjbS9jb25zb2xlL2NvdW50cnljb25maWcnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgaHR0cDogSHR0cENlbWV4LFxuICAgIHByaXZhdGUgcHJvamVjdEVudjogUHJvamVjdFNldHRpbmdzLFxuICAgIHByaXZhdGUgc2Vzc2lvblNlcnZpY2U6IFNlc3Npb25TZXJ2aWNlXG4gICkge1xuICAgIGlmICghdGhpcy5fY291bnRyeUNvbmZpZy5nZXRWYWx1ZSgpKSB7XG4gICAgICB0aGlzLmdldENvdW50cnlDb25maWd1cmF0aW9uKCkuc3Vic2NyaWJlKChkYXRhOiBJQ291bnRyeUNvbmZpZykgPT4ge1xuICAgICAgICB0aGlzLl9jb3VudHJ5Q29uZmlnLm5leHQoZGF0YSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNvdW50cnlDb25maWcoKTogT2JzZXJ2YWJsZTxJQ291bnRyeUNvbmZpZz4ge1xuICAgIHJldHVybiB0aGlzLl9jb3VudHJ5Q29uZmlnLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgcHVibGljIGdldENvdW50cnlDb25maWd1cmF0aW9uKCk6IE9ic2VydmFibGU8SUNvdW50cnlDb25maWc+IHtcbiAgICBjb25zdCB1c2VyQ291bnRyeSA9IHRoaXMuc2Vzc2lvblNlcnZpY2UudXNlckNvdW50cnkgfHwgJ1VTJztcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLnByb2plY3RFbnYuZ2V0QmFzZU9yZ0VudlBhdGgoKX0ke1xuICAgICAgdGhpcy5fY291bnRyeUNvbmZpZ0FwaVBhdGhcbiAgICB9P2NvdW50cnlDb2RlPSR7dXNlckNvdW50cnl9YDtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpLnBpcGUoXG4gICAgICBtYXAoKHJlczogUmVzcG9uc2UpID0+IHJlcy5qc29uKCkpLFxuICAgICAgY2F0Y2hFcnJvcih0aGlzLmhhbmRsZUVycm9yKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGhhbmRsZUVycm9yKGVycm9yOiBSZXNwb25zZSB8IGFueSkge1xuICAgIC8vIEluIGEgcmVhbCB3b3JsZCBhcHAsIHdlIG1pZ2h0IHVzZSBhIHJlbW90ZSBsb2dnaW5nIGluZnJhc3RydWN0dXJlXG4gICAgbGV0IGVyck1zZzogc3RyaW5nO1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIFJlc3BvbnNlKSB7XG4gICAgICBjb25zdCBib2R5OiBhbnkgPSBlcnJvci5qc29uKCkgfHwgJyc7XG4gICAgICBjb25zdCBlcnIgPSBib2R5LmVycm9yIHx8IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgICAgZXJyTXNnID0gYCR7ZXJyb3Iuc3RhdHVzfSAtICR7ZXJyb3Iuc3RhdHVzVGV4dCB8fCAnJ31gO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJNc2cgPSBlcnJvci5tZXNzYWdlID8gZXJyb3IubWVzc2FnZSA6IGVycm9yLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgIHJldHVybiBPYnNlcnZhYmxlLnRocm93KGVycm9yKTtcbiAgfVxufVxuIl19