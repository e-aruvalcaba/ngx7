/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NumberValidators = /** @class */ (function () {
    function NumberValidators() {
    }
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.isNumeric = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (!isNaN(parseFloat(c.value)) && isFinite(c.value)) {
            return null;
        }
        else {
            return {
                notNumeric: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.onlyTwoDecimals = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        var regexp = /^\d+(\.\d{1,2})?$/;
        if (regexp.test(c.value)) {
            return null;
        }
        else {
            return {
                patternInvalid: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.greaterThanZero = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (parseFloat(c.value) > 0) {
            return null;
        }
        else {
            return {
                lessThanZero: true
            };
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    NumberValidators.isPositive = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        if (parseFloat(c.value) >= 0) {
            return null;
        }
        else {
            return {
                isNegative: true
            };
        }
    };
    /**
     * @param {?} max
     * @return {?}
     */
    NumberValidators.lessThan = /**
     * @param {?} max
     * @return {?}
     */
    function (max) {
        /** @type {?} */
        var maxNumber = max;
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var num = +control.value;
            if (isNaN(num) || num > maxNumber) {
                return {
                    isGreater: true
                };
            }
            return null;
        });
    };
    /**
     * @param {?} min
     * @return {?}
     */
    NumberValidators.greaterThan = /**
     * @param {?} min
     * @return {?}
     */
    function (min) {
        /** @type {?} */
        var minNumber = min;
        return (/**
         * @param {?} control
         * @return {?}
         */
        function (control) {
            /** @type {?} */
            var num = +control.value;
            if (isNaN(num) || num < minNumber) {
                return {
                    isLess: true
                };
            }
            return null;
        });
    };
    return NumberValidators;
}());
export { NumberValidators };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLnZhbGlkYXRvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLXNlcnZpY2VzLXY3LyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvcnMvbnVtYmVyLnZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0lBQUE7SUFtRUEsQ0FBQzs7Ozs7SUFsRWUsMEJBQVM7Ozs7SUFBdkIsVUFBd0IsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BELE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFYSxnQ0FBZTs7OztJQUE3QixVQUE4QixDQUFDOztZQUN2QixNQUFNLEdBQUcsbUJBQW1CO1FBQ2xDLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTztnQkFDTCxjQUFjLEVBQUUsSUFBSTthQUNyQixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7OztJQUVhLGdDQUFlOzs7O0lBQTdCLFVBQThCLENBQUM7UUFDN0IsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMzQixPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPO2dCQUNMLFlBQVksRUFBRSxJQUFJO2FBQ25CLENBQUM7U0FDSDtJQUNILENBQUM7Ozs7O0lBRWEsMkJBQVU7Ozs7SUFBeEIsVUFBeUIsQ0FBQztRQUN4QixJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFYSx5QkFBUTs7OztJQUF0QixVQUF1QixHQUFXOztZQUMxQixTQUFTLEdBQUcsR0FBRztRQUNyQjs7OztRQUFPLFVBQUMsT0FBTzs7Z0JBQ1AsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFDMUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLFNBQVMsRUFBRTtnQkFDakMsT0FBTztvQkFDTCxTQUFTLEVBQUUsSUFBSTtpQkFDaEIsQ0FBQzthQUNIO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLEVBQUM7SUFDSixDQUFDOzs7OztJQUVhLDRCQUFXOzs7O0lBQXpCLFVBQTBCLEdBQVc7O1lBQzdCLFNBQVMsR0FBRyxHQUFHO1FBQ3JCOzs7O1FBQU8sVUFBQyxPQUFPOztnQkFDUCxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztZQUMxQixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsU0FBUyxFQUFFO2dCQUNqQyxPQUFPO29CQUNMLE1BQU0sRUFBRSxJQUFJO2lCQUNiLENBQUM7YUFDSDtZQUNELE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxFQUFDO0lBQ0osQ0FBQztJQUNILHVCQUFDO0FBQUQsQ0FBQyxBQW5FRCxJQW1FQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOdW1iZXJWYWxpZGF0b3JzIHtcbiAgcHVibGljIHN0YXRpYyBpc051bWVyaWMoYyk6IGFueSB7XG4gICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KGMudmFsdWUpKSAmJiBpc0Zpbml0ZShjLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vdE51bWVyaWM6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBvbmx5VHdvRGVjaW1hbHMoYyk6IGFueSB7XG4gICAgY29uc3QgcmVnZXhwID0gL15cXGQrKFxcLlxcZHsxLDJ9KT8kLztcbiAgICBpZiAocmVnZXhwLnRlc3QoYy52YWx1ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXR0ZXJuSW52YWxpZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdyZWF0ZXJUaGFuWmVybyhjKTogYW55IHtcbiAgICBpZiAocGFyc2VGbG9hdChjLnZhbHVlKSA+IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZXNzVGhhblplcm86IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc1Bvc2l0aXZlKGMpOiBhbnkge1xuICAgIGlmIChwYXJzZUZsb2F0KGMudmFsdWUpID49IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc05lZ2F0aXZlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbGVzc1RoYW4obWF4OiBudW1iZXIpIHtcbiAgICBjb25zdCBtYXhOdW1iZXIgPSBtYXg7XG4gICAgcmV0dXJuIChjb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XG4gICAgICBjb25zdCBudW0gPSArY29udHJvbC52YWx1ZTtcbiAgICAgIGlmIChpc05hTihudW0pIHx8IG51bSA+IG1heE51bWJlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzR3JlYXRlcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ3JlYXRlclRoYW4obWluOiBudW1iZXIpIHtcbiAgICBjb25zdCBtaW5OdW1iZXIgPSBtaW47XG4gICAgcmV0dXJuIChjb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XG4gICAgICBjb25zdCBudW0gPSArY29udHJvbC52YWx1ZTtcbiAgICAgIGlmIChpc05hTihudW0pIHx8IG51bSA8IG1pbk51bWJlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzTGVzczogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxufVxuIl19