/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Headers, RequestOptions, Response } from '@angular/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { SessionServiceConstants } from '@cemex-core/constants-v2/dist';
import { Broadcaster } from '@cemex-core/events-v7';
import { HttpCemex } from './http.service';
var SessionService = /** @class */ (function () {
    function SessionService(http, eventBroadcaster, authTokenVersion) {
        this.http = http;
        this.eventBroadcaster = eventBroadcaster;
        this.authTokenVersion = authTokenVersion;
        this.siteDomain = 'SITE_DOMAIN';
        this._siteDomain = window[this.siteDomain] || '';
        this._menuApplication = new BehaviorSubject([]);
        this._currentLegalEntity = new BehaviorSubject(null);
        this._userProfile = null;
        this._beforeLogout = null;
        if (authTokenVersion) {
            switch (authTokenVersion.toLocaleLowerCase()) {
                case 'v6':
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_V6;
                    break;
                default:
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
            }
        }
        else {
            this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
        }
        if (localStorage.getItem('language') === undefined ||
            (localStorage.getItem('language') === null &&
                (sessionStorage.getItem('language') !== undefined && sessionStorage.getItem('language') !== null))) {
            localStorage.setItem('language', sessionStorage.getItem('language'));
        }
    }
    Object.defineProperty(SessionService.prototype, "menuApplicationItems", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._menuApplication.getValue().length === 0) {
                this.reloadAppMenuItems();
            }
            return this._menuApplication.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @return {?}
     */
    SessionService.prototype.setLegalEntity = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        sessionStorage.setItem('user_legal_entity', JSON.stringify(value));
        this.eventBroadcaster.broadcast(Broadcaster.DCM_LEGAL_ENTITY_CHANGE, JSON.stringify(value));
        this._currentLegalEntity.next(value);
    };
    Object.defineProperty(SessionService.prototype, "currentLegalEntity", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currentLegalEntity.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "isLoggedIn", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var accessToken = sessionStorage.getItem('access_token');
            /** @type {?} */
            var jwtToken = sessionStorage.getItem('jwt');
            return (accessToken !== null &&
                accessToken !== undefined &&
                accessToken !== '' &&
                jwtToken != null &&
                jwtToken !== undefined &&
                jwtToken !== '');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SessionService.prototype.logout = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (_this._beforeLogout) {
                _this._beforeLogout.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.logoutApp();
                    observer.next({
                        message: 'success',
                        success: true
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.next({
                        message: error,
                        success: false
                    });
                }));
            }
            else {
                _this.logoutApp();
                observer.next({
                    message: 'success',
                    success: true
                });
            }
            return observer;
        }));
    };
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} generateCookie
     * @param {?=} appName
     * @param {?=} validateTempPassword
     * @return {?}
     */
    SessionService.prototype.login = /**
     * @param {?} user
     * @param {?} password
     * @param {?=} generateCookie
     * @param {?=} appName
     * @param {?=} validateTempPassword
     * @return {?}
     */
    function (user, password, generateCookie, appName, validateTempPassword) {
        var _this = this;
        this.clean();
        /** @type {?} */
        var options = new RequestOptions({
            headers: new Headers({
                'Content-Type': 'application/x-www-form-urlencoded',
                accept: 'text/plain, */*'
            })
        });
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(this._endpoint);
        /** @type {?} */
        var urlPost = this.generateUrlString(user, password, appName);
        return this.http
            .post(endpoint, urlPost, options)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var data, userId;
            return tslib_1.__generator(this, function (_a) {
                data = response.json();
                userId = this.authTokenVersion === 'v6'
                    ? data.userId
                        ? data.userId
                        : data.profile.userId
                    : data.profile.userId;
                this.processDataFromLogin(data, generateCookie);
                this.eventBroadcaster.broadcast(SessionService.LOGIN_SUCCESS_EVENT);
                if (validateTempPassword &&
                    data.profile &&
                    data.profile.hasTemporaryPassword) {
                    return [2 /*return*/, Promise.resolve(data)];
                }
                return [2 /*return*/];
            });
        }); }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            console.error(error);
            _this.eventBroadcaster.broadcast(SessionService.LOGIN_FAIL_EVENT);
            return Promise.reject(error);
        }));
    };
    Object.defineProperty(SessionService.prototype, "userRegion", {
        get: /**
         * @return {?}
         */
        function () {
            return sessionStorage.getItem('region') || 'US';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userCountry", {
        get: /**
         * @return {?}
         */
        function () {
            return sessionStorage.getItem('country') || '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userProfile", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this._userProfile) {
                this.setUserProfile();
            }
            return this._userProfile;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    SessionService.prototype.getLegalEntities = /**
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    function (fetch, page, legalEntityCode) {
        var _this = this;
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_LEGAL_ENTITIES);
        endpoint = this.addQueryParams(endpoint, fetch, page, legalEntityCode);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var responseMap = [];
            /** @type {?} */
            var tmpJson = response.json();
            if (tmpJson) {
                responseMap = response.json();
            }
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return Observable.throw(_this.handleError(e)); })));
    };
    /**
     * @param {?} method
     * @return {?}
     */
    SessionService.prototype.setBeforeLogout = /**
     * @param {?} method
     * @return {?}
     */
    function (method) {
        this._beforeLogout = method;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.getBeforeLogout = /**
     * @return {?}
     */
    function () {
        return this._beforeLogout;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.reloadAppMenuItems = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.getDCMApplications().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            _this._menuApplication.next(result);
        }));
    };
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    SessionService.prototype.createCookie = /**
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    function (name, value, days) {
        /** @type {?} */
        var expires = '';
        if (days) {
            /** @type {?} */
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = date.toUTCString();
        }
        else {
            days = 0;
        }
        /** @type {?} */
        var cookie = name + "=" + value + ";expires=" + expires + ";domain=" + this._siteDomain + ";path=/";
        document.cookie = cookie;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SessionService.prototype.readCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var ca = document.cookie.split(';');
        /** @type {?} */
        var caLen = ca.length;
        /** @type {?} */
        var cookieName = name + "=";
        /** @type {?} */
        var c;
        for (var i = 0; i < caLen; i += 1) {
            c = ca[i].replace(/^\s+/g, '');
            if (c.indexOf(cookieName) === 0) {
                return c.substring(cookieName.length, c.length);
            }
        }
        return null;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    SessionService.prototype.clearCookie = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createCookie(name, '', -1);
    };
    /**
     * @return {?}
     */
    SessionService.prototype.setUserProfile = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var strProfile = sessionStorage.getItem('user_profile');
        /** @type {?} */
        var tmpProfile = this.convertJsonTo(strProfile);
        if (tmpProfile) {
            /** @type {?} */
            var strCustomer = sessionStorage.getItem('user_customer');
            /** @type {?} */
            var userCustomer = this.convertJsonTo(strCustomer);
            if (userCustomer) {
                tmpProfile.customer = userCustomer;
            }
            else {
                console.warn('Exception at parsing User Customer from sessionStore');
            }
            this._userProfile = tmpProfile;
        }
        else {
            console.warn('Exception at parsing User Profile from sessionStore');
        }
    };
    /**
     * @return {?}
     */
    SessionService.prototype.clean = /**
     * @return {?}
     */
    function () {
        this.clearCookie('CemexGoRegion');
        this.clearCookie('up_session');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('expires_in');
        sessionStorage.removeItem('jwt');
        sessionStorage.removeItem('region');
        sessionStorage.removeItem('user_profile');
        sessionStorage.removeItem('user_customer');
        sessionStorage.removeItem('user_legal_entity');
        sessionStorage.removeItem('user_applications');
        // patch-fix for react
        sessionStorage.removeItem('auth_token');
        sessionStorage.removeItem('userInfo');
        sessionStorage.removeItem('country');
        sessionStorage.removeItem('token_data');
        sessionStorage.removeItem('applications');
        sessionStorage.removeItem('role');
        sessionStorage.removeItem('username');
        // new verssion API ( v6 )
        sessionStorage.removeItem('userAuthV6');
        sessionStorage.removeItem('userInfoV6');
        sessionStorage.removeItem('userProfileV6');
        sessionStorage.removeItem('userCustomerV6');
        sessionStorage.removeItem('userApplicationsV6');
        sessionStorage.removeItem('userRolesV6');
    };
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} appName
     * @return {?}
     */
    SessionService.prototype.generateUrlString = /**
     * @param {?} user
     * @param {?} password
     * @param {?=} appName
     * @return {?}
     */
    function (user, password, appName) {
        /** @type {?} */
        var include = '&include=userinfo,profile,applications,roles,customers,oldVersion';
        /** @type {?} */
        var url = 'grant_type=password&scope=security&username=' +
            user +
            '&password=' +
            encodeURIComponent(password) +
            '&client_id=' +
            this.http.clientId;
        if (appName) {
            url = url + '&app_name=' + appName;
        }
        if (this.authTokenVersion) {
            if (this.authTokenVersion.toLowerCase() === 'v6') {
                url = url + "&userinformation=false" + include;
            }
        }
        return url;
    };
    /**
     * @param {?} data
     * @param {?=} generateCookie
     * @return {?}
     */
    SessionService.prototype.processDataFromLogin = /**
     * @param {?} data
     * @param {?=} generateCookie
     * @return {?}
     */
    function (data, generateCookie) {
        // session cookie
        if (generateCookie) {
            /** @type {?} */
            var sessionCookie = {
                auth: data.oauth2.access_token,
                expires_in: data.oauth2.expires_in,
                jwt: data.jwt,
                refresh_token: data.oauth2.refresh_token,
                region: data.oauth2.region,
            };
            this.createCookie('up_session', JSON.stringify(sessionCookie), null);
        }
        this.createCookie('CemexGoRegion', data.oauth2.region, null);
        sessionStorage.setItem('access_token', data.oauth2.access_token);
        sessionStorage.setItem('refresh_token', data.oauth2.refresh_token);
        sessionStorage.setItem('expires_in', data.oauth2.expires_in);
        sessionStorage.setItem('jwt', data.jwt);
        sessionStorage.setItem('auth_token', data.oauth2.access_token);
        sessionStorage.setItem('user_profile', JSON.stringify(data.profile));
        sessionStorage.setItem('user_customer', JSON.stringify(data.customer));
        sessionStorage.setItem('user_applications', JSON.stringify(data.applications));
        // react
        sessionStorage.setItem('userInfo', JSON.stringify(data));
        sessionStorage.setItem('country', data.country);
        sessionStorage.setItem('token_data', JSON.stringify(data));
        sessionStorage.setItem('applications', JSON.stringify(data.applications));
        sessionStorage.setItem('region', data.oauth2.region);
        sessionStorage.setItem('role', data.role);
        sessionStorage.setItem('username', data.profile.userAccount);
        this.setUserProfile();
        // call API V6 ( New Model)
        /** @type {?} */
        var accessToKen = {
            oauth2: data.oauth2,
            // tslint:disable-next-line:object-literal-sort-keys
            jwt: data.jwt,
            userId: data.userId ? data.userId : data.profile.userId,
        };
        /** @type {?} */
        var encryptData = this.encrypt(JSON.stringify(accessToKen));
        sessionStorage.setItem('userAuthV6', encryptData);
        if (data._users) {
            /** @type {?} */
            var firstUser = data._users[0];
            /** @type {?} */
            var user = {
                accountType: firstUser.accountType,
                countryCode: firstUser.country.countryCode,
                customerId: (firstUser.customer) ? firstUser.customer.customerId : 0,
                firstName: firstUser.firstName,
                fullName: firstUser.fullName,
                lastName: firstUser.lastName,
                phoneNumber: firstUser.phoneNumber,
                userAccount: firstUser.userAccount,
                userId: firstUser.userId,
                userSelectedId: firstUser.userSelectedId,
                userStatus: firstUser.userStatus,
                userType: firstUser.userType,
            };
            /** @type {?} */
            var encryptUser = this.encrypt(JSON.stringify(user));
            sessionStorage.setItem('userInfoV6', encryptUser);
        }
        if (data._profile) {
            /** @type {?} */
            var dataProfile = data._profile;
            /** @type {?} */
            var profile = {
                allowEmailUpdates: dataProfile.allowEmailUpdates,
                allowInformationShare: dataProfile.allowInformationShare,
                hasTemporaryPassword: dataProfile.hasTemporaryPassword,
                userEmail: dataProfile.userEmail,
                userId: dataProfile.userId,
                userPosition: dataProfile.userPosition,
                userProfileId: dataProfile.userProfileId,
            };
            /** @type {?} */
            var encryptProfile = this.encrypt(JSON.stringify(profile));
            sessionStorage.setItem('userProfileV6', encryptProfile);
        }
        if (data._customers) {
            /** @type {?} */
            var dataCustomer = data._customers;
            /** @type {?} */
            var customer = {
                countryCode: dataCustomer.country.countryCode,
                customerCode: dataCustomer.customerCode,
                customerCodeLZR: dataCustomer.customerCodeLZR,
                customerDesc: dataCustomer.customerDesc,
                customerDesc2: dataCustomer.customerDesc2,
                customerId: dataCustomer.customerId,
                email: dataCustomer.email,
                faxNumber: dataCustomer.faxNumber,
                phoneNumber: dataCustomer.phoneNumber,
                regionId: dataCustomer.region.regionId,
                vAT: dataCustomer.vAT,
            };
            /** @type {?} */
            var encryptcustomer = this.encrypt(JSON.stringify(customer));
            sessionStorage.setItem('userCustomerV6', encryptcustomer);
        }
        if (data._applications) {
            /** @type {?} */
            var apps = data._applications.map((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                return {
                    applicationCode: app.applicationCode,
                    applicationId: app.applicationId,
                    applicationType: app.applicationType,
                    isVisible: app.isVisible,
                };
            }));
            /** @type {?} */
            var encryptApplications = this.encrypt(JSON.stringify(apps));
            sessionStorage.setItem('userApplicationsV6', encryptApplications);
        }
        if (data._roles) {
            /** @type {?} */
            var roles = data._roles.map((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                return {
                    applicationId: role.application.applicationId,
                    isInternal: role.isInternal,
                    isOptional: role.isOptional,
                    isVisible: role.isVisible,
                    roleCode: role.roleCode,
                    roleId: role.roleId,
                    roleType: role.roleType,
                };
            }));
            /** @type {?} */
            var encryptRoles = this.encrypt(JSON.stringify(roles));
            sessionStorage.setItem('userRolesV6', encryptRoles);
        }
    };
    /**
     * @return {?}
     */
    SessionService.prototype.getDCMApplications = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_APPLICATION_MENU);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var tmpJson = response.json();
            if (!tmpJson || tmpJson === undefined) {
                console.warn('Configuration of menu application is empty!!');
                return [];
            }
            /** @type {?} */
            var responseMap = (/** @type {?} */ (response.json()));
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return Observable.throw(_this.handleError(e)); })));
    };
    /**
     * @template T
     * @param {?} obj
     * @return {?}
     */
    SessionService.prototype.convertJsonTo = /**
     * @template T
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        try {
            /** @type {?} */
            var tmpJson = JSON.parse(obj);
            return (/** @type {?} */ (tmpJson));
        }
        catch (e) {
            console.warn('Exception at parsing object from sessionStore:', e);
        }
        return null;
    };
    Object.defineProperty(SessionService.prototype, "customer", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var result;
            /** @type {?} */
            var str = sessionStorage.getItem('user_customer');
            if (str) {
                try {
                    /** @type {?} */
                    var profile = JSON.parse(str);
                    result = (/** @type {?} */ (profile));
                }
                catch (e) {
                    console.warn('Exception at parsing user_customer from sessionStore:', e);
                    return null;
                }
            }
            else {
                console.warn('There is no user customer at session storage');
            }
            return result;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} error
     * @return {?}
     */
    SessionService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        var errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            var body = error.json() || '';
            errMsg = error.status + " - " + (error.statusText || '');
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return throwError(error);
    };
    /**
     * @param {?} endpoint
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    SessionService.prototype.addQueryParams = /**
     * @param {?} endpoint
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    function (endpoint, fetch, page, legalEntityCode) {
        /** @type {?} */
        var validPagination = Number.isInteger(fetch) && Number.isInteger(page);
        endpoint += validPagination ? '?fetch=' + fetch + '&page=' + page : '';
        endpoint +=
            legalEntityCode && validPagination
                ? '&legalEntityCode=' + legalEntityCode
                : legalEntityCode && !validPagination
                    ? '?legalEntityCode=' + legalEntityCode
                    : '';
        return endpoint;
    };
    /**
     * @return {?}
     */
    SessionService.prototype.logoutApp = /**
     * @return {?}
     */
    function () {
        this.clean();
        this.eventBroadcaster.broadcast(Broadcaster.DCM_APP_LOGOUT);
    };
    Object.defineProperty(SessionService.prototype, "userAuth", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userAuthV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userInfo", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userInfoV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userProfileV6", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userProfileV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userCustomer", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userCustomerV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userApplications", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userApplicationsV6')));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SessionService.prototype, "userRoles", {
        get: /**
         * @return {?}
         */
        function () {
            return JSON.parse(this.decrypt(sessionStorage.getItem('userRolesV6')));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} str
     * @return {?}
     */
    SessionService.prototype.encrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    /**
     * @param {?} str
     * @return {?}
     */
    SessionService.prototype.decrypt = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    };
    SessionService.LOGIN_SUCCESS_EVENT = 'LOGIN_SUCCESS_EVENT';
    SessionService.LOGIN_FAIL_EVENT = 'LOGIN_FAIL_EVENT';
    SessionService.LOGIN_LOGOUT_EVENT = 'LOGIN_LOGOUT_EVENT';
    SessionService.AUTH_TOKEN_VERSION = 'auth_token_version';
    SessionService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    SessionService.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: Broadcaster },
        { type: String, decorators: [{ type: Inject, args: [SessionService.AUTH_TOKEN_VERSION,] }, { type: Optional }] }
    ]; };
    return SessionService;
}());
export { SessionService };
if (false) {
    /** @type {?} */
    SessionService.LOGIN_SUCCESS_EVENT;
    /** @type {?} */
    SessionService.LOGIN_FAIL_EVENT;
    /** @type {?} */
    SessionService.LOGIN_LOGOUT_EVENT;
    /** @type {?} */
    SessionService.AUTH_TOKEN_VERSION;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.siteDomain;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._siteDomain;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._endpoint;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._menuApplication;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._currentLegalEntity;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._userProfile;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._beforeLogout;
    /**
     * @type {?}
     * @protected
     */
    SessionService.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    SessionService.prototype.eventBroadcaster;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.authTokenVersion;
}
//# sourceMappingURL=data:application/json;base64,