/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { EndpointsConstants } from '@cemex-core/constants-v2/dist';
import { HttpCemex } from './http.service';
var FinancialDocuments = /** @class */ (function () {
    function FinancialDocuments(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
    }
    /**
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntity = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentity'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            return aux;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @return {?}
     */
    FinancialDocuments.prototype.getAllLegalEntityCustomers = /**
     * @return {?}
     */
    function () {
        return this.http
            .get(this.getUrl('legalentitycustomers'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityByCustomer = /**
     * @param {?} customerCode
     * @return {?}
     */
    function (customerCode) {
        return this.http
            .get(this.getUrl('legalentity?customerCode=' + customerCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.company;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} companyCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityByCompany = /**
     * @param {?} companyCode
     * @return {?}
     */
    function (companyCode) {
        return this.http
            .get(this.getUrl('legalentity?companyCode=' + companyCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    FinancialDocuments.prototype.getLegalEntityJobsites = /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    function (customerCode, companyCode) {
        /** @type {?} */
        var api = 'legalentityjobsites?companyCode=' +
            companyCode +
            '&customerCode=' +
            customerCode;
        return this.http
            .get(this.getUrl(api))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            /** @type {?} */
            var aux = response.json();
            /** @type {?} */
            var snapshot = aux.responseLegalEntity.jobSite;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; }))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return error; }));
    };
    /**
     * @private
     * @param {?} api
     * @return {?}
     */
    FinancialDocuments.prototype.getUrl = /**
     * @private
     * @param {?} api
     * @return {?}
     */
    function (api) {
        /** @type {?} */
        var url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.armCapability + api);
        return url;
    };
    FinancialDocuments.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FinancialDocuments.ctorParameters = function () { return [
        { type: HttpCemex },
        { type: EndpointsConstants }
    ]; };
    return FinancialDocuments;
}());
export { FinancialDocuments };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FinancialDocuments.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FinancialDocuments.prototype.endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYW5jaWFsRG9jdW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLXNlcnZpY2VzLXY3LyIsInNvdXJjZXMiOlsibGliL2ZpbmFuY2lhbERvY3VtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQVFuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7SUFFRSw0QkFBb0IsSUFBZSxFQUFVLFNBQTZCO1FBQXRELFNBQUksR0FBSixJQUFJLENBQVc7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFvQjtJQUFHLENBQUM7Ozs7SUFFdkUsMkNBQWM7OztJQUFyQjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUk7YUFDYixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUMvQixJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsUUFBUTs7Z0JBQ0osR0FBRyxHQUFtQixRQUFRLENBQUMsSUFBSSxFQUFFO1lBQzNDLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFDLENBQ0g7YUFDQSxTQUFTLEVBQUU7YUFDWCxJQUFJOzs7O1FBQUMsVUFBQSxJQUFJLElBQUksT0FBQSxJQUFJLEVBQUosQ0FBSSxFQUFDO2FBQ2xCLEtBQUs7Ozs7UUFBQyxVQUFBLEtBQUssSUFBSSxPQUFBLEtBQUssRUFBTCxDQUFLLEVBQUMsQ0FBQztJQUMzQixDQUFDOzs7O0lBRU0sdURBQTBCOzs7SUFBakM7UUFDRSxPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNC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LEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLEdBQUcsR0FBRyxDQUN2RDtRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQzs7Z0JBM0ZGLFVBQVU7Ozs7Z0JBRkYsU0FBUztnQkFSVCxrQkFBa0I7O0lBc0czQix5QkFBQztDQUFBLEFBNUZELElBNEZDO1NBM0ZZLGtCQUFrQjs7Ozs7O0lBQ2pCLGtDQUF1Qjs7Ozs7SUFBRSx1Q0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRW5kcG9pbnRzQ29uc3RhbnRzIH0gZnJvbSAnQGNlbWV4LWNvcmUvY29uc3RhbnRzLXYyL2Rpc3QnO1xuaW1wb3J0IHtcbiAgQ29tcGFueSxcbiAgQ3VzdG9tZXIsXG4gIEpvYnNpdGUsXG4gIExlZ2FsRW50aXR5RFRPXG59IGZyb20gJ0BjZW1leC1jb3JlL3R5cGVzLXYyL2Rpc3QnO1xuXG5pbXBvcnQgeyBIdHRwQ2VtZXggfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGaW5hbmNpYWxEb2N1bWVudHMge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDZW1leCwgcHJpdmF0ZSBlbmRwb2ludHM6IEVuZHBvaW50c0NvbnN0YW50cykge31cblxuICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHkoKTogUHJvbWlzZTxMZWdhbEVudGl0eURUTz4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQodGhpcy5nZXRVcmwoJ2xlZ2FsZW50aXR5JykpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IExlZ2FsRW50aXR5RFRPID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIHJldHVybiBhdXg7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWxsTGVnYWxFbnRpdHlDdXN0b21lcnMoKTogUHJvbWlzZTxDdXN0b21lcltdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybCgnbGVnYWxlbnRpdHljdXN0b21lcnMnKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1eDogTGVnYWxFbnRpdHlEVE8gPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhdXgucmVzcG9uc2VMZWdhbEVudGl0eS5jdXN0b21lcjtcbiAgICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUN1c3RvbWVyKGN1c3RvbWVyQ29kZTogYW55KTogUHJvbWlzZTxDb21wYW55W10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMuZ2V0VXJsKCdsZWdhbGVudGl0eT9jdXN0b21lckNvZGU9JyArIGN1c3RvbWVyQ29kZSkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IExlZ2FsRW50aXR5RFRPID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXV4LnJlc3BvbnNlTGVnYWxFbnRpdHkuY29tcGFueTtcbiAgICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlCeUNvbXBhbnkoY29tcGFueUNvZGU6IGFueSk6IFByb21pc2U8Q3VzdG9tZXJbXT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQodGhpcy5nZXRVcmwoJ2xlZ2FsZW50aXR5P2NvbXBhbnlDb2RlPScgKyBjb21wYW55Q29kZSkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IExlZ2FsRW50aXR5RFRPID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXV4LnJlc3BvbnNlTGVnYWxFbnRpdHkuY3VzdG9tZXI7XG4gICAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdldExlZ2FsRW50aXR5Sm9ic2l0ZXMoXG4gICAgY3VzdG9tZXJDb2RlOiBhbnksXG4gICAgY29tcGFueUNvZGU6IGFueVxuICApOiBQcm9taXNlPEpvYnNpdGVbXT4ge1xuICAgIGNvbnN0IGFwaSA9XG4gICAgICAnbGVnYWxlbnRpdHlqb2JzaXRlcz9jb21wYW55Q29kZT0nICtcbiAgICAgIGNvbXBhbnlDb2RlICtcbiAgICAgICcmY3VzdG9tZXJDb2RlPScgK1xuICAgICAgY3VzdG9tZXJDb2RlO1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQodGhpcy5nZXRVcmwoYXBpKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1eDogTGVnYWxFbnRpdHlEVE8gPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhdXgucmVzcG9uc2VMZWdhbEVudGl0eS5qb2JTaXRlO1xuICAgICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oZGF0YSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VXJsKGFwaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmh0dHAuZ2VuZXJhdGVFbmRwb2ludChcbiAgICAgIHRoaXMuZW5kcG9pbnRzLlYxICsgdGhpcy5lbmRwb2ludHMuYXJtQ2FwYWJpbGl0eSArIGFwaVxuICAgICk7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuIl19