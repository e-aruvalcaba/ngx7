/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Http } from '@angular/http';
import { Subject } from 'rxjs';
import { Broadcaster } from '@cemex-core/events-v7';
var TranslationService = /** @class */ (function () {
    function TranslationService(eventBroadcaster, http, _productPath, useTranslationServer, _translationUrl) {
        this.eventBroadcaster = eventBroadcaster;
        this.http = http;
        this._productPath = _productPath;
        this.useTranslationServer = useTranslationServer;
        this._translationUrl = _translationUrl;
        this._useTranslationServer = false;
        this.productPath = '';
        this._localeData = new Subject();
        this.productPath = _productPath || '/';
        this._useTranslationServer = useTranslationServer || false;
        if (this._translationUrl === null) {
            this._translationUrl = '/translate/translate';
        }
        if (this.isRunningOnBrowser()) {
            /** @type {?} */
            var comingFromReact = ((/** @type {?} */ (global))).sessionStorage.getItem('language') || 'en_US';
            /** @type {?} */
            var langLocalStorage = ((/** @type {?} */ (global))).localStorage.getItem('language');
            if (comingFromReact.indexOf('es') !== -1 && !this._useTranslationServer) {
                langLocalStorage = 'es';
                ((/** @type {?} */ (global))).localStorage.setItem('language', 'es');
            }
            else if (comingFromReact.indexOf('en') !== -1 &&
                !this._useTranslationServer) {
                langLocalStorage = 'en';
                ((/** @type {?} */ (global))).localStorage.setItem('language', 'en');
            }
            else {
                langLocalStorage = comingFromReact;
                ((/** @type {?} */ (global))).localStorage.setItem('language', langLocalStorage);
            }
            /** @type {?} */
            var localLang = void 0;
            if (this._useTranslationServer) {
                this.lang(langLocalStorage ? langLocalStorage : 'en_US');
                localLang = langLocalStorage ? langLocalStorage : 'en_US';
            }
            else {
                this.lang(langLocalStorage ? langLocalStorage : 'en');
                localLang = langLocalStorage ? langLocalStorage : 'en';
            }
            // add this next line to correct react projects
            if (localLang === 'en') {
                localLang = localLang + '_US';
            }
            else if (localLang === 'es') {
                localLang = localLang + '_MX';
            }
            ((/** @type {?} */ (global))).sessionStorage.setItem('language', localLang);
        }
        else {
            if (this._useTranslationServer) {
                this.lang('en_US');
            }
            else {
                this.lang('en');
            }
        }
    }
    /**
     * st comes from static-translation
     */
    /**
     * st comes from static-translation
     * @param {?} textID
     * @return {?}
     */
    TranslationService.st = /**
     * st comes from static-translation
     * @param {?} textID
     * @return {?}
     */
    function (textID) {
        /** @type {?} */
        var textValue = this.translation.get(textID);
        if (!textValue || textValue === undefined) {
            return 'NOT:' + textID;
        }
        return textValue;
    };
    /**
     * gets all translations
     */
    /**
     * gets all translations
     * @return {?}
     */
    TranslationService.all = /**
     * gets all translations
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.translation;
        return result;
    };
    Object.defineProperty(TranslationService.prototype, "localeData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._localeData.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TranslationService.prototype.isRunningOnBrowser = /**
     * @return {?}
     */
    function () {
        return ((/** @type {?} */ (global))) !== null && ((/** @type {?} */ (global))) !== undefined;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TranslationService.prototype.onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.labels = value;
        this._localeData.next(value);
    };
    /**
     * this method is left here for backwards compatibility
     */
    /**
     * this method is left here for backwards compatibility
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.lang = /**
     * this method is left here for backwards compatibility
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        var _this = this;
        if (lang === TranslationService.language) {
            return;
        }
        TranslationService.language = lang;
        // add this next line to correct react projects, need to correct this
        /** @type {?} */
        var localLang = TranslationService.language;
        if (localLang === 'en') {
            localLang = localLang + '_US';
        }
        else if (localLang === 'es') {
            localLang = localLang + '_MX';
        }
        if (this.isRunningOnBrowser()) {
            sessionStorage.setItem('language', localLang);
        }
        // if the language is only 2 letters it might be a legacy application
        if (!this._useTranslationServer) {
            this.http
                .get(this.productPath + 'vendor/locale-' + lang + '.json')
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateTranslation(response.json()); }))
                .catch(this.handleError);
        }
        else {
            // if the translation name is bigger than 2 letters, request to external server
            this.http
                .get(this._translationUrl + this.productPath + localLang)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateTranslation(response.json()); }))
                .catch(this.handleError);
        }
    };
    /**
     * @param {?} lang
     * @return {?}
     */
    TranslationService.prototype.isoLang = /**
     * @param {?} lang
     * @return {?}
     */
    function (lang) {
        // must contain either one of these symbols
        if (lang.indexOf('-') !== -1 || lang.indexOf('_') !== -1) {
            TranslationService.language = lang;
            ((/** @type {?} */ (global))).sessionStorage.setItem('language', lang);
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    TranslationService.prototype.file = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        this.http
            .get(url)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return _this.populateTranslation(response.json()); }))
            .catch(this.handleError);
    };
    /**
     * pt comes from public-translation
     */
    /**
     * pt comes from public-translation
     * @param {?} textID
     * @return {?}
     */
    TranslationService.prototype.pt = /**
     * pt comes from public-translation
     * @param {?} textID
     * @return {?}
     */
    function (textID) {
        /** @type {?} */
        var textValue = TranslationService.translation.get(textID);
        if (!textValue || textValue === undefined) {
            return 'NOT:' + textID;
        }
        return textValue;
    };
    /**
     * @param {?} textId
     * @return {?}
     */
    TranslationService.prototype.getLabel = /**
     * @param {?} textId
     * @return {?}
     */
    function (textId) {
        /** @type {?} */
        var textValue = TranslationService.translation.get(textId);
        if (!textValue) {
            return undefined;
        }
        return textValue;
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.getlang = /**
     * @return {?}
     */
    function () {
        return TranslationService.language;
    };
    /**
     * @return {?}
     */
    TranslationService.prototype.getCountryCode = /**
     * @return {?}
     */
    function () {
        return TranslationService.language.split('_')[1];
    };
    /**
     * @param {?} result
     * @return {?}
     */
    TranslationService.prototype.populateTranslation = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(result)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                TranslationService.translation.set(item, result[item]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.eventBroadcaster.broadcast(Broadcaster.DCM_LANGUAGE_FETCHED, TranslationService.language);
        this.onChange(result);
    };
    /**
     * @param {?} error
     * @return {?}
     */
    TranslationService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return Promise.reject(error.message || error);
    };
    TranslationService.translation = new Map();
    TranslationService.language = '';
    // Must be set on path constants
    TranslationService.PRODUCT_PATH = 'PRODUCT_PATH';
    TranslationService.USE_TRANSLATION_SERVER = 'USE_TRANSLATION_SERVER';
    TranslationService.TRANSLATION_BASE_URL = 'TRANSLATION_BASE_URL';
    TranslationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TranslationService.ctorParameters = function () { return [
        { type: Broadcaster },
        { type: Http },
        { type: String, decorators: [{ type: Inject, args: [TranslationService.PRODUCT_PATH,] }, { type: Optional }] },
        { type: Boolean, decorators: [{ type: Inject, args: [TranslationService.USE_TRANSLATION_SERVER,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [TranslationService.TRANSLATION_BASE_URL,] }, { type: Optional }] }
    ]; };
    return TranslationService;
}());
export { TranslationService };
if (false) {
    /** @type {?} */
    TranslationService.translation;
    /** @type {?} */
    TranslationService.language;
    /** @type {?} */
    TranslationService.PRODUCT_PATH;
    /** @type {?} */
    TranslationService.USE_TRANSLATION_SERVER;
    /** @type {?} */
    TranslationService.TRANSLATION_BASE_URL;
    /** @type {?} */
    TranslationService.prototype.labels;
    /** @type {?} */
    TranslationService.prototype._useTranslationServer;
    /** @type {?} */
    TranslationService.prototype.productPath;
    /** @type {?} */
    TranslationService.prototype._localeData;
    /** @type {?} */
    TranslationService.prototype.eventBroadcaster;
    /** @type {?} */
    TranslationService.prototype.http;
    /** @type {?} */
    TranslationService.prototype._productPath;
    /** @type {?} */
    TranslationService.prototype.useTranslationServer;
    /** @type {?} */
    TranslationService.prototype._translationUrl;
}
//# sourceMappingURL=data:application/json;base64,