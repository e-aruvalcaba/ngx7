/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Http } from '@angular/http';
import { Broadcaster } from '@cemex-core/events-v7';
var FeatureToggleService = /** @class */ (function () {
    function FeatureToggleService(eventBroadcaster, http, _productPath, _productEnvironment, localManifest) {
        this.eventBroadcaster = eventBroadcaster;
        this.http = http;
        this._productPath = _productPath;
        this._productEnvironment = _productEnvironment;
        this.localManifest = localManifest;
        this.productPath = '';
        this.productEnvironment = '';
        this.productPath = _productPath || '/';
        this.productEnvironment = _productEnvironment || 'development';
        this.getFeatureList(this.localManifest || false);
    }
    /**
     * gets all features
     */
    /**
     * gets all features
     * @return {?}
     */
    FeatureToggleService.all = /**
     * gets all features
     * @return {?}
     */
    function () {
        /** @type {?} */
        var result = this.featureList;
        return result;
    };
    /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     */
    /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    FeatureToggleService.prototype.feature = /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    function (featureId, releaseVersion, featureVersion, hostName) {
        var _this = this;
        if (typeof featureId === 'string') {
            return this.coreValidator(featureId, releaseVersion, featureVersion, hostName);
        }
        else {
            featureId.forEach((/**
             * @param {?} singleFeature
             * @return {?}
             */
            function (singleFeature) {
                if (!_this.coreValidator(singleFeature, releaseVersion, featureVersion, hostName)) {
                    return false;
                }
            }));
        }
        return true;
    };
    /**
     * this method returns all list of features
     */
    /**
     * this method returns all list of features
     * @return {?}
     */
    FeatureToggleService.prototype.getAll = /**
     * this method returns all list of features
     * @return {?}
     */
    function () {
        return FeatureToggleService.featureList;
    };
    /**
     * this method allows to load the feature list from the file
     */
    /**
     * this method allows to load the feature list from the file
     * @param {?} loadFromLocalList
     * @return {?}
     */
    FeatureToggleService.prototype.getFeatureList = /**
     * this method allows to load the feature list from the file
     * @param {?} loadFromLocalList
     * @return {?}
     */
    function (loadFromLocalList) {
        var _this = this;
        // if the loadfromlocallist is true, then load the local-feature.json file
        if (loadFromLocalList) {
            this.http
                .get(this.productPath + 'vendor/local-feature.json')
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateFeatures(response.json()); }))
                .catch(this.handleError);
        }
        else {
            // if the API is ready then switch is this one
            this.http
                .get('/feature/api' + this.productPath)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.populateFeatures(response.json()); }))
                .catch(this.handleError);
        }
    };
    /**
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    FeatureToggleService.prototype.coreValidator = /**
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    function (featureId, releaseVersion, featureVersion, hostName) {
        // todo smaller refactor
        /** @type {?} */
        var localFind = FeatureToggleService.featureList.get(featureId);
        if (localFind === undefined) {
            return false;
        }
        // if it is found then verify against the country
        if (localFind.country !== null && localFind.country !== undefined) {
            // we can take the country from the session storage
            if (window.sessionStorage.getItem('country').indexOf(localFind.country) ===
                -1) {
                return false;
            }
        }
        if (localFind.role !== null && localFind.role !== undefined) {
            /** @type {?} */
            var isRoleAssigned_1 = false;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (((/** @type {?} */ (role))).roleCode === localFind.role) {
                        isRoleAssigned_1 = true;
                    }
                }));
            }));
            if (!isRoleAssigned_1) {
                return false;
            }
        }
        if (localFind.role_match !== null && localFind.role_match !== undefined) {
            /** @type {?} */
            var rolesAssigned_1 = 0;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (localFind.role_match.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned_1 = rolesAssigned_1 + 1;
                    }
                }));
            }));
            if (rolesAssigned_1 !== localFind.role_match.split(',').length) {
                return false;
            }
        }
        if (localFind.role_any !== null && localFind.role_any !== undefined) {
            /** @type {?} */
            var rolesAssigned_2 = 0;
            /** @type {?} */
            var appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            function (app) {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    if (localFind.role_any.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned_2 = rolesAssigned_2 + 1;
                    }
                }));
            }));
            if (rolesAssigned_2 === 0) {
                return false;
            }
        }
        if (localFind.environment !== null && localFind.environment !== undefined) {
            // verify the injection of the environment
            if (localFind.environment !== this.productEnvironment) {
                return false;
            }
        }
        if (localFind.release_version !== null &&
            localFind.release_version !== undefined) {
            // verify the injection of the environment
            if (localFind.release_version !== releaseVersion) {
                return false;
            }
        }
        if (localFind.feature_version !== null &&
            localFind.feature_version !== undefined) {
            // verify the injection of the environment
            if (localFind.feature_version !== featureVersion) {
                return false;
            }
        }
        if (localFind.host_name !== null && localFind.host_name !== undefined) {
            // verify the injection of the environment
            if (localFind.host_name !== hostName) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} error
     * @return {?}
     */
    FeatureToggleService.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        return Promise.reject(error.message || error);
    };
    /**
     * @param {?} result
     * @return {?}
     */
    FeatureToggleService.prototype.populateFeatures = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(result)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                FeatureToggleService.featureList.set(((/** @type {?} */ (result[item]))).feature, result[item]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // this.eventBroadcaster.broadcast(Broadcaster.DCM_LANGUAGE_FETCHED, TranslationService.language);
        // this.onChange(result);
    };
    FeatureToggleService.featureList = new Map();
    FeatureToggleService.language = '';
    // Must be set on path constants
    FeatureToggleService.PRODUCT_PATH = 'PRODUCT_PATH';
    FeatureToggleService.ENVIRONMENT = 'PRODUCT_PATH';
    FeatureToggleService.USE_LOCAL_MANIFEST = 'USE_LOCAL_MANIFEST';
    FeatureToggleService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FeatureToggleService.ctorParameters = function () { return [
        { type: Broadcaster },
        { type: Http },
        { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.PRODUCT_PATH,] }, { type: Optional }] },
        { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.ENVIRONMENT,] }, { type: Optional }] },
        { type: Boolean, decorators: [{ type: Inject, args: [FeatureToggleService.USE_LOCAL_MANIFEST,] }, { type: Optional }] }
    ]; };
    return FeatureToggleService;
}());
export { FeatureToggleService };
if (false) {
    /** @type {?} */
    FeatureToggleService.featureList;
    /** @type {?} */
    FeatureToggleService.language;
    /** @type {?} */
    FeatureToggleService.PRODUCT_PATH;
    /** @type {?} */
    FeatureToggleService.ENVIRONMENT;
    /** @type {?} */
    FeatureToggleService.USE_LOCAL_MANIFEST;
    /** @type {?} */
    FeatureToggleService.prototype.productPath;
    /** @type {?} */
    FeatureToggleService.prototype.productEnvironment;
    /** @type {?} */
    FeatureToggleService.prototype.eventBroadcaster;
    /** @type {?} */
    FeatureToggleService.prototype.http;
    /** @type {?} */
    FeatureToggleService.prototype._productPath;
    /** @type {?} */
    FeatureToggleService.prototype._productEnvironment;
    /** @type {?} */
    FeatureToggleService.prototype.localManifest;
}
/**
 * @record
 */
export function IFeatureItem() { }
if (false) {
    /** @type {?} */
    IFeatureItem.prototype.feature;
    /** @type {?} */
    IFeatureItem.prototype.option;
    /** @type {?} */
    IFeatureItem.prototype.environment;
    /** @type {?} */
    IFeatureItem.prototype.role;
    /** @type {?} */
    IFeatureItem.prototype.country;
    /** @type {?} */
    IFeatureItem.prototype.release_version;
    /** @type {?} */
    IFeatureItem.prototype.feature_version;
    /** @type {?} */
    IFeatureItem.prototype.host_name;
    /** @type {?} */
    IFeatureItem.prototype.role_match;
    /** @type {?} */
    IFeatureItem.prototype.role_any;
}
/**
 * @record
 */
export function IApplication() { }
if (false) {
    /** @type {?} */
    IApplication.prototype.applicationCode;
    /** @type {?} */
    IApplication.prototype.applicationId;
    /** @type {?} */
    IApplication.prototype.roles;
}
/**
 * @record
 */
export function IRole() { }
if (false) {
    /** @type {?} */
    IRole.prototype.roleCode;
    /** @type {?} */
    IRole.prototype.roleId;
}
//# sourceMappingURL=data:application/json;base64,