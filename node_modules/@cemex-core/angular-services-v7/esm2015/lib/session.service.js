/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Headers, RequestOptions, Response } from '@angular/http';
import { BehaviorSubject, Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { SessionServiceConstants } from '@cemex-core/constants-v2/dist';
import { Broadcaster } from '@cemex-core/events-v7';
import { HttpCemex } from './http.service';
export class SessionService {
    /**
     * @param {?} http
     * @param {?} eventBroadcaster
     * @param {?} authTokenVersion
     */
    constructor(http, eventBroadcaster, authTokenVersion) {
        this.http = http;
        this.eventBroadcaster = eventBroadcaster;
        this.authTokenVersion = authTokenVersion;
        this.siteDomain = 'SITE_DOMAIN';
        this._siteDomain = window[this.siteDomain] || '';
        this._menuApplication = new BehaviorSubject([]);
        this._currentLegalEntity = new BehaviorSubject(null);
        this._userProfile = null;
        this._beforeLogout = null;
        if (authTokenVersion) {
            switch (authTokenVersion.toLocaleLowerCase()) {
                case 'v6':
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_V6;
                    break;
                default:
                    this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
            }
        }
        else {
            this._endpoint = SessionServiceConstants.LOGIN_TOKEN_DEFAULT;
        }
        if (localStorage.getItem('language') === undefined ||
            (localStorage.getItem('language') === null &&
                (sessionStorage.getItem('language') !== undefined && sessionStorage.getItem('language') !== null))) {
            localStorage.setItem('language', sessionStorage.getItem('language'));
        }
    }
    /**
     * @return {?}
     */
    get menuApplicationItems() {
        if (this._menuApplication.getValue().length === 0) {
            this.reloadAppMenuItems();
        }
        return this._menuApplication.asObservable();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setLegalEntity(value) {
        sessionStorage.setItem('user_legal_entity', JSON.stringify(value));
        this.eventBroadcaster.broadcast(Broadcaster.DCM_LEGAL_ENTITY_CHANGE, JSON.stringify(value));
        this._currentLegalEntity.next(value);
    }
    /**
     * @return {?}
     */
    get currentLegalEntity() {
        return this._currentLegalEntity.asObservable();
    }
    /**
     * @return {?}
     */
    get isLoggedIn() {
        /** @type {?} */
        const accessToken = sessionStorage.getItem('access_token');
        /** @type {?} */
        const jwtToken = sessionStorage.getItem('jwt');
        return (accessToken !== null &&
            accessToken !== undefined &&
            accessToken !== '' &&
            jwtToken != null &&
            jwtToken !== undefined &&
            jwtToken !== '');
    }
    /**
     * @return {?}
     */
    logout() {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            if (this._beforeLogout) {
                this._beforeLogout.subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                result => {
                    this.logoutApp();
                    observer.next({
                        message: 'success',
                        success: true
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    observer.next({
                        message: error,
                        success: false
                    });
                }));
            }
            else {
                this.logoutApp();
                observer.next({
                    message: 'success',
                    success: true
                });
            }
            return observer;
        }));
    }
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} generateCookie
     * @param {?=} appName
     * @param {?=} validateTempPassword
     * @return {?}
     */
    login(user, password, generateCookie, appName, validateTempPassword) {
        this.clean();
        /** @type {?} */
        const options = new RequestOptions({
            headers: new Headers({
                'Content-Type': 'application/x-www-form-urlencoded',
                accept: 'text/plain, */*'
            })
        });
        /** @type {?} */
        const endpoint = this.http.generateEndpoint(this._endpoint);
        /** @type {?} */
        const urlPost = this.generateUrlString(user, password, appName);
        return this.http
            .post(endpoint, urlPost, options)
            .toPromise()
            .then((/**
         * @param {?} response
         * @return {?}
         */
        (response) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            /** @type {?} */
            const data = response.json();
            /** @type {?} */
            const userId = this.authTokenVersion === 'v6'
                ? data.userId
                    ? data.userId
                    : data.profile.userId
                : data.profile.userId;
            this.processDataFromLogin(data, generateCookie);
            this.eventBroadcaster.broadcast(SessionService.LOGIN_SUCCESS_EVENT);
            if (validateTempPassword &&
                data.profile &&
                data.profile.hasTemporaryPassword) {
                return Promise.resolve(data);
            }
        })))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            console.error(error);
            this.eventBroadcaster.broadcast(SessionService.LOGIN_FAIL_EVENT);
            return Promise.reject(error);
        }));
    }
    /**
     * @return {?}
     */
    get userRegion() {
        return sessionStorage.getItem('region') || 'US';
    }
    /**
     * @return {?}
     */
    get userCountry() {
        return sessionStorage.getItem('country') || '';
    }
    /**
     * @return {?}
     */
    get userProfile() {
        if (!this._userProfile) {
            this.setUserProfile();
        }
        return this._userProfile;
    }
    /**
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    getLegalEntities(fetch, page, legalEntityCode) {
        /** @type {?} */
        let endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_LEGAL_ENTITIES);
        endpoint = this.addQueryParams(endpoint, fetch, page, legalEntityCode);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            let responseMap = [];
            /** @type {?} */
            const tmpJson = response.json();
            if (tmpJson) {
                responseMap = response.json();
            }
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        e => Observable.throw(this.handleError(e)))));
    }
    /**
     * @param {?} method
     * @return {?}
     */
    setBeforeLogout(method) {
        this._beforeLogout = method;
    }
    /**
     * @return {?}
     */
    getBeforeLogout() {
        return this._beforeLogout;
    }
    /**
     * @return {?}
     */
    reloadAppMenuItems() {
        this.getDCMApplications().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            this._menuApplication.next(result);
        }));
    }
    /**
     * @param {?} name
     * @param {?} value
     * @param {?=} days
     * @return {?}
     */
    createCookie(name, value, days) {
        /** @type {?} */
        let expires = '';
        if (days) {
            /** @type {?} */
            const date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = date.toUTCString();
        }
        else {
            days = 0;
        }
        /** @type {?} */
        const cookie = `${name}=${value};expires=${expires};domain=${this._siteDomain};path=/`;
        document.cookie = cookie;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    readCookie(name) {
        /** @type {?} */
        const ca = document.cookie.split(';');
        /** @type {?} */
        const caLen = ca.length;
        /** @type {?} */
        const cookieName = `${name}=`;
        /** @type {?} */
        let c;
        for (let i = 0; i < caLen; i += 1) {
            c = ca[i].replace(/^\s+/g, '');
            if (c.indexOf(cookieName) === 0) {
                return c.substring(cookieName.length, c.length);
            }
        }
        return null;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    clearCookie(name) {
        this.createCookie(name, '', -1);
    }
    /**
     * @return {?}
     */
    setUserProfile() {
        /** @type {?} */
        const strProfile = sessionStorage.getItem('user_profile');
        /** @type {?} */
        const tmpProfile = this.convertJsonTo(strProfile);
        if (tmpProfile) {
            /** @type {?} */
            const strCustomer = sessionStorage.getItem('user_customer');
            /** @type {?} */
            const userCustomer = this.convertJsonTo(strCustomer);
            if (userCustomer) {
                tmpProfile.customer = userCustomer;
            }
            else {
                console.warn('Exception at parsing User Customer from sessionStore');
            }
            this._userProfile = tmpProfile;
        }
        else {
            console.warn('Exception at parsing User Profile from sessionStore');
        }
    }
    /**
     * @return {?}
     */
    clean() {
        this.clearCookie('CemexGoRegion');
        this.clearCookie('up_session');
        sessionStorage.removeItem('access_token');
        sessionStorage.removeItem('refresh_token');
        sessionStorage.removeItem('expires_in');
        sessionStorage.removeItem('jwt');
        sessionStorage.removeItem('region');
        sessionStorage.removeItem('user_profile');
        sessionStorage.removeItem('user_customer');
        sessionStorage.removeItem('user_legal_entity');
        sessionStorage.removeItem('user_applications');
        // patch-fix for react
        sessionStorage.removeItem('auth_token');
        sessionStorage.removeItem('userInfo');
        sessionStorage.removeItem('country');
        sessionStorage.removeItem('token_data');
        sessionStorage.removeItem('applications');
        sessionStorage.removeItem('role');
        sessionStorage.removeItem('username');
        // new verssion API ( v6 )
        sessionStorage.removeItem('userAuthV6');
        sessionStorage.removeItem('userInfoV6');
        sessionStorage.removeItem('userProfileV6');
        sessionStorage.removeItem('userCustomerV6');
        sessionStorage.removeItem('userApplicationsV6');
        sessionStorage.removeItem('userRolesV6');
    }
    /**
     * @param {?} user
     * @param {?} password
     * @param {?=} appName
     * @return {?}
     */
    generateUrlString(user, password, appName) {
        /** @type {?} */
        const include = '&include=userinfo,profile,applications,roles,customers,oldVersion';
        /** @type {?} */
        let url = 'grant_type=password&scope=security&username=' +
            user +
            '&password=' +
            encodeURIComponent(password) +
            '&client_id=' +
            this.http.clientId;
        if (appName) {
            url = url + '&app_name=' + appName;
        }
        if (this.authTokenVersion) {
            if (this.authTokenVersion.toLowerCase() === 'v6') {
                url = `${url}&userinformation=false${include}`;
            }
        }
        return url;
    }
    /**
     * @param {?} data
     * @param {?=} generateCookie
     * @return {?}
     */
    processDataFromLogin(data, generateCookie) {
        // session cookie
        if (generateCookie) {
            /** @type {?} */
            const sessionCookie = {
                auth: data.oauth2.access_token,
                expires_in: data.oauth2.expires_in,
                jwt: data.jwt,
                refresh_token: data.oauth2.refresh_token,
                region: data.oauth2.region,
            };
            this.createCookie('up_session', JSON.stringify(sessionCookie), null);
        }
        this.createCookie('CemexGoRegion', data.oauth2.region, null);
        sessionStorage.setItem('access_token', data.oauth2.access_token);
        sessionStorage.setItem('refresh_token', data.oauth2.refresh_token);
        sessionStorage.setItem('expires_in', data.oauth2.expires_in);
        sessionStorage.setItem('jwt', data.jwt);
        sessionStorage.setItem('auth_token', data.oauth2.access_token);
        sessionStorage.setItem('user_profile', JSON.stringify(data.profile));
        sessionStorage.setItem('user_customer', JSON.stringify(data.customer));
        sessionStorage.setItem('user_applications', JSON.stringify(data.applications));
        // react
        sessionStorage.setItem('userInfo', JSON.stringify(data));
        sessionStorage.setItem('country', data.country);
        sessionStorage.setItem('token_data', JSON.stringify(data));
        sessionStorage.setItem('applications', JSON.stringify(data.applications));
        sessionStorage.setItem('region', data.oauth2.region);
        sessionStorage.setItem('role', data.role);
        sessionStorage.setItem('username', data.profile.userAccount);
        this.setUserProfile();
        // call API V6 ( New Model)
        /** @type {?} */
        const accessToKen = {
            oauth2: data.oauth2,
            // tslint:disable-next-line:object-literal-sort-keys
            jwt: data.jwt,
            userId: data.userId ? data.userId : data.profile.userId,
        };
        /** @type {?} */
        const encryptData = this.encrypt(JSON.stringify(accessToKen));
        sessionStorage.setItem('userAuthV6', encryptData);
        if (data._users) {
            /** @type {?} */
            const firstUser = data._users[0];
            /** @type {?} */
            const user = {
                accountType: firstUser.accountType,
                countryCode: firstUser.country.countryCode,
                customerId: (firstUser.customer) ? firstUser.customer.customerId : 0,
                firstName: firstUser.firstName,
                fullName: firstUser.fullName,
                lastName: firstUser.lastName,
                phoneNumber: firstUser.phoneNumber,
                userAccount: firstUser.userAccount,
                userId: firstUser.userId,
                userSelectedId: firstUser.userSelectedId,
                userStatus: firstUser.userStatus,
                userType: firstUser.userType,
            };
            /** @type {?} */
            const encryptUser = this.encrypt(JSON.stringify(user));
            sessionStorage.setItem('userInfoV6', encryptUser);
        }
        if (data._profile) {
            /** @type {?} */
            const dataProfile = data._profile;
            /** @type {?} */
            const profile = {
                allowEmailUpdates: dataProfile.allowEmailUpdates,
                allowInformationShare: dataProfile.allowInformationShare,
                hasTemporaryPassword: dataProfile.hasTemporaryPassword,
                userEmail: dataProfile.userEmail,
                userId: dataProfile.userId,
                userPosition: dataProfile.userPosition,
                userProfileId: dataProfile.userProfileId,
            };
            /** @type {?} */
            const encryptProfile = this.encrypt(JSON.stringify(profile));
            sessionStorage.setItem('userProfileV6', encryptProfile);
        }
        if (data._customers) {
            /** @type {?} */
            const dataCustomer = data._customers;
            /** @type {?} */
            const customer = {
                countryCode: dataCustomer.country.countryCode,
                customerCode: dataCustomer.customerCode,
                customerCodeLZR: dataCustomer.customerCodeLZR,
                customerDesc: dataCustomer.customerDesc,
                customerDesc2: dataCustomer.customerDesc2,
                customerId: dataCustomer.customerId,
                email: dataCustomer.email,
                faxNumber: dataCustomer.faxNumber,
                phoneNumber: dataCustomer.phoneNumber,
                regionId: dataCustomer.region.regionId,
                vAT: dataCustomer.vAT,
            };
            /** @type {?} */
            const encryptcustomer = this.encrypt(JSON.stringify(customer));
            sessionStorage.setItem('userCustomerV6', encryptcustomer);
        }
        if (data._applications) {
            /** @type {?} */
            const apps = data._applications.map((/**
             * @param {?} app
             * @return {?}
             */
            (app) => {
                return {
                    applicationCode: app.applicationCode,
                    applicationId: app.applicationId,
                    applicationType: app.applicationType,
                    isVisible: app.isVisible,
                };
            }));
            /** @type {?} */
            const encryptApplications = this.encrypt(JSON.stringify(apps));
            sessionStorage.setItem('userApplicationsV6', encryptApplications);
        }
        if (data._roles) {
            /** @type {?} */
            const roles = data._roles.map((/**
             * @param {?} role
             * @return {?}
             */
            (role) => {
                return {
                    applicationId: role.application.applicationId,
                    isInternal: role.isInternal,
                    isOptional: role.isOptional,
                    isVisible: role.isVisible,
                    roleCode: role.roleCode,
                    roleId: role.roleId,
                    roleType: role.roleType,
                };
            }));
            /** @type {?} */
            const encryptRoles = this.encrypt(JSON.stringify(roles));
            sessionStorage.setItem('userRolesV6', encryptRoles);
        }
    }
    /**
     * @return {?}
     */
    getDCMApplications() {
        /** @type {?} */
        const endpoint = this.http.generateEndpoint(SessionServiceConstants.USER_APPLICATION_MENU);
        return this.http.get(endpoint).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            /** @type {?} */
            const tmpJson = response.json();
            if (!tmpJson || tmpJson === undefined) {
                console.warn('Configuration of menu application is empty!!');
                return [];
            }
            /** @type {?} */
            const responseMap = (/** @type {?} */ (response.json()));
            return responseMap;
        })), catchError((/**
         * @param {?} e
         * @return {?}
         */
        (e) => Observable.throw(this.handleError(e)))));
    }
    /**
     * @template T
     * @param {?} obj
     * @return {?}
     */
    convertJsonTo(obj) {
        try {
            /** @type {?} */
            const tmpJson = JSON.parse(obj);
            return (/** @type {?} */ (tmpJson));
        }
        catch (e) {
            console.warn('Exception at parsing object from sessionStore:', e);
        }
        return null;
    }
    /**
     * @return {?}
     */
    get customer() {
        /** @type {?} */
        let result;
        /** @type {?} */
        const str = sessionStorage.getItem('user_customer');
        if (str) {
            try {
                /** @type {?} */
                const profile = JSON.parse(str);
                result = (/** @type {?} */ (profile));
            }
            catch (e) {
                console.warn('Exception at parsing user_customer from sessionStore:', e);
                return null;
            }
        }
        else {
            console.warn('There is no user customer at session storage');
        }
        return result;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        let errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            const body = error.json() || '';
            errMsg = `${error.status} - ${error.statusText || ''}`;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return throwError(error);
    }
    /**
     * @param {?} endpoint
     * @param {?=} fetch
     * @param {?=} page
     * @param {?=} legalEntityCode
     * @return {?}
     */
    addQueryParams(endpoint, fetch, page, legalEntityCode) {
        /** @type {?} */
        const validPagination = Number.isInteger(fetch) && Number.isInteger(page);
        endpoint += validPagination ? '?fetch=' + fetch + '&page=' + page : '';
        endpoint +=
            legalEntityCode && validPagination
                ? '&legalEntityCode=' + legalEntityCode
                : legalEntityCode && !validPagination
                    ? '?legalEntityCode=' + legalEntityCode
                    : '';
        return endpoint;
    }
    /**
     * @return {?}
     */
    logoutApp() {
        this.clean();
        this.eventBroadcaster.broadcast(Broadcaster.DCM_APP_LOGOUT);
    }
    /**
     * @return {?}
     */
    get userAuth() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userAuthV6')));
    }
    /**
     * @return {?}
     */
    get userInfo() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userInfoV6')));
    }
    /**
     * @return {?}
     */
    get userProfileV6() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userProfileV6')));
    }
    /**
     * @return {?}
     */
    get userCustomer() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userCustomerV6')));
    }
    /**
     * @return {?}
     */
    get userApplications() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userApplicationsV6')));
    }
    /**
     * @return {?}
     */
    get userRoles() {
        return JSON.parse(this.decrypt(sessionStorage.getItem('userRolesV6')));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    encrypt(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    decrypt(str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    }
}
SessionService.LOGIN_SUCCESS_EVENT = 'LOGIN_SUCCESS_EVENT';
SessionService.LOGIN_FAIL_EVENT = 'LOGIN_FAIL_EVENT';
SessionService.LOGIN_LOGOUT_EVENT = 'LOGIN_LOGOUT_EVENT';
SessionService.AUTH_TOKEN_VERSION = 'auth_token_version';
SessionService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SessionService.ctorParameters = () => [
    { type: HttpCemex },
    { type: Broadcaster },
    { type: String, decorators: [{ type: Inject, args: [SessionService.AUTH_TOKEN_VERSION,] }, { type: Optional }] }
];
if (false) {
    /** @type {?} */
    SessionService.LOGIN_SUCCESS_EVENT;
    /** @type {?} */
    SessionService.LOGIN_FAIL_EVENT;
    /** @type {?} */
    SessionService.LOGIN_LOGOUT_EVENT;
    /** @type {?} */
    SessionService.AUTH_TOKEN_VERSION;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.siteDomain;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._siteDomain;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._endpoint;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._menuApplication;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._currentLegalEntity;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._userProfile;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype._beforeLogout;
    /**
     * @type {?}
     * @protected
     */
    SessionService.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    SessionService.prototype.eventBroadcaster;
    /**
     * @type {?}
     * @private
     */
    SessionService.prototype.authTokenVersion;
}
//# sourceMappingURL=data:application/json;base64,