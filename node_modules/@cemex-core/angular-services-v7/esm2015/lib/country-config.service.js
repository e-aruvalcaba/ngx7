/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Response } from '@angular/http';
import { BehaviorSubject, Observable } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { HttpCemex } from './http.service';
import { ProjectSettings } from './project.settings';
import { SessionService } from './session.service';
export class CountryConfigService {
    /**
     * @param {?} http
     * @param {?} projectEnv
     * @param {?} sessionService
     */
    constructor(http, projectEnv, sessionService) {
        this.http = http;
        this.projectEnv = projectEnv;
        this.sessionService = sessionService;
        this._countryConfig = new BehaviorSubject(null);
        this._countryConfigApiPath = '/v5/secm/console/countryconfig';
        if (!this._countryConfig.getValue()) {
            this.getCountryConfiguration().subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                this._countryConfig.next(data);
            }));
        }
    }
    /**
     * @return {?}
     */
    get countryConfig() {
        return this._countryConfig.asObservable();
    }
    /**
     * @return {?}
     */
    getCountryConfiguration() {
        /** @type {?} */
        const userCountry = this.sessionService.userCountry || 'US';
        /** @type {?} */
        const url = `${this.projectEnv.getBaseOrgEnvPath()}${this._countryConfigApiPath}?countryCode=${userCountry}`;
        return this.http.get(url).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        (res) => res.json())), catchError(this.handleError));
    }
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        // In a real world app, we might use a remote logging infrastructure
        /** @type {?} */
        let errMsg;
        if (error instanceof Response) {
            /** @type {?} */
            const body = error.json() || '';
            /** @type {?} */
            const err = body.error || JSON.stringify(body);
            errMsg = `${error.status} - ${error.statusText || ''}`;
        }
        else {
            errMsg = error.message ? error.message : error.toString();
        }
        console.error(error);
        return Observable.throw(error);
    }
}
CountryConfigService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CountryConfigService.ctorParameters = () => [
    { type: HttpCemex },
    { type: ProjectSettings },
    { type: SessionService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype._countryConfig;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype._countryConfigApiPath;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.projectEnv;
    /**
     * @type {?}
     * @private
     */
    CountryConfigService.prototype.sessionService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY291bnRyeS1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItc2VydmljZXMtdjcvIiwic291cmNlcyI6WyJsaWIvY291bnRyeS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHbkQsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7O0lBSS9CLFlBQ1UsSUFBZSxFQUNmLFVBQTJCLEVBQzNCLGNBQThCO1FBRjlCLFNBQUksR0FBSixJQUFJLENBQVc7UUFDZixlQUFVLEdBQVYsVUFBVSxDQUFpQjtRQUMzQixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFOaEMsbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBaUIsSUFBSSxDQUFDLENBQUM7UUFDM0QsMEJBQXFCLEdBQUcsZ0NBQWdDLENBQUM7UUFPL0QsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUMsU0FBUzs7OztZQUFDLENBQUMsSUFBb0IsRUFBRSxFQUFFO2dCQUNoRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQUVELElBQVcsYUFBYTtRQUN0QixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7OztJQUVNLHVCQUF1Qjs7Y0FDdEIsV0FBVyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxJQUFJLElBQUk7O2NBQ3JELEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWlCLEVBQUUsR0FDaEQsSUFBSSxDQUFDLHFCQUNQLGdCQUFnQixXQUFXLEVBQUU7UUFDN0IsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQzVCLEdBQUc7Ozs7UUFBQyxDQUFDLEdBQWEsRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFDLEVBQ2xDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQzdCLENBQUM7SUFDSixDQUFDOzs7Ozs7SUFFTyxXQUFXLENBQUMsS0FBcUI7OztZQUVuQyxNQUFjO1FBQ2xCLElBQUksS0FBSyxZQUFZLFFBQVEsRUFBRTs7a0JBQ3ZCLElBQUksR0FBUSxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRTs7a0JBQzlCLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzlDLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNLE1BQU0sS0FBSyxDQUFDLFVBQVUsSUFBSSxFQUFFLEVBQUUsQ0FBQztTQUN4RDthQUFNO1lBQ0wsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUMzRDtRQUNELE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckIsT0FBTyxVQUFVLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7OztZQTVDRixVQUFVOzs7O1lBSkYsU0FBUztZQUNULGVBQWU7WUFDZixjQUFjOzs7Ozs7O0lBSXJCLDhDQUFtRTs7Ozs7SUFDbkUscURBQWlFOzs7OztJQUcvRCxvQ0FBdUI7Ozs7O0lBQ3ZCLDBDQUFtQzs7Ozs7SUFDbkMsOENBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9odHRwJztcblxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IElDb3VudHJ5Q29uZmlnIH0gZnJvbSAnQGNlbWV4LWNvcmUvdHlwZXMtdjInO1xuXG5pbXBvcnQgeyBIdHRwQ2VtZXggfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5pbXBvcnQgeyBQcm9qZWN0U2V0dGluZ3MgfSBmcm9tICcuL3Byb2plY3Quc2V0dGluZ3MnO1xuaW1wb3J0IHsgU2Vzc2lvblNlcnZpY2UgfSBmcm9tICcuL3Nlc3Npb24uc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb3VudHJ5Q29uZmlnU2VydmljZSB7XG4gIHByaXZhdGUgX2NvdW50cnlDb25maWcgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PElDb3VudHJ5Q29uZmlnPihudWxsKTtcbiAgcHJpdmF0ZSBfY291bnRyeUNvbmZpZ0FwaVBhdGggPSAnL3Y1L3NlY20vY29uc29sZS9jb3VudHJ5Y29uZmlnJztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDZW1leCxcbiAgICBwcml2YXRlIHByb2plY3RFbnY6IFByb2plY3RTZXR0aW5ncyxcbiAgICBwcml2YXRlIHNlc3Npb25TZXJ2aWNlOiBTZXNzaW9uU2VydmljZVxuICApIHtcbiAgICBpZiAoIXRoaXMuX2NvdW50cnlDb25maWcuZ2V0VmFsdWUoKSkge1xuICAgICAgdGhpcy5nZXRDb3VudHJ5Q29uZmlndXJhdGlvbigpLnN1YnNjcmliZSgoZGF0YTogSUNvdW50cnlDb25maWcpID0+IHtcbiAgICAgICAgdGhpcy5fY291bnRyeUNvbmZpZy5uZXh0KGRhdGEpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBjb3VudHJ5Q29uZmlnKCk6IE9ic2VydmFibGU8SUNvdW50cnlDb25maWc+IHtcbiAgICByZXR1cm4gdGhpcy5fY291bnRyeUNvbmZpZy5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb3VudHJ5Q29uZmlndXJhdGlvbigpOiBPYnNlcnZhYmxlPElDb3VudHJ5Q29uZmlnPiB7XG4gICAgY29uc3QgdXNlckNvdW50cnkgPSB0aGlzLnNlc3Npb25TZXJ2aWNlLnVzZXJDb3VudHJ5IHx8ICdVUyc7XG4gICAgY29uc3QgdXJsID0gYCR7dGhpcy5wcm9qZWN0RW52LmdldEJhc2VPcmdFbnZQYXRoKCl9JHtcbiAgICAgIHRoaXMuX2NvdW50cnlDb25maWdBcGlQYXRoXG4gICAgfT9jb3VudHJ5Q29kZT0ke3VzZXJDb3VudHJ5fWA7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKS5waXBlKFxuICAgICAgbWFwKChyZXM6IFJlc3BvbnNlKSA9PiByZXMuanNvbigpKSxcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvcilcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVFcnJvcihlcnJvcjogUmVzcG9uc2UgfCBhbnkpIHtcbiAgICAvLyBJbiBhIHJlYWwgd29ybGQgYXBwLCB3ZSBtaWdodCB1c2UgYSByZW1vdGUgbG9nZ2luZyBpbmZyYXN0cnVjdHVyZVxuICAgIGxldCBlcnJNc2c6IHN0cmluZztcbiAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBSZXNwb25zZSkge1xuICAgICAgY29uc3QgYm9keTogYW55ID0gZXJyb3IuanNvbigpIHx8ICcnO1xuICAgICAgY29uc3QgZXJyID0gYm9keS5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgICAgIGVyck1zZyA9IGAke2Vycm9yLnN0YXR1c30gLSAke2Vycm9yLnN0YXR1c1RleHQgfHwgJyd9YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyTXNnID0gZXJyb3IubWVzc2FnZSA/IGVycm9yLm1lc3NhZ2UgOiBlcnJvci50b1N0cmluZygpO1xuICAgIH1cbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS50aHJvdyhlcnJvcik7XG4gIH1cbn1cbiJdfQ==