/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PushNotificationsConstants } from './push-notifications.constants';
export class PushNotificationService {
    /**
     * @param {?} constants
     */
    constructor(constants) {
        this.constants = constants;
        this._devUUID = '';
        this._devId = '';
        this._platform = '';
        this._token = '';
        // this.initialize();
    }
    /**
     * @param {?} methodCallBack
     * @return {?}
     */
    initialize(methodCallBack) {
        this._methodCallBack = methodCallBack;
        this._vapidPublicKey = this.constants.getVapidPublicKey();
        if (this.validateSw()) {
            // tslint:disable-next-line:only-arrow-functions
            /** @type {?} */
            const swReg = this.registerSw().catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Push Service Worker registration has failed: ' + error);
            }));
            // tslint:disable-next-line:only-arrow-functions
            this.subscriptionSw(swReg).catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Push Service Worker subscription has failed: ' + error);
            }));
        }
    }
    /**
     * @return {?}
     */
    validateSw() {
        /** @type {?} */
        let isValid = false;
        if ('serviceWorker' in navigator && 'PushManager' in window) {
            isValid = true;
            console.log('Service Workers is supported');
        }
        return isValid;
    }
    /**
     * @private
     * @return {?}
     */
    registerSw() {
        // tslint:disable-next-line:only-arrow-functions
        return navigator.serviceWorker
            .register(this.constants.getUrlSW())
            .then((/**
         * @param {?} swReg
         * @return {?}
         */
        function (swReg) {
            if (swReg.installing) {
                console.log('Service worker installing');
            }
            else if (swReg.waiting) {
                console.log('Service worker installed');
            }
            else if (swReg.active) {
                console.log('Service worker active');
            }
            if (!swReg.showNotification) {
                console.log('Notifications aren\'t supported on service workers.');
            }
            return swReg;
        }));
    }
    /**
     * @private
     * @param {?} registration
     * @return {?}
     */
    subscriptionSw(registration) {
        /** @type {?} */
        const mSetSubscription = this.setSubscription;
        /** @type {?} */
        const global = this;
        // tslint:disable-next-line:only-arrow-functions
        return registration.then((/**
         * @param {?} swReg
         * @return {?}
         */
        function (swReg) {
            swReg.pushManager
                .getSubscription()
                // tslint:disable-next-line:only-arrow-functions
                .then((/**
             * @param {?} subscriptionInit
             * @return {?}
             */
            function (subscriptionInit) {
                if (subscriptionInit) {
                    return mSetSubscription(subscriptionInit, global);
                }
                else {
                    /** @type {?} */
                    const options = {
                        // tslint:disable-next-line:max-line-length
                        applicationServerKey: !global._vapidPublicKey
                            ? null
                            : global.urlB64ToUint8Array(global._vapidPublicKey),
                        userVisibleOnly: true
                    };
                    return (swReg.pushManager
                        .subscribe(options)
                        // tslint:disable-next-line:only-arrow-functions
                        .then((/**
                     * @param {?} subscription
                     * @return {?}
                     */
                    function (subscription) {
                        console.log(subscription);
                        return mSetSubscription(subscription, global);
                        // tslint:disable-next-line:only-arrow-functions
                    }))
                        .catch((/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('Unable to subscribe to push.', error);
                    })));
                }
            }));
        }));
    }
    /**
     * @private
     * @param {?} subscription
     * @param {?} global
     * @return {?}
     */
    setSubscription(subscription, global) {
        global.generateTokenForRegisterDevice(subscription);
        global.registerBroadcastListener();
    }
    /**
     * @private
     * @return {?}
     */
    registerBroadcastListener() {
        /** @type {?} */
        const callBack = this._methodCallBack;
        /** @type {?} */
        const sPush = this.constants.getSourcePush();
        navigator.serviceWorker.addEventListener('message', (/**
         * @param {?} event
         * @return {?}
         */
        function handler(event) {
            /** @type {?} */
            const data = event.data;
            if (data && data.source === sPush) {
                console.log(event.data);
                if (callBack) {
                    callBack(data.payload);
                }
            }
        }));
    }
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} subscription
     * @return {?}
     */
    generateTokenForRegisterDevice(subscription) {
        localStorage.setItem('token', JSON.stringify(subscription));
        if (!localStorage.getItem('deviceUUID')) {
            this.generateUUID('');
        }
        else {
            this._devUUID = localStorage.getItem('deviceUUID');
            if (!localStorage.getItem('deviceId')) {
                this._devId = localStorage.getItem('deviceId');
            }
        }
        this._platform = '';
        this._devUUID = localStorage.getItem('deviceUUID');
        this._devId = localStorage.getItem('deviceId');
        /** @type {?} */
        const rawKey = subscription.getKey ? subscription.getKey('p256dh') : '';
        /** @type {?} */
        const key = rawKey
            ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawKey)))
            : '';
        /** @type {?} */
        const rawAuthSecret = subscription.getKey
            ? subscription.getKey('auth')
            : '';
        /** @type {?} */
        const authSecret = rawAuthSecret
            ? btoa(String.fromCharCode.apply(null, new Uint8Array(rawAuthSecret)))
            : '';
        /** @type {?} */
        const tokenValue = {
            endpoint: subscription.endpoint,
            userAuth: authSecret,
            userPublicKey: key
        };
        this._token = JSON.stringify(tokenValue);
        if (navigator.userAgent.indexOf('Firefox') !== -1) {
            this._platform = 'F'; // Firefox Browser
        }
        else if (navigator.userAgent.indexOf('Chrome') !== -1) {
            this._platform = 'C'; // Chrome Browser
        }
        /** @type {?} */
        let device = null;
        if (this.validateInput(this._devId)) {
            device = {
                deviceId: this._devId,
                platform: this._platform,
                token: this._token,
                uuid: this._devUUID
            };
        }
        else {
            device = {
                platform: this._platform,
                token: this._token,
                uuid: this._devUUID
            };
        }
        this.registerDevice(device);
    }
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} device
     * @return {?}
     */
    registerDevice(device) {
        console.log('Device details:', device);
        /** @type {?} */
        const xhr = this.setRequest(this.constants.getDevicesPath(), 'POST', true);
        /*this.http.post(this.constants.getDevicesPath(), device)
            .then((response) => {
                console.log('Response register,', response);
                localStorage.setItem('deviceId', response);
            });*/
        // tslint:disable-next-line:only-arrow-functions
        xhr.onreadystatechange = (/**
         * @return {?}
         */
        function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
                console.log('Response register,', xhr);
                localStorage.setItem('deviceId', xhr.responseText);
            }
        });
        xhr.send(JSON.stringify(device));
    }
    // tslint:disable-next-line:member-ordering
    /**
     * @return {?}
     */
    unRegisterDevice() {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            this._devId = localStorage.getItem('deviceId');
            /** @type {?} */
            const global = this;
            // tslint:disable-next-line:only-arrow-functions
            navigator.serviceWorker.ready
                .then((/**
             * @param {?} registration
             * @return {?}
             */
            function (registration) {
                registration
                    .unregister()
                    // tslint:disable-next-line:only-arrow-functions
                    .then((/**
                 * @param {?} checkUnregister
                 * @return {?}
                 */
                function (checkUnregister) {
                    if (!checkUnregister) {
                        console.log('unregister failed');
                        resolve();
                    }
                    global
                        .unsubscribeDevice(global._devId, global)
                        // tslint:disable-next-line:only-arrow-functions
                        .then((/**
                     * @return {?}
                     */
                    function () {
                        resolve();
                    }));
                }));
            }))
                // tslint:disable-next-line:only-arrow-functions
                .catch((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                console.log('Registration failed with ' + error);
                resolve();
            }));
        }));
        return promise;
    }
    // tslint:disable-next-line:member-ordering
    /**
     * @param {?} deviceID
     * @param {?} global
     * @return {?}
     */
    unsubscribeDevice(deviceID, global) {
        /** @type {?} */
        const promise = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const deviceId = localStorage.getItem('deviceId');
            /** @type {?} */
            const device = {
                devices: {
                    deviceId: global._devId,
                    platform: global._platform,
                    token: global._token,
                    uuid: global._devUUID
                }
            };
            if (deviceID) {
                /** @type {?} */
                const xhr = global.setRequest(global.constants.getDevicesPath() + '/' + deviceID, 'DELETE', true);
                // tslint:disable-next-line:only-arrow-functions
                xhr.onreadystatechange = (/**
                 * @return {?}
                 */
                function () {
                    if (xhr.readyState === 4 && xhr.status === 200) {
                        console.log('The response is ,', xhr);
                        console.log('Successfully unregistered the device');
                        localStorage.setItem('deviceUUID', '');
                        localStorage.setItem('deviceId', '');
                        localStorage.setItem('token', '');
                        resolve();
                    }
                });
                xhr.send(JSON.stringify(device));
            }
            else {
                resolve();
            }
        }));
        return promise;
    }
    /**
     * @private
     * @param {?} url
     * @param {?} method
     * @param {?} asyncP
     * @return {?}
     */
    setRequest(url, method, asyncP) {
        /** @type {?} */
        let xhr = new XMLHttpRequest();
        xhr.open(method, url, asyncP);
        xhr = this.setHeaders(xhr, method);
        return xhr;
    }
    /**
     * @private
     * @param {?} xhr
     * @param {?} method
     * @return {?}
     */
    setHeaders(xhr, method) {
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.setRequestHeader('x-ibm-client-id', this.constants.getClientId());
        xhr.setRequestHeader('App-Code', this.constants.getAppCode());
        xhr.setRequestHeader('Accept-Language', this.constants.getAppLanguage());
        xhr.setRequestHeader('Authorization', this.constants.getAuthToken());
        xhr.setRequestHeader('jwt', this.constants.getJwt());
        xhr.timeout = 3000;
        if (method === 'POST' || method === 'PUT') {
            xhr.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');
        }
        return xhr;
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    generateUUID(token) {
        /** @type {?} */
        let dateTime = new Date().getTime();
        if (window.performance && typeof window.performance.now === 'function') {
            dateTime += performance.now(); // use high-precision timer if available
        }
        /** @type {?} */
        const hostname = window.location.hostname;
        /** @type {?} */
        const arrayData = [];
        arrayData.push(this.hashCode(dateTime));
        arrayData.push(this.hashCode(token));
        arrayData.push(this.hashCode(hostname));
        arrayData.push(this.hashCode(this._platform));
        /** @type {?} */
        const finalString = arrayData
            .join('')
            .replace(/[-.]/g, '')
            .replace(/[,.]/g, '');
        /** @type {?} */
        let uuid = '';
        for (let i = 0; i < 32; i++) {
            uuid += finalString.charAt(Math.floor(Math.random() * finalString.length));
        }
        localStorage.setItem('deviceUUID', uuid);
        this._devUUID = uuid;
        return this._devUUID;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    hashCode(str) {
        /** @type {?} */
        let hash = 0;
        /** @type {?} */
        let i;
        /** @type {?} */
        let chr;
        /** @type {?} */
        let len;
        if (str.length === 0) {
            return hash;
        }
        for (i = 0, len = str.length; i < len; i++) {
            chr = str.charCodeAt(i);
            // tslint:disable-next-line:no-bitwise
            hash = (hash << 5) - hash + chr;
            // tslint:disable-next-line:no-bitwise
            hash |= 0; // Convert to 32bit integer
        }
        return hash;
    }
    /**
     * @private
     * @param {?} stringValue
     * @return {?}
     */
    validateInput(stringValue) {
        // tslint:disable-next-line:max-line-length
        return stringValue === undefined ||
            stringValue == null ||
            stringValue.length <= 0 ||
            stringValue === ''
            ? false
            : true;
    }
    /**
     * @private
     * @param {?} base64String
     * @return {?}
     */
    urlB64ToUint8Array(base64String) {
        /** @type {?} */
        const padding = '='.repeat((4 - (base64String.length % 4)) % 4);
        /** @type {?} */
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        /** @type {?} */
        const rawData = window.atob(base64);
        /** @type {?} */
        const outputArray = new Uint8Array(rawData.length);
        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }
}
PushNotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PushNotificationService.ctorParameters = () => [
    { type: PushNotificationsConstants }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._devUUID;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._devId;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._platform;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._token;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._methodCallBack;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype._vapidPublicKey;
    /**
     * @type {?}
     * @private
     */
    PushNotificationService.prototype.constants;
}
//# sourceMappingURL=data:application/json;base64,