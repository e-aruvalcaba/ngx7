/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { EndpointsConstants } from '@cemex-core/constants-v2/dist';
import { HttpCemex } from './http.service';
export class LegalEntity {
    /**
     * @param {?} http
     * @param {?} endpoints
     */
    constructor(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
    }
    /**
     * @return {?}
     */
    getLegalEntity() {
        return this.http
            .get(this.getUrl('legalentity'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            return aux;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @return {?}
     */
    getAllLegalEntityCustomers() {
        return this.http
            .get(this.getUrl('legalentitycustomers'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} customerCode
     * @return {?}
     */
    getLegalEntityByCustomer(customerCode) {
        return this.http
            .get(this.getUrl('legalentity?customerCode=' + customerCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.company;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} companyCode
     * @return {?}
     */
    getLegalEntityByCompany(companyCode) {
        return this.http
            .get(this.getUrl('legalentity?companyCode=' + companyCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    getLegalEntityJobsites(customerCode, companyCode) {
        /** @type {?} */
        const api = 'legalentityjobsites?companyCode=' +
            companyCode +
            '&customerCode=' +
            customerCode;
        return this.http
            .get(this.getUrl(api))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.jobSite;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} api
     * @return {?}
     */
    getUrl(api) {
        /** @type {?} */
        const url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.armCapability + api);
        return url;
    }
}
LegalEntity.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LegalEntity.ctorParameters = () => [
    { type: HttpCemex },
    { type: EndpointsConstants }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    LegalEntity.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LegalEntity.prototype.endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWxFbnRpdHkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItc2VydmljZXMtdjcvIiwic291cmNlcyI6WyJsaWIvbGVnYWxFbnRpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFRbkUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRzNDLE1BQU0sT0FBTyxXQUFXOzs7OztJQUN0QixZQUNZLElBQWUsRUFDakIsU0FBNkI7UUFEM0IsU0FBSSxHQUFKLElBQUksQ0FBVztRQUNqQixjQUFTLEdBQVQsU0FBUyxDQUFvQjtJQUNwQyxDQUFDOzs7O0lBRUcsY0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDL0IsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxRQUFRLENBQUMsRUFBRTs7a0JBQ1AsR0FBRyxHQUFtQixRQUFRLENBQUMsSUFBSSxFQUFFO1lBQzNDLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFDLENBQ0g7YUFDQSxTQUFTLEVBQUU7YUFDWCxJQUFJOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUM7YUFDbEIsS0FBSzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVNLDBCQUEwQjtRQUMvQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FBQzthQUN4QyxJQUFJLENB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dkIsMkJBQXlCOzs7OztJQUN6QixnQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgRW5kcG9pbnRzQ29uc3RhbnRzIH0gZnJvbSAnQGNlbWV4LWNvcmUvY29uc3RhbnRzLXYyL2Rpc3QnO1xuaW1wb3J0IHtcbiAgQ29tcGFueSxcbiAgQ3VzdG9tZXIsXG4gIEpvYnNpdGUsXG4gIExlZ2FsRW50aXR5RFRPXG59IGZyb20gJ0BjZW1leC1jb3JlL3R5cGVzLXYyL2Rpc3QnO1xuXG5pbXBvcnQgeyBIdHRwQ2VtZXggfSBmcm9tICcuL2h0dHAuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMZWdhbEVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBodHRwOiBIdHRwQ2VtZXgsXG4gICAgcHJpdmF0ZSBlbmRwb2ludHM6IEVuZHBvaW50c0NvbnN0YW50c1xuICApIHt9XG5cbiAgcHVibGljIGdldExlZ2FsRW50aXR5KCk6IFByb21pc2U8TGVnYWxFbnRpdHlEVE8+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMuZ2V0VXJsKCdsZWdhbGVudGl0eScpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV4OiBMZWdhbEVudGl0eURUTyA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICByZXR1cm4gYXV4O1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdldEFsbExlZ2FsRW50aXR5Q3VzdG9tZXJzKCk6IFByb21pc2U8Q3VzdG9tZXJbXT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQodGhpcy5nZXRVcmwoJ2xlZ2FsZW50aXR5Y3VzdG9tZXJzJykpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IExlZ2FsRW50aXR5RFRPID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXV4LnJlc3BvbnNlTGVnYWxFbnRpdHkuY3VzdG9tZXI7XG4gICAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdldExlZ2FsRW50aXR5QnlDdXN0b21lcihjdXN0b21lckNvZGU6IGFueSk6IFByb21pc2U8Q29tcGFueVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybCgnbGVnYWxlbnRpdHk/Y3VzdG9tZXJDb2RlPScgKyBjdXN0b21lckNvZGUpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV4OiBMZWdhbEVudGl0eURUTyA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF1eC5yZXNwb25zZUxlZ2FsRW50aXR5LmNvbXBhbnk7XG4gICAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICB9XG5cbiAgcHVibGljIGdldExlZ2FsRW50aXR5QnlDb21wYW55KGNvbXBhbnlDb2RlOiBhbnkpOiBQcm9taXNlPEN1c3RvbWVyW10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMuZ2V0VXJsKCdsZWdhbGVudGl0eT9jb21wYW55Q29kZT0nICsgY29tcGFueUNvZGUpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV4OiBMZWdhbEVudGl0eURUTyA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF1eC5yZXNwb25zZUxlZ2FsRW50aXR5LmN1c3RvbWVyO1xuICAgICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oZGF0YSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMZWdhbEVudGl0eUpvYnNpdGVzKFxuICAgIGN1c3RvbWVyQ29kZTogYW55LFxuICAgIGNvbXBhbnlDb2RlOiBhbnlcbiAgKTogUHJvbWlzZTxKb2JzaXRlW10+IHtcbiAgICBjb25zdCBhcGkgPVxuICAgICAgJ2xlZ2FsZW50aXR5am9ic2l0ZXM/Y29tcGFueUNvZGU9JyArXG4gICAgICBjb21wYW55Q29kZSArXG4gICAgICAnJmN1c3RvbWVyQ29kZT0nICtcbiAgICAgIGN1c3RvbWVyQ29kZTtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMuZ2V0VXJsKGFwaSkpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICBjb25zdCBhdXg6IExlZ2FsRW50aXR5RFRPID0gcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgIGNvbnN0IHNuYXBzaG90ID0gYXV4LnJlc3BvbnNlTGVnYWxFbnRpdHkuam9iU2l0ZTtcbiAgICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0VXJsKGFwaTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCB1cmwgPSB0aGlzLmh0dHAuZ2VuZXJhdGVFbmRwb2ludChcbiAgICAgIHRoaXMuZW5kcG9pbnRzLlYxICsgdGhpcy5lbmRwb2ludHMuYXJtQ2FwYWJpbGl0eSArIGFwaVxuICAgICk7XG4gICAgcmV0dXJuIHVybDtcbiAgfVxufVxuIl19