/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { EndpointsConstants } from '@cemex-core/constants-v2/dist';
import { HttpCemex } from './http.service';
export class FinancialDocuments {
    /**
     * @param {?} http
     * @param {?} endpoints
     */
    constructor(http, endpoints) {
        this.http = http;
        this.endpoints = endpoints;
    }
    /**
     * @return {?}
     */
    getLegalEntity() {
        return this.http
            .get(this.getUrl('legalentity'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            return aux;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @return {?}
     */
    getAllLegalEntityCustomers() {
        return this.http
            .get(this.getUrl('legalentitycustomers'))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} customerCode
     * @return {?}
     */
    getLegalEntityByCustomer(customerCode) {
        return this.http
            .get(this.getUrl('legalentity?customerCode=' + customerCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.company;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} companyCode
     * @return {?}
     */
    getLegalEntityByCompany(companyCode) {
        return this.http
            .get(this.getUrl('legalentity?companyCode=' + companyCode))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.customer;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @param {?} customerCode
     * @param {?} companyCode
     * @return {?}
     */
    getLegalEntityJobsites(customerCode, companyCode) {
        /** @type {?} */
        const api = 'legalentityjobsites?companyCode=' +
            companyCode +
            '&customerCode=' +
            customerCode;
        return this.http
            .get(this.getUrl(api))
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const aux = response.json();
            /** @type {?} */
            const snapshot = aux.responseLegalEntity.jobSite;
            return snapshot;
        })))
            .toPromise()
            .then((/**
         * @param {?} data
         * @return {?}
         */
        data => data))
            .catch((/**
         * @param {?} error
         * @return {?}
         */
        error => error));
    }
    /**
     * @private
     * @param {?} api
     * @return {?}
     */
    getUrl(api) {
        /** @type {?} */
        const url = this.http.generateEndpoint(this.endpoints.V1 + this.endpoints.armCapability + api);
        return url;
    }
}
FinancialDocuments.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FinancialDocuments.ctorParameters = () => [
    { type: HttpCemex },
    { type: EndpointsConstants }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FinancialDocuments.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FinancialDocuments.prototype.endpoints;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluYW5jaWFsRG9jdW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLXNlcnZpY2VzLXY3LyIsInNvdXJjZXMiOlsibGliL2ZpbmFuY2lhbERvY3VtZW50cy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQVFuRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHM0MsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7SUFDN0IsWUFBb0IsSUFBZSxFQUFVLFNBQTZCO1FBQXRELFNBQUksR0FBSixJQUFJLENBQVc7UUFBVSxjQUFTLEdBQVQsU0FBUyxDQUFvQjtJQUFHLENBQUM7Ozs7SUFFdkUsY0FBYztRQUNuQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDL0IsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxRQUFRLENBQUMsRUFBRTs7a0JBQ1AsR0FBRyxHQUFtQixRQUFRLENBQUMsSUFBSSxFQUFFO1lBQzNDLE9BQU8sR0FBRyxDQUFDO1FBQ2IsQ0FBQyxFQUFDLENBQ0g7YUFDQSxTQUFTLEVBQUU7YUFDWCxJQUFJOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUM7YUFDbEIsS0FBSzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQUM7SUFDM0IsQ0FBQzs7OztJQUVNLDBCQUEwQjtRQUMvQixPQUFPLElBQUksQ0FBQyxJQUFJO2FBQ2IsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQUMsQ0FB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a0JBQWtCOzs7Ozs7O0lBWWIsa0NBQXVCOzs7OztJQUFFLHVDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBFbmRwb2ludHNDb25zdGFudHMgfSBmcm9tICdAY2VtZXgtY29yZS9jb25zdGFudHMtdjIvZGlzdCc7XG5pbXBvcnQge1xuICBDb21wYW55LFxuICBDdXN0b21lcixcbiAgSm9ic2l0ZSxcbiAgTGVnYWxFbnRpdHlEVE9cbn0gZnJvbSAnQGNlbWV4LWNvcmUvdHlwZXMtdjIvZGlzdCc7XG5cbmltcG9ydCB7IEh0dHBDZW1leCB9IGZyb20gJy4vaHR0cC5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZpbmFuY2lhbERvY3VtZW50cyB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENlbWV4LCBwcml2YXRlIGVuZHBvaW50czogRW5kcG9pbnRzQ29uc3RhbnRzKSB7fVxuXG4gIHB1YmxpYyBnZXRMZWdhbEVudGl0eSgpOiBQcm9taXNlPExlZ2FsRW50aXR5RFRPPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybCgnbGVnYWxlbnRpdHknKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1eDogTGVnYWxFbnRpdHlEVE8gPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgcmV0dXJuIGF1eDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oZGF0YSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRBbGxMZWdhbEVudGl0eUN1c3RvbWVycygpOiBQcm9taXNlPEN1c3RvbWVyW10+IHtcbiAgICByZXR1cm4gdGhpcy5odHRwXG4gICAgICAuZ2V0KHRoaXMuZ2V0VXJsKCdsZWdhbGVudGl0eWN1c3RvbWVycycpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV4OiBMZWdhbEVudGl0eURUTyA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF1eC5yZXNwb25zZUxlZ2FsRW50aXR5LmN1c3RvbWVyO1xuICAgICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oZGF0YSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5Q3VzdG9tZXIoY3VzdG9tZXJDb2RlOiBhbnkpOiBQcm9taXNlPENvbXBhbnlbXT4ge1xuICAgIHJldHVybiB0aGlzLmh0dHBcbiAgICAgIC5nZXQodGhpcy5nZXRVcmwoJ2xlZ2FsZW50aXR5P2N1c3RvbWVyQ29kZT0nICsgY3VzdG9tZXJDb2RlKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1eDogTGVnYWxFbnRpdHlEVE8gPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhdXgucmVzcG9uc2VMZWdhbEVudGl0eS5jb21wYW55O1xuICAgICAgICAgIHJldHVybiBzbmFwc2hvdDtcbiAgICAgICAgfSlcbiAgICAgIClcbiAgICAgIC50b1Byb21pc2UoKVxuICAgICAgLnRoZW4oZGF0YSA9PiBkYXRhKVxuICAgICAgLmNhdGNoKGVycm9yID0+IGVycm9yKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMZWdhbEVudGl0eUJ5Q29tcGFueShjb21wYW55Q29kZTogYW55KTogUHJvbWlzZTxDdXN0b21lcltdPiB7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybCgnbGVnYWxlbnRpdHk/Y29tcGFueUNvZGU9JyArIGNvbXBhbnlDb2RlKSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAocmVzcG9uc2UgPT4ge1xuICAgICAgICAgIGNvbnN0IGF1eDogTGVnYWxFbnRpdHlEVE8gPSByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgY29uc3Qgc25hcHNob3QgPSBhdXgucmVzcG9uc2VMZWdhbEVudGl0eS5jdXN0b21lcjtcbiAgICAgICAgICByZXR1cm4gc25hcHNob3Q7XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKClcbiAgICAgIC50aGVuKGRhdGEgPT4gZGF0YSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiBlcnJvcik7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGVnYWxFbnRpdHlKb2JzaXRlcyhcbiAgICBjdXN0b21lckNvZGU6IGFueSxcbiAgICBjb21wYW55Q29kZTogYW55XG4gICk6IFByb21pc2U8Sm9ic2l0ZVtdPiB7XG4gICAgY29uc3QgYXBpID1cbiAgICAgICdsZWdhbGVudGl0eWpvYnNpdGVzP2NvbXBhbnlDb2RlPScgK1xuICAgICAgY29tcGFueUNvZGUgK1xuICAgICAgJyZjdXN0b21lckNvZGU9JyArXG4gICAgICBjdXN0b21lckNvZGU7XG4gICAgcmV0dXJuIHRoaXMuaHR0cFxuICAgICAgLmdldCh0aGlzLmdldFVybChhcGkpKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChyZXNwb25zZSA9PiB7XG4gICAgICAgICAgY29uc3QgYXV4OiBMZWdhbEVudGl0eURUTyA9IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICBjb25zdCBzbmFwc2hvdCA9IGF1eC5yZXNwb25zZUxlZ2FsRW50aXR5LmpvYlNpdGU7XG4gICAgICAgICAgcmV0dXJuIHNuYXBzaG90O1xuICAgICAgICB9KVxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpXG4gICAgICAudGhlbihkYXRhID0+IGRhdGEpXG4gICAgICAuY2F0Y2goZXJyb3IgPT4gZXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRVcmwoYXBpOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IHRoaXMuaHR0cC5nZW5lcmF0ZUVuZHBvaW50KFxuICAgICAgdGhpcy5lbmRwb2ludHMuVjEgKyB0aGlzLmVuZHBvaW50cy5hcm1DYXBhYmlsaXR5ICsgYXBpXG4gICAgKTtcbiAgICByZXR1cm4gdXJsO1xuICB9XG59XG4iXX0=