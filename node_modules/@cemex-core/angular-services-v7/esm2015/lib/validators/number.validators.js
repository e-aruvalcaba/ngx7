/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class NumberValidators {
    /**
     * @param {?} c
     * @return {?}
     */
    static isNumeric(c) {
        if (!isNaN(parseFloat(c.value)) && isFinite(c.value)) {
            return null;
        }
        else {
            return {
                notNumeric: true
            };
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    static onlyTwoDecimals(c) {
        /** @type {?} */
        const regexp = /^\d+(\.\d{1,2})?$/;
        if (regexp.test(c.value)) {
            return null;
        }
        else {
            return {
                patternInvalid: true
            };
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    static greaterThanZero(c) {
        if (parseFloat(c.value) > 0) {
            return null;
        }
        else {
            return {
                lessThanZero: true
            };
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    static isPositive(c) {
        if (parseFloat(c.value) >= 0) {
            return null;
        }
        else {
            return {
                isNegative: true
            };
        }
    }
    /**
     * @param {?} max
     * @return {?}
     */
    static lessThan(max) {
        /** @type {?} */
        const maxNumber = max;
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const num = +control.value;
            if (isNaN(num) || num > maxNumber) {
                return {
                    isGreater: true
                };
            }
            return null;
        });
    }
    /**
     * @param {?} min
     * @return {?}
     */
    static greaterThan(min) {
        /** @type {?} */
        const minNumber = min;
        return (/**
         * @param {?} control
         * @return {?}
         */
        (control) => {
            /** @type {?} */
            const num = +control.value;
            if (isNaN(num) || num < minNumber) {
                return {
                    isLess: true
                };
            }
            return null;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLnZhbGlkYXRvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgtY29yZS9hbmd1bGFyLXNlcnZpY2VzLXY3LyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvcnMvbnVtYmVyLnZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7O0lBQ3BCLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3BELE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7O2NBQ3ZCLE1BQU0sR0FBRyxtQkFBbUI7UUFDbEMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07WUFDTCxPQUFPO2dCQUNMLGNBQWMsRUFBRSxJQUFJO2FBQ3JCLENBQUM7U0FDSDtJQUNILENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQzdCLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTyxJQUFJLENBQUM7U0FDYjthQUFNO1lBQ0wsT0FBTztnQkFDTCxZQUFZLEVBQUUsSUFBSTthQUNuQixDQUFDO1NBQ0g7SUFDSCxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QixJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQzVCLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTtZQUNMLE9BQU87Z0JBQ0wsVUFBVSxFQUFFLElBQUk7YUFDakIsQ0FBQztTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVc7O2NBQzFCLFNBQVMsR0FBRyxHQUFHO1FBQ3JCOzs7O1FBQU8sQ0FBQyxPQUFPLEVBQTBCLEVBQUU7O2tCQUNuQyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSztZQUMxQixJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsU0FBUyxFQUFFO2dCQUNqQyxPQUFPO29CQUNMLFNBQVMsRUFBRSxJQUFJO2lCQUNoQixDQUFDO2FBQ0g7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsRUFBQztJQUNKLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFXOztjQUM3QixTQUFTLEdBQUcsR0FBRztRQUNyQjs7OztRQUFPLENBQUMsT0FBTyxFQUEwQixFQUFFOztrQkFDbkMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEtBQUs7WUFDMUIsSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLFNBQVMsRUFBRTtnQkFDakMsT0FBTztvQkFDTCxNQUFNLEVBQUUsSUFBSTtpQkFDYixDQUFDO2FBQ0g7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUMsRUFBQztJQUNKLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBOdW1iZXJWYWxpZGF0b3JzIHtcbiAgcHVibGljIHN0YXRpYyBpc051bWVyaWMoYyk6IGFueSB7XG4gICAgaWYgKCFpc05hTihwYXJzZUZsb2F0KGMudmFsdWUpKSAmJiBpc0Zpbml0ZShjLnZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vdE51bWVyaWM6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBvbmx5VHdvRGVjaW1hbHMoYyk6IGFueSB7XG4gICAgY29uc3QgcmVnZXhwID0gL15cXGQrKFxcLlxcZHsxLDJ9KT8kLztcbiAgICBpZiAocmVnZXhwLnRlc3QoYy52YWx1ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXR0ZXJuSW52YWxpZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGdyZWF0ZXJUaGFuWmVybyhjKTogYW55IHtcbiAgICBpZiAocGFyc2VGbG9hdChjLnZhbHVlKSA+IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsZXNzVGhhblplcm86IHRydWVcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBpc1Bvc2l0aXZlKGMpOiBhbnkge1xuICAgIGlmIChwYXJzZUZsb2F0KGMudmFsdWUpID49IDApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc05lZ2F0aXZlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgbGVzc1RoYW4obWF4OiBudW1iZXIpIHtcbiAgICBjb25zdCBtYXhOdW1iZXIgPSBtYXg7XG4gICAgcmV0dXJuIChjb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XG4gICAgICBjb25zdCBudW0gPSArY29udHJvbC52YWx1ZTtcbiAgICAgIGlmIChpc05hTihudW0pIHx8IG51bSA+IG1heE51bWJlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzR3JlYXRlcjogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZ3JlYXRlclRoYW4obWluOiBudW1iZXIpIHtcbiAgICBjb25zdCBtaW5OdW1iZXIgPSBtaW47XG4gICAgcmV0dXJuIChjb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XG4gICAgICBjb25zdCBudW0gPSArY29udHJvbC52YWx1ZTtcbiAgICAgIGlmIChpc05hTihudW0pIHx8IG51bSA8IG1pbk51bWJlcikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlzTGVzczogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxufVxuIl19