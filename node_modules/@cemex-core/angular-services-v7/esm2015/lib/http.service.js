/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Headers, Http, RequestOptions } from '@angular/http';
import { Observable } from 'rxjs';
import { ProjectSettings } from './project.settings';
export class HttpCemex {
    /**
     * @param {?} http
     * @param {?} projectSettings
     */
    constructor(http, projectSettings) {
        this.http = http;
        this.projectSettings = projectSettings;
        this._validSettings = false;
        this._validSettings = this.validateProjectSettings();
    }
    /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    generateEndpoint(apiEndpoint) {
        return this.projectSettings.generateEndpoint(apiEndpoint);
    }
    /**
     * @return {?}
     */
    get clientId() {
        return this.projectSettings.clientId;
    }
    /**
     * @return {?}
     */
    get appCode() {
        return this.projectSettings.appCode;
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    request(url, options) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options);
        return this.http.request(url, loptions);
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    get(url, options, overrideHeader) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.get(url, loptions);
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    post(url, body, options, overrideHeader) {
        if (!this._validSettings) {
            /** @type {?} */
            const message = 'Set missing environment variables of API_HOST, API_ORG, API_ENV, APP_CODE, CLIENT_ID';
            return Observable.throw(new Error(message));
        }
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.post(url, body, loptions);
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    put(url, body, options, overrideHeader) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.put(url, body, loptions);
    }
    /**
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    patch(url, body, options, overrideHeader) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.patch(url, body, loptions);
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    delete(url, options, overrideHeader) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.delete(url, loptions);
    }
    /**
     * @param {?} url
     * @param {?=} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    head(url, options, overrideHeader) {
        /** @type {?} */
        const loptions = this.createAuthorizationHeader(options, overrideHeader);
        return this.http.head(url, loptions);
    }
    /**
     * @return {?}
     */
    isRunningOnBrowser() {
        return ((/** @type {?} */ (global))) !== null && ((/** @type {?} */ (global))) !== undefined;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    encrypt(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    decrypt(str) {
        return str ? decodeURIComponent(escape(window.atob(str))) : str;
    }
    /**
     * @param {?} newKeys
     * @return {?}
     */
    setProjectSettingsNewKeys(newKeys) {
        this.projectSettings.setAppKeys(newKeys);
    }
    /**
     * @protected
     * @param {?} options
     * @param {?=} overrideHeader
     * @return {?}
     */
    createAuthorizationHeader(options, overrideHeader) {
        /** @type {?} */
        const containsHeader = options && options.headers && options.headers.keys().length > 0;
        /** @type {?} */
        const result = options
            ? Object.assign({}, options)
            : new RequestOptions();
        /** @type {?} */
        const headers = new Headers();
        /** @type {?} */
        const language = this.isRunningOnBrowser()
            ? ((/** @type {?} */ (window))).localStorage.getItem('language') || 'en'
            : 'en';
        headers.append('Accept', 'application/json');
        headers.append('X-IBM-Client-Id', this.projectSettings.clientId);
        headers.append('App-Code', this.projectSettings.appCode);
        headers.append('Accept-Language', language);
        /** @type {?} */
        const accessToken = sessionStorage.getItem('access_token');
        /** @type {?} */
        const isContainsToken = accessToken && accessToken !== undefined;
        if (isContainsToken) {
            headers.append('Authorization', 'Bearer ' + accessToken);
        }
        /** @type {?} */
        const jwtApp = sessionStorage.getItem('jwt');
        if (this.isRunningOnBrowser() && jwtApp && jwtApp !== undefined) {
            headers.append('jwt', jwtApp);
        }
        // overwrite existing headers or add new headers
        /** @type {?} */
        const headerKeys = containsHeader ? options.headers.keys() : [];
        for (const keyHeader of headerKeys) {
            headers.set(keyHeader, options.headers.get(keyHeader));
        }
        result.headers = headers;
        if (overrideHeader && containsHeader) {
            result.headers = options.headers;
        }
        return result;
    }
    /**
     * @private
     * @return {?}
     */
    validateProjectSettings() {
        /** @type {?} */
        const settings = this.projectSettings;
        return (settings.apiBasePath !== undefined &&
            settings.apiEnv !== undefined &&
            settings.apiOrg !== undefined &&
            settings.appCode !== undefined &&
            settings.clientId !== undefined);
    }
}
HttpCemex.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpCemex.ctorParameters = () => [
    { type: Http },
    { type: ProjectSettings }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpCemex.prototype._validSettings;
    /**
     * @type {?}
     * @protected
     */
    HttpCemex.prototype.http;
    /**
     * @type {?}
     * @private
     */
    HttpCemex.prototype.projectSettings;
}
//# sourceMappingURL=data:application/json;base64,