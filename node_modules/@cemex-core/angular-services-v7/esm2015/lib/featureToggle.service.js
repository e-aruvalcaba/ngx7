/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { Http } from '@angular/http';
import { Broadcaster } from '@cemex-core/events-v7';
export class FeatureToggleService {
    /**
     * @param {?} eventBroadcaster
     * @param {?} http
     * @param {?} _productPath
     * @param {?} _productEnvironment
     * @param {?} localManifest
     */
    constructor(eventBroadcaster, http, _productPath, _productEnvironment, localManifest) {
        this.eventBroadcaster = eventBroadcaster;
        this.http = http;
        this._productPath = _productPath;
        this._productEnvironment = _productEnvironment;
        this.localManifest = localManifest;
        this.productPath = '';
        this.productEnvironment = '';
        this.productPath = _productPath || '/';
        this.productEnvironment = _productEnvironment || 'development';
        this.getFeatureList(this.localManifest || false);
    }
    /**
     * gets all features
     * @return {?}
     */
    static all() {
        /** @type {?} */
        const result = this.featureList;
        return result;
    }
    /**
     * this method returns either true or false if the list of the features
     * requested is enabled in this environment and for this user
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    feature(featureId, releaseVersion, featureVersion, hostName) {
        if (typeof featureId === 'string') {
            return this.coreValidator(featureId, releaseVersion, featureVersion, hostName);
        }
        else {
            featureId.forEach((/**
             * @param {?} singleFeature
             * @return {?}
             */
            singleFeature => {
                if (!this.coreValidator(singleFeature, releaseVersion, featureVersion, hostName)) {
                    return false;
                }
            }));
        }
        return true;
    }
    /**
     * this method returns all list of features
     * @return {?}
     */
    getAll() {
        return FeatureToggleService.featureList;
    }
    /**
     * this method allows to load the feature list from the file
     * @param {?} loadFromLocalList
     * @return {?}
     */
    getFeatureList(loadFromLocalList) {
        // if the loadfromlocallist is true, then load the local-feature.json file
        if (loadFromLocalList) {
            this.http
                .get(this.productPath + 'vendor/local-feature.json')
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => this.populateFeatures(response.json())))
                .catch(this.handleError);
        }
        else {
            // if the API is ready then switch is this one
            this.http
                .get('/feature/api' + this.productPath)
                .toPromise()
                .then((/**
             * @param {?} response
             * @return {?}
             */
            response => this.populateFeatures(response.json())))
                .catch(this.handleError);
        }
    }
    /**
     * @param {?} featureId
     * @param {?=} releaseVersion
     * @param {?=} featureVersion
     * @param {?=} hostName
     * @return {?}
     */
    coreValidator(featureId, releaseVersion, featureVersion, hostName) {
        // todo smaller refactor
        /** @type {?} */
        const localFind = FeatureToggleService.featureList.get(featureId);
        if (localFind === undefined) {
            return false;
        }
        // if it is found then verify against the country
        if (localFind.country !== null && localFind.country !== undefined) {
            // we can take the country from the session storage
            if (window.sessionStorage.getItem('country').indexOf(localFind.country) ===
                -1) {
                return false;
            }
        }
        if (localFind.role !== null && localFind.role !== undefined) {
            /** @type {?} */
            let isRoleAssigned = false;
            /** @type {?} */
            const appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            (app) => {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => {
                    if (((/** @type {?} */ (role))).roleCode === localFind.role) {
                        isRoleAssigned = true;
                    }
                }));
            }));
            if (!isRoleAssigned) {
                return false;
            }
        }
        if (localFind.role_match !== null && localFind.role_match !== undefined) {
            /** @type {?} */
            let rolesAssigned = 0;
            /** @type {?} */
            const appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            (app) => {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => {
                    if (localFind.role_match.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned = rolesAssigned + 1;
                    }
                }));
            }));
            if (rolesAssigned !== localFind.role_match.split(',').length) {
                return false;
            }
        }
        if (localFind.role_any !== null && localFind.role_any !== undefined) {
            /** @type {?} */
            let rolesAssigned = 0;
            /** @type {?} */
            const appsAvailable = JSON.parse(window.sessionStorage.getItem('applications'));
            appsAvailable.forEach((/**
             * @param {?} app
             * @return {?}
             */
            (app) => {
                app.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => {
                    if (localFind.role_any.indexOf(((/** @type {?} */ (role))).roleCode) !== -1) {
                        rolesAssigned = rolesAssigned + 1;
                    }
                }));
            }));
            if (rolesAssigned === 0) {
                return false;
            }
        }
        if (localFind.environment !== null && localFind.environment !== undefined) {
            // verify the injection of the environment
            if (localFind.environment !== this.productEnvironment) {
                return false;
            }
        }
        if (localFind.release_version !== null &&
            localFind.release_version !== undefined) {
            // verify the injection of the environment
            if (localFind.release_version !== releaseVersion) {
                return false;
            }
        }
        if (localFind.feature_version !== null &&
            localFind.feature_version !== undefined) {
            // verify the injection of the environment
            if (localFind.feature_version !== featureVersion) {
                return false;
            }
        }
        if (localFind.host_name !== null && localFind.host_name !== undefined) {
            // verify the injection of the environment
            if (localFind.host_name !== hostName) {
                return false;
            }
        }
        return true;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        return Promise.reject(error.message || error);
    }
    /**
     * @param {?} result
     * @return {?}
     */
    populateFeatures(result) {
        for (const item of Object.keys(result)) {
            FeatureToggleService.featureList.set(((/** @type {?} */ (result[item]))).feature, result[item]);
        }
        // this.eventBroadcaster.broadcast(Broadcaster.DCM_LANGUAGE_FETCHED, TranslationService.language);
        // this.onChange(result);
    }
}
FeatureToggleService.featureList = new Map();
FeatureToggleService.language = '';
// Must be set on path constants
FeatureToggleService.PRODUCT_PATH = 'PRODUCT_PATH';
FeatureToggleService.ENVIRONMENT = 'PRODUCT_PATH';
FeatureToggleService.USE_LOCAL_MANIFEST = 'USE_LOCAL_MANIFEST';
FeatureToggleService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FeatureToggleService.ctorParameters = () => [
    { type: Broadcaster },
    { type: Http },
    { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.PRODUCT_PATH,] }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [FeatureToggleService.ENVIRONMENT,] }, { type: Optional }] },
    { type: Boolean, decorators: [{ type: Inject, args: [FeatureToggleService.USE_LOCAL_MANIFEST,] }, { type: Optional }] }
];
if (false) {
    /** @type {?} */
    FeatureToggleService.featureList;
    /** @type {?} */
    FeatureToggleService.language;
    /** @type {?} */
    FeatureToggleService.PRODUCT_PATH;
    /** @type {?} */
    FeatureToggleService.ENVIRONMENT;
    /** @type {?} */
    FeatureToggleService.USE_LOCAL_MANIFEST;
    /** @type {?} */
    FeatureToggleService.prototype.productPath;
    /** @type {?} */
    FeatureToggleService.prototype.productEnvironment;
    /** @type {?} */
    FeatureToggleService.prototype.eventBroadcaster;
    /** @type {?} */
    FeatureToggleService.prototype.http;
    /** @type {?} */
    FeatureToggleService.prototype._productPath;
    /** @type {?} */
    FeatureToggleService.prototype._productEnvironment;
    /** @type {?} */
    FeatureToggleService.prototype.localManifest;
}
/**
 * @record
 */
export function IFeatureItem() { }
if (false) {
    /** @type {?} */
    IFeatureItem.prototype.feature;
    /** @type {?} */
    IFeatureItem.prototype.option;
    /** @type {?} */
    IFeatureItem.prototype.environment;
    /** @type {?} */
    IFeatureItem.prototype.role;
    /** @type {?} */
    IFeatureItem.prototype.country;
    /** @type {?} */
    IFeatureItem.prototype.release_version;
    /** @type {?} */
    IFeatureItem.prototype.feature_version;
    /** @type {?} */
    IFeatureItem.prototype.host_name;
    /** @type {?} */
    IFeatureItem.prototype.role_match;
    /** @type {?} */
    IFeatureItem.prototype.role_any;
}
/**
 * @record
 */
export function IApplication() { }
if (false) {
    /** @type {?} */
    IApplication.prototype.applicationCode;
    /** @type {?} */
    IApplication.prototype.applicationId;
    /** @type {?} */
    IApplication.prototype.roles;
}
/**
 * @record
 */
export function IRole() { }
if (false) {
    /** @type {?} */
    IRole.prototype.roleCode;
    /** @type {?} */
    IRole.prototype.roleId;
}
//# sourceMappingURL=data:application/json;base64,