/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class ProjectSettings {
    constructor() {
        /** @type {?} */
        const APP_KEYS = {
            API_ENV_KEY: 'API_ENV',
            API_HOST_KEY: 'API_HOST',
            API_ORG_KEY: 'API_ORG',
            APP_CODE_KEY: 'APP_CODE',
            CLIENT_ID_KEY: 'CLIENT_ID'
        };
        this._appCode = ((/** @type {?} */ (global)))[APP_KEYS.APP_CODE_KEY];
        this._clientId = ((/** @type {?} */ (global)))[APP_KEYS.CLIENT_ID_KEY];
        this._apiBasePath = ((/** @type {?} */ (global)))[APP_KEYS.API_HOST_KEY];
        this._apiOrg = ((/** @type {?} */ (global)))[APP_KEYS.API_ORG_KEY];
        this._apiEnv = ((/** @type {?} */ (global)))[APP_KEYS.API_ENV_KEY];
        if (this._apiBasePath === undefined) {
            console.warn('environment variable \'API_HOST\' is missing !!');
        }
    }
    // ============================================================================================
    // Getters
    // ============================================================================================
    /**
     * @return {?}
     */
    get appCode() {
        return this._appCode;
    }
    /**
     * @return {?}
     */
    get clientId() {
        return this._clientId;
    }
    /**
     * @return {?}
     */
    get apiBasePath() {
        return this._apiBasePath;
    }
    /**
     * @return {?}
     */
    get apiOrg() {
        return this._apiOrg;
    }
    /**
     * @return {?}
     */
    get apiEnv() {
        return this._apiEnv;
    }
    /**
     * @param {?} apiEndpoint
     * @return {?}
     */
    generateEndpoint(apiEndpoint) {
        /** @type {?} */
        const url = `${this._apiBasePath}${this._apiOrg}${this._apiEnv}${apiEndpoint}`;
        return url;
    }
    /**
     * @return {?}
     */
    getBaseOrgEnvPath() {
        return this._apiBasePath + this._apiOrg + this._apiEnv;
    }
    /**
     * @param {?} newKeys
     * @return {?}
     */
    setAppKeys(newKeys) {
        this._appCode = newKeys.APP_CODE;
        this._clientId = newKeys.CLIENT_ID;
        if (this._apiBasePath === undefined) {
            console.warn('environment variable \'API_HOST\' is missing !!');
        }
    }
}
ProjectSettings.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ProjectSettings.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    ProjectSettings.prototype._appCode;
    /**
     * @type {?}
     * @private
     */
    ProjectSettings.prototype._clientId;
    /**
     * @type {?}
     * @private
     */
    ProjectSettings.prototype._apiBasePath;
    /**
     * @type {?}
     * @private
     */
    ProjectSettings.prototype._apiOrg;
    /**
     * @type {?}
     * @private
     */
    ProjectSettings.prototype._apiEnv;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC5zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC1jb3JlL2FuZ3VsYXItc2VydmljZXMtdjcvIiwic291cmNlcyI6WyJsaWIvcHJvamVjdC5zZXR0aW5ncy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQyxNQUFNLE9BQU8sZUFBZTtJQU8xQjs7Y0FDUSxRQUFRLEdBQUc7WUFDZixXQUFXLEVBQUUsU0FBUztZQUN0QixZQUFZLEVBQUUsVUFBVTtZQUN4QixXQUFXLEVBQUUsU0FBUztZQUN0QixZQUFZLEVBQUUsVUFBVTtZQUN4QixhQUFhLEVBQUUsV0FBVztTQUMzQjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN2RCxJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLFlBQVksR0FBRyxDQUFDLG1CQUFBLE1BQU0sRUFBTyxDQUFDLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNELElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxtQkFBQSxNQUFNLEVBQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsbUJBQUEsTUFBTSxFQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFckQsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDOzs7Ozs7O0lBTUQsSUFBVyxPQUFPO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN4QixDQUFDOzs7O0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUMzQixDQUFDOzs7O0lBRUQsSUFBVyxNQUFNO1FBQ2YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDO0lBQ3RCLENBQUM7Ozs7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQzs7Ozs7SUFFTSxnQkFBZ0IsQ0FBQyxXQUFtQjs7Y0FDbkMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUM3QyxJQUFJLENBQUMsT0FDUCxHQUFHLFdBQVcsRUFBRTtRQUNoQixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Ozs7SUFFTSxpQkFBaUI7UUFDdEIsT0FBTyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN6RCxDQUFDOzs7OztJQUVNLFVBQVUsQ0FBQyxPQUFPO1FBQ3ZCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFFbkMsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVMsRUFBRTtZQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGlEQUFpRCxDQUFDLENBQUM7U0FDakU7SUFDSCxDQUFDOzs7WUF0RUYsVUFBVTs7Ozs7Ozs7O0lBRVQsbUNBQXlCOzs7OztJQUN6QixvQ0FBMEI7Ozs7O0lBQzFCLHVDQUE2Qjs7Ozs7SUFDN0Isa0NBQXdCOzs7OztJQUN4QixrQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmRlY2xhcmUgdmFyIGdsb2JhbDogYW55O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUHJvamVjdFNldHRpbmdzIHtcbiAgcHJpdmF0ZSBfYXBwQ29kZTogc3RyaW5nO1xuICBwcml2YXRlIF9jbGllbnRJZDogc3RyaW5nO1xuICBwcml2YXRlIF9hcGlCYXNlUGF0aDogc3RyaW5nO1xuICBwcml2YXRlIF9hcGlPcmc6IHN0cmluZztcbiAgcHJpdmF0ZSBfYXBpRW52OiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgQVBQX0tFWVMgPSB7XG4gICAgICBBUElfRU5WX0tFWTogJ0FQSV9FTlYnLFxuICAgICAgQVBJX0hPU1RfS0VZOiAnQVBJX0hPU1QnLFxuICAgICAgQVBJX09SR19LRVk6ICdBUElfT1JHJyxcbiAgICAgIEFQUF9DT0RFX0tFWTogJ0FQUF9DT0RFJyxcbiAgICAgIENMSUVOVF9JRF9LRVk6ICdDTElFTlRfSUQnXG4gICAgfTtcblxuICAgIHRoaXMuX2FwcENvZGUgPSAoZ2xvYmFsIGFzIGFueSlbQVBQX0tFWVMuQVBQX0NPREVfS0VZXTtcbiAgICB0aGlzLl9jbGllbnRJZCA9IChnbG9iYWwgYXMgYW55KVtBUFBfS0VZUy5DTElFTlRfSURfS0VZXTtcbiAgICB0aGlzLl9hcGlCYXNlUGF0aCA9IChnbG9iYWwgYXMgYW55KVtBUFBfS0VZUy5BUElfSE9TVF9LRVldO1xuICAgIHRoaXMuX2FwaU9yZyA9IChnbG9iYWwgYXMgYW55KVtBUFBfS0VZUy5BUElfT1JHX0tFWV07XG4gICAgdGhpcy5fYXBpRW52ID0gKGdsb2JhbCBhcyBhbnkpW0FQUF9LRVlTLkFQSV9FTlZfS0VZXTtcblxuICAgIGlmICh0aGlzLl9hcGlCYXNlUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2Vudmlyb25tZW50IHZhcmlhYmxlIFxcJ0FQSV9IT1NUXFwnIGlzIG1pc3NpbmcgISEnKTtcbiAgICB9XG4gIH1cblxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAvLyBHZXR0ZXJzXG4gIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgcHVibGljIGdldCBhcHBDb2RlKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FwcENvZGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNsaWVudElkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaWVudElkO1xuICB9XG5cbiAgcHVibGljIGdldCBhcGlCYXNlUGF0aCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9hcGlCYXNlUGF0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXBpT3JnKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FwaU9yZztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgYXBpRW52KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FwaUVudjtcbiAgfVxuXG4gIHB1YmxpYyBnZW5lcmF0ZUVuZHBvaW50KGFwaUVuZHBvaW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IGAke3RoaXMuX2FwaUJhc2VQYXRofSR7dGhpcy5fYXBpT3JnfSR7XG4gICAgICB0aGlzLl9hcGlFbnZcbiAgICB9JHthcGlFbmRwb2ludH1gO1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICBwdWJsaWMgZ2V0QmFzZU9yZ0VudlBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fYXBpQmFzZVBhdGggKyB0aGlzLl9hcGlPcmcgKyB0aGlzLl9hcGlFbnY7XG4gIH1cblxuICBwdWJsaWMgc2V0QXBwS2V5cyhuZXdLZXlzKTogdm9pZCB7XG4gICAgdGhpcy5fYXBwQ29kZSA9IG5ld0tleXMuQVBQX0NPREU7XG4gICAgdGhpcy5fY2xpZW50SWQgPSBuZXdLZXlzLkNMSUVOVF9JRDtcblxuICAgIGlmICh0aGlzLl9hcGlCYXNlUGF0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ2Vudmlyb25tZW50IHZhcmlhYmxlIFxcJ0FQSV9IT1NUXFwnIGlzIG1pc3NpbmcgISEnKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==