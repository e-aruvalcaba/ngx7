import { EventEmitter, OnDestroy, AfterContentInit } from '@angular/core';
import { Router } from '@angular/router';
import { SafeResourceUrl } from '@angular/platform-browser';
import { MediaObserver } from '@angular/flex-layout';
import { Observable } from 'rxjs';
import { TranslationService } from '@cemex-core/angular-localization-v7';
import { SessionService } from '@cemex-core/angular-services-v7';
import { Broadcaster } from '@cemex-core/events-v7';
import { IAppMenuItem, ILegalEntity } from '@cemex-core/types-v2/dist/index.interface';
import { IApplicationMenu } from '../interfaces/menu.dto';
export interface ILanguage {
    languageId: number;
    languageName: string;
    languageISO: string;
}
export interface ILanguageSelect {
    languageName: string;
    languageISO: string;
    isSelected: boolean;
}
export interface ICustomOption {
    iconId: string;
    labelOption: string;
    subOptions: ICustomSubOption[];
}
export interface ICustomSubOption {
    idOption: number;
    labelOption: string;
}
export interface ISidebarILegalEntity extends ILegalEntity {
    active?: boolean;
    selected?: boolean;
}
export declare enum NavigationType {
    Redirect = 0,
    Router = 1
}
export declare class CmxSidebarComponent implements OnDestroy, AfterContentInit {
    translationService: TranslationService;
    private sessionService;
    media: MediaObserver;
    private router;
    private eventBroadcaster;
    _customLegalEntity: ISidebarILegalEntity;
    preSelectedCustomer: ISidebarILegalEntity;
    _legalEntityMenuActive: boolean;
    rtl: boolean;
    hideUserPanel: boolean;
    pathMobileLang: string;
    disabledProfile: boolean;
    forceRouterList: string[];
    collapseEvent: EventEmitter<boolean>;
    legalEvent: EventEmitter<any>;
    copyrightEvent: EventEmitter<any>;
    legalEntityClicked: EventEmitter<ISidebarILegalEntity>;
    hiddenLegalEntity: boolean;
    showAppNavigation: boolean;
    _currentLegalEntity: ISidebarILegalEntity;
    _searchLegalEntity: string;
    _isWaiting: boolean;
    _legalEntityList: ISidebarILegalEntity[];
    _menuItems: IApplicationMenu[];
    _languages: ILanguageSelect[];
    _customOption: ICustomOption;
    _notificationItems: any[];
    preSelectedLanguage: string;
    _languageMenuActive: boolean;
    readonly _showFaded: boolean;
    _fullNameUser: string;
    developerPortalUrl: SafeResourceUrl;
    _clickedLink: IAppMenuItem;
    _clickedApp: IApplicationMenu;
    _isCollapsed: boolean;
    private _totalLegalEntities;
    private _fetchCount;
    private _showLegalMsg;
    private _legalEntityMsg;
    private _watcher;
    private _isMobile;
    private _isMobilePhone;
    private _userProfile;
    private _showLegalEntity;
    private _currentLang;
    private _currentPage;
    isCollapsed: boolean;
    menuItems: IApplicationMenu[];
    private mobileBreakpoint;
    private clickMenuOption;
    private customOptionEvent;
    customOptions: ICustomOption;
    customLegalEntity: ISidebarILegalEntity;
    readonly initials: string;
    constructor(translationService: TranslationService, sessionService: SessionService, media: MediaObserver, router: Router, eventBroadcaster: Broadcaster, isRTL: boolean);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    preSelectLanguage(item: any): void;
    showMobileLanguage(): void;
    changeLanguage(): void;
    changeCustomer(): void;
    closeCustomerSelection(): void;
    showLegalEntities(): void;
    toggleAppNavigation(): void;
    closeLanguageSelection(): void;
    getLegalEntitiesForCustomers(): void;
    setCurrentLegalEntityById(value: number): boolean;
    getLegalEntityById(value: number): ISidebarILegalEntity | void;
    filterLegalEntities(): void;
    getMessage(count?: number): any;
    preSelectLegalEntity(item: ISidebarILegalEntity): void;
    copyrightClick(): void;
    legalClick(): void;
    onresize(): void;
    detectMobile(): void;
    searchLegalEntity(fetch?: number, page?: number, setDisplayEntity?: boolean, clearLegalEntities?: boolean): void;
    setDisplayLegalEntity(): void;
    clickLegalEntity(item: ISidebarILegalEntity): void;
    isActiveLegalEntity(item: ISidebarILegalEntity): boolean;
    normalizeString(value: string): string;
    fetchMoreEntities(): void;
    onWindowScroll(event: any): void;
    getLanguages(): void;
    getLegalEntities(): void;
    getMenuItems(): void;
    onApplicationItemClick(itemClicked: IApplicationMenu): void;
    onSubItemClick(subItem: IAppMenuItem): void;
    shouldDisplayActiveMenu(menuToTest: IApplicationMenu, displayFlag: boolean): boolean;
    toggleSidebar(): void;
    getArrowIcon(): string;
    goToProfile(): void;
    goToSettings(): void;
    signOut(): void;
    setLanguage(lang: ILanguageSelect): void;
    getMainPath(path: string): string;
    handleError(error: Response | any): Observable<any>;
    setCmxIcons(icon: string): string;
    private navigateTo;
    private shouldForceRouter;
}
