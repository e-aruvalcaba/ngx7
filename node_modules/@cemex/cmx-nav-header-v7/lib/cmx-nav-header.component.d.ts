import { SafeResourceUrl, DomSanitizer } from '@angular/platform-browser';
import { AfterViewInit, EventEmitter, OnInit, Renderer, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';
import { Router } from '@angular/router';
import { CmxDialogComponent } from '@cemex/cmx-dialog-v7';
import { SessionService, CountryConfigService } from '@cemex-core/angular-services-v7';
import { TranslationService } from '@cemex-core/angular-localization-v7';
import { IUserProfile } from '@cemex-core/types-v2/dist/index.interface';
import { Broadcaster } from '@cemex-core/events-v7';
import { Http } from '@angular/http';
import { ISearchHeaderResult, ISearchHeaderService, INotificationEntry, INotificationService } from './interfaces';
import { ICountryConfig } from '@cemex-core/types-v2/dist';
export interface IUserLanguage {
    languageId: string;
    languageISO: string;
    isSelected: boolean;
    displayName: string;
    dummyLang?: boolean;
}
export declare class CmxNavHeaderComponent implements AfterViewInit, OnDestroy, OnChanges, OnInit {
    private sessionService;
    _translation: TranslationService;
    private eventBroadcaster;
    private countryConfigService;
    renderer: Renderer;
    http: Http;
    router: Router;
    private sanitizer;
    static USE_TRANSLATION_SERVER: string;
    _enableNotifications: boolean;
    _countryConfig: ICountryConfig;
    countrySupportContactModal: CmxDialogComponent;
    clickMenuButton: EventEmitter<any>;
    onSelectItemSearchEvent: EventEmitter<ISearchHeaderResult>;
    onViewAllResultEvent: EventEmitter<ISearchHeaderResult[]>;
    /**
     * @deprecated Subscribe to Broadcaster's DCM_APP_LOGOUT event instead
     */
    onLogout: EventEmitter<any>;
    onLanguageChange: EventEmitter<any>;
    rtl: boolean;
    useLanguageSelector: boolean;
    showCountrySupportContact: boolean;
    useInternalSettings: boolean;
    closeNotificationsOnCLick: boolean;
    customPathSettings: string;
    disabledProfile: boolean;
    feedbackDialog: CmxDialogComponent;
    readonly _notificationsToShow: INotificationEntry[];
    developerPortalUrl: SafeResourceUrl;
    _formLangUrl: SafeResourceUrl;
    logo: string;
    userCountry: string;
    emails: any[];
    phones: any[];
    _userProfile: IUserProfile;
    showAppNavigation: boolean;
    _userInitials: string;
    _showUserProfile: boolean;
    _showLangList: boolean;
    _languages: IUserLanguage[];
    _showNotifications: boolean;
    _allNotifications: INotificationEntry[];
    _unReadNotification: INotificationEntry[];
    private _openInput;
    private _searchValue;
    private _currentLang;
    private _defaultRoute;
    private _profileRoute;
    private _blueGreenCookieName;
    private _blueGreenCookieValue;
    private _activeSearch;
    private _openSearchList;
    private _subscriptionList;
    private _resultSearchList;
    private _openWaiting;
    private _noContainsData;
    private _currentIndexSearchList;
    private _activeSearchResult;
    private _clickProfileIcon;
    private _useTranslationServer;
    private _showIconNotification;
    private _clickNotificationIcon;
    private _allNotificationDict;
    private _allRawNotifications;
    private _notificationSubscription;
    private _notificationService;
    private _translationSuscriber;
    private _clickAppsIcon;
    readonly language: IUserLanguage | any;
    activeSearch: boolean;
    searchServiceList: ISearchHeaderService[];
    notificationService: INotificationService;
    private notificationAction;
    private searchInput;
    private showAllNotifications;
    constructor(sessionService: SessionService, _translation: TranslationService, eventBroadcaster: Broadcaster, countryConfigService: CountryConfigService, renderer: Renderer, http: Http, router: Router, sanitizer: DomSanitizer, isRTL: boolean);
    setAppNavigation(): void;
    setFeedback(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    setUserInfo(): void;
    showProfile(): void;
    setLanguages(): void;
    openCountrySupportContactModal(): void;
    onClickSearch(): void;
    onClickCancelSearch(): void;
    gotoHome(): void;
    goToSettings(): void;
    createCookie(name: string, value: string, days?: number): void;
    isBlueGreen(): boolean;
    toggleAppNavigation(): void;
    clickAppNavigationOutside(event: any): void;
    clickOutside(event: any): void;
    showNotifications(): void;
    clickNotificationOutSide(event: any): void;
    logout(): void;
    goToProfile(): void;
    selectLang(language: IUserLanguage): void;
    callNotificationAction(notification: INotificationEntry): void;
    onAllNotification(): void;
    getIconNotification(notification: INotificationEntry): string;
    private getCookie;
    private goHome;
    private getListResult;
    private onClickResultItem;
    private onClickViewAll;
    private getMessageResult;
    private compareNotificationFn;
    private getConfigCountry;
}
