import { Observable, Subject } from 'rxjs';
import { INotificationDict, INotificationEntry, INotificationResponse } from './notification-entry.dto';
export interface INotificationService {
    /**
     * @description this is to get Subscription and get notification's changes
     * @example
     * notificationSubscription.asObservable().subscribe( changes => { console.log('print notifications:', changes) })
     */
    notificationSubscription: Subject<INotificationResponse>;
    /**
     * @description this is to get Subscription and get pushed notification by service worker
     * @example
     * pushedNotification.asObservable().subscribe( changes => { console.log('push notification:', changes) })
     */
    pushedNotification: Subject<INotificationResponse>;
    /**
     * @description call API to get notifications
     * @returns Observable of INotificationDict, the get request should map the response to convert into INotificationDict
     */
    executeNotificationService(): Observable<INotificationDict>;
    /**
     * @param value notification of type any
     * @description this method should convert notification any into a INotificationEntry
     */
    mapNotification(value: any): INotificationEntry;
    /**
     * @description to call API to update notification status to viewed
     * @param notifications array of raw notification
     * @param typeNotification type notification, if you need to distinct API by type notificatin
     */
    updateNotification(notifications: any[], typeNotification: number): Observable<any>;
}
