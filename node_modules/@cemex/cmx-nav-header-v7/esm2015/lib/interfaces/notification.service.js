/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
export function INotificationService() { }
if (false) {
    /**
     * \@description this is to get Subscription and get notification's changes
     * \@example
     * notificationSubscription.asObservable().subscribe( changes => { console.log('print notifications:', changes) })
     * @type {?}
     */
    INotificationService.prototype.notificationSubscription;
    /**
     * \@description this is to get Subscription and get pushed notification by service worker
     * \@example
     * pushedNotification.asObservable().subscribe( changes => { console.log('push notification:', changes) })
     * @type {?}
     */
    INotificationService.prototype.pushedNotification;
    /**
     * \@description call API to get notifications
     * @return {?} Observable of INotificationDict, the get request should map the response to convert into INotificationDict
     */
    INotificationService.prototype.executeNotificationService = function () { };
    /**
     * \@description this method should convert notification any into a INotificationEntry
     * @param {?} value notification of type any
     * @return {?}
     */
    INotificationService.prototype.mapNotification = function (value) { };
    /**
     * \@description to call API to update notification status to viewed
     * @param {?} notifications array of raw notification
     * @param {?} typeNotification type notification, if you need to distinct API by type notificatin
     * @return {?}
     */
    INotificationService.prototype.updateNotification = function (notifications, typeNotification) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgvY214LW5hdi1oZWFkZXItdjcvIiwic291cmNlcyI6WyJsaWIvaW50ZXJmYWNlcy9ub3RpZmljYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsMENBaUNDOzs7Ozs7OztJQTNCQyx3REFBeUQ7Ozs7Ozs7SUFPekQsa0RBQW1EOzs7OztJQU1uRCw0RUFBNEQ7Ozs7OztJQU01RCxzRUFBZ0Q7Ozs7Ozs7SUFPaEQsbUdBQW9GIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBJTm90aWZpY2F0aW9uRGljdCwgSU5vdGlmaWNhdGlvbkVudHJ5LCBJTm90aWZpY2F0aW9uUmVzcG9uc2UgfSBmcm9tICcuL25vdGlmaWNhdGlvbi1lbnRyeS5kdG8nO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJTm90aWZpY2F0aW9uU2VydmljZSB7XHJcbiAgLyoqXHJcbiAgICogQGRlc2NyaXB0aW9uIHRoaXMgaXMgdG8gZ2V0IFN1YnNjcmlwdGlvbiBhbmQgZ2V0IG5vdGlmaWNhdGlvbidzIGNoYW5nZXNcclxuICAgKiBAZXhhbXBsZVxyXG4gICAqIG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbi5hc09ic2VydmFibGUoKS5zdWJzY3JpYmUoIGNoYW5nZXMgPT4geyBjb25zb2xlLmxvZygncHJpbnQgbm90aWZpY2F0aW9uczonLCBjaGFuZ2VzKSB9KVxyXG4gICAqL1xyXG4gIG5vdGlmaWNhdGlvblN1YnNjcmlwdGlvbjogU3ViamVjdDxJTm90aWZpY2F0aW9uUmVzcG9uc2U+O1xyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gdGhpcyBpcyB0byBnZXQgU3Vic2NyaXB0aW9uIGFuZCBnZXQgcHVzaGVkIG5vdGlmaWNhdGlvbiBieSBzZXJ2aWNlIHdvcmtlclxyXG4gICAqIEBleGFtcGxlXHJcbiAgICogcHVzaGVkTm90aWZpY2F0aW9uLmFzT2JzZXJ2YWJsZSgpLnN1YnNjcmliZSggY2hhbmdlcyA9PiB7IGNvbnNvbGUubG9nKCdwdXNoIG5vdGlmaWNhdGlvbjonLCBjaGFuZ2VzKSB9KVxyXG4gICAqL1xyXG4gIHB1c2hlZE5vdGlmaWNhdGlvbjogU3ViamVjdDxJTm90aWZpY2F0aW9uUmVzcG9uc2U+O1xyXG5cclxuICAvKipcclxuICAgKiBAZGVzY3JpcHRpb24gY2FsbCBBUEkgdG8gZ2V0IG5vdGlmaWNhdGlvbnNcclxuICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlIG9mIElOb3RpZmljYXRpb25EaWN0LCB0aGUgZ2V0IHJlcXVlc3Qgc2hvdWxkIG1hcCB0aGUgcmVzcG9uc2UgdG8gY29udmVydCBpbnRvIElOb3RpZmljYXRpb25EaWN0XHJcbiAgICovXHJcbiAgZXhlY3V0ZU5vdGlmaWNhdGlvblNlcnZpY2UoKTogT2JzZXJ2YWJsZTxJTm90aWZpY2F0aW9uRGljdD47XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB2YWx1ZSBub3RpZmljYXRpb24gb2YgdHlwZSBhbnlcclxuICAgKiBAZGVzY3JpcHRpb24gdGhpcyBtZXRob2Qgc2hvdWxkIGNvbnZlcnQgbm90aWZpY2F0aW9uIGFueSBpbnRvIGEgSU5vdGlmaWNhdGlvbkVudHJ5XHJcbiAgICovXHJcbiAgbWFwTm90aWZpY2F0aW9uKHZhbHVlOiBhbnkpOiBJTm90aWZpY2F0aW9uRW50cnk7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBkZXNjcmlwdGlvbiB0byBjYWxsIEFQSSB0byB1cGRhdGUgbm90aWZpY2F0aW9uIHN0YXR1cyB0byB2aWV3ZWRcclxuICAgKiBAcGFyYW0gbm90aWZpY2F0aW9ucyBhcnJheSBvZiByYXcgbm90aWZpY2F0aW9uXHJcbiAgICogQHBhcmFtIHR5cGVOb3RpZmljYXRpb24gdHlwZSBub3RpZmljYXRpb24sIGlmIHlvdSBuZWVkIHRvIGRpc3RpbmN0IEFQSSBieSB0eXBlIG5vdGlmaWNhdGluXHJcbiAgICovXHJcbiAgdXBkYXRlTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbnM6IGFueVtdLCB0eXBlTm90aWZpY2F0aW9uOiBudW1iZXIpOiBPYnNlcnZhYmxlPGFueT47XHJcbn1cclxuIl19