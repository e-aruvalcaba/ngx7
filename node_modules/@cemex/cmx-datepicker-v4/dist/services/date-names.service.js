import { Injectable, Inject, Optional } from "@angular/core";
var DateNamesService = /** @class */ (function () {
    function DateNamesService(languagesList) {
        this.languagesList = languagesList;
        this.months = undefined;
        this.monthsShort = undefined;
        this.daysShort = undefined;
        //
    }
    DateNamesService.prototype.getMonthName = function (month) {
        if (this.months != undefined) {
            return this.months[month];
        }
        else {
            var $text = void 0;
            var $languageToUse = this.findLanguage();
            var $months = $languageToUse.monthNames.replace(/ /g, "").split(",");
            $text = $months[month];
            return $text;
        }
    };
    /**
     * @description Retrieve an array of the months with short names.
     * @return An Array of array of strings.
     */
    DateNamesService.prototype.getMonthShortNames = function () {
        var shortMonths = [[], [], [], []];
        var months = [];
        if (this.monthsShort != undefined) {
            months = this.monthsShort;
        }
        else {
            var languageToUse = this.findLanguage();
            months = languageToUse.shortDayMonths.replace(/ /g, "").split(",");
        }
        var counter = 0;
        months.forEach(function (month) {
            if (shortMonths[counter] && shortMonths[counter].length === 3) {
                counter++;
            }
            shortMonths[counter].push(month);
        });
        return shortMonths;
    };
    /**
     * @description Retrieve an array of the week days
     * @param startIndex A number to set a specific day at the start of the week, 0 = Sunday.
     * @return An string array.
     */
    DateNamesService.prototype.getWeekdays = function (startIndex) {
        if (startIndex === void 0) { startIndex = 0; }
        if (this.daysShort != undefined) {
            var localCopy = this.daysShort.join(",").split(",");
            var splitedDays = localCopy.splice(0, startIndex);
            localCopy = localCopy.concat(splitedDays);
            return localCopy;
        }
        else {
            var languageToUse = this.findLanguage();
            var days = languageToUse.shortDayNames.replace(/ /g, "").split(",");
            var splitDays = days.splice(0, startIndex);
            days = days.concat(splitDays);
            return days;
        }
    };
    DateNamesService.prototype.findLanguage = function () {
        var $storedLanguage = localStorage.getItem("language");
        // tslint:disable
        var $languageToUse = {
            "languageId": 8,
            "languageName": "English US",
            "languageCountry": "United States",
            "languageISO": "en_US",
            "currencySymbol": "$",
            "currencyFormat": "%u%n",
            "currencySymbolFloat": "Left",
            "currencyName": "dollar",
            "formatDate": "MMM DD, YYYY",
            "formatTime": "hh:mm A",
            "decimalSeparator": ".",
            "decimalNumbers": 2,
            "thousandSeparator": ",",
            "textFloat": "left",
            "monthNames": "January,February,March,April,May,June,July,August,September,October,November,December",
            "dayNames": "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
            "countryCode": "US",
            "shortDayNames": "Sun,Mon,Tue,Wed,Thu,Fri,Sat",
            "shortDayMonths": "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",
            "shortDayNames2": "Su,Mo,Tu,We,Th,Fr,Sa",
            "hoursCode": "Hr",
            "minutesCode": "Min",
            "secondsCode": "Sec",
            "decimalNumbersMoney": 2
        };
        // tslint:enable
        if (this.languagesList != undefined && $storedLanguage != undefined) {
            this.languagesList.forEach(function ($language) {
                if ($language.languageISO === $storedLanguage ||
                    $language.countryCode.toLowerCase() === $storedLanguage.toLowerCase() ||
                    $language.languageISO.includes($storedLanguage)) {
                    $languageToUse = $language;
                }
            });
        }
        return $languageToUse;
    };
    DateNamesService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DateNamesService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: ["TRANSLATION_LANGUAGES",] }, { type: Optional },] },
    ]; };
    return DateNamesService;
}());
export { DateNamesService };
//# sourceMappingURL=date-names.service.js.map