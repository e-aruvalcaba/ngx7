import { OnInit, EventEmitter } from "@angular/core";
import { IRange, IDisplayedDate } from "./../../models/datepicker-interfaces";
import { DateNamesService } from "./../../services/date-names.service";
import { DatepickerTags } from "./../../models/datepicker.classes";
import { Day } from "./../../models/day.class";
import { DatepickerWeekDays } from "../../models/datepicker-week-days.enum";
import { DatepickerLabel } from "../../models/datepicker-label";
export declare class CmxDatepickerComponent implements OnInit {
    weekFirstDayProviderValue: DatepickerWeekDays;
    tagsProviderValue: DatepickerTags;
    private dateNames;
    dirAttr: string;
    labels: DatepickerLabel[];
    tags: DatepickerTags;
    max: Date;
    min: Date;
    forbiddenWeekDays: number[];
    disabledDates: Date[];
    singleDateSelection: boolean;
    datepickerId: string;
    startWeekWith: DatepickerWeekDays;
    value: any;
    rtl: boolean;
    select: EventEmitter<any>;
    cancel: EventEmitter<any>;
    dayClicked: EventEmitter<any>;
    componentID: string;
    currentDate: Date;
    action: string;
    weekdays: string[];
    range: IRange;
    numberOfClicks: number;
    displayedDate: IDisplayedDate;
    disableDone: boolean;
    yearsRange: any[];
    weeks: Day[][];
    today: Date;
    _labels: DatepickerLabel[];
    datesWithLabel: Array<{
        color: string;
        date: Date;
    }>;
    private _value;
    private _datepickerId;
    private _max;
    private _min;
    private MIN_DATE;
    private MAX_DATE;
    private _rtl;
    private _tags;
    private _startWeekWith;
    private _forbiddenWeekDays;
    private _disabledDates;
    constructor(weekFirstDayProviderValue: DatepickerWeekDays, tagsProviderValue: DatepickerTags, dateNames: DateNamesService, isRTL: boolean);
    ngOnInit(): void;
    reset(): void;
    AfterViewInit(): void;
    userSelectedSomething(): boolean;
    cancelSelection(): void;
    applyClicked(): void;
    moveMonth(step: number): void;
    monthToggle(): void;
    yearToggle(): void;
    updateCurrentMonth(monthEvent: number): void;
    updateCurrentYear(yearEvent: number): void;
    updateActionView(actionViewEvent: string): void;
    selectDate(day: Day): void;
    getDateLabel(date: Date): {
        color: string;
        date: Date;
    };
    private redrawCalendar;
    private findDay;
    private getFirstDay;
    /**
     * @description Formats a date into a number for easier comparisons.
     * @param date A javascript date object
     * @return A number representing the date
     */
    private getFormattedDate;
    /**
     * @desscription Calcutates the number of days in a month and
     * creates an array to represent the distribution of the dates between the weeks.
     */
    private calculateDays;
    private setSelection;
    private styleDaysRangeSelection;
    private updatePermissionsForMonthMoveButtons;
    private setToday;
}
