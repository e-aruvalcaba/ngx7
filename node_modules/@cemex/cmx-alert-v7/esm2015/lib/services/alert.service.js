/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AlertType } from '../models/alert';
import { AlertRef } from './alert-ref';
import { BehaviorSubject } from 'rxjs';
export class AlertService {
    constructor() {
        this.alerts$ = new BehaviorSubject([]);
        this.alerts = [];
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openSuccess(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Success) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openError(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Error) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openWarning(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Warning) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openInfo(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Info) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @private
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?} duration
     * @param {?} alertType
     * @return {?}
     */
    open(alertMessage, actionMessage, duration, alertType) {
        /** @type {?} */
        const alertRef = new AlertRef(alertMessage, actionMessage, duration, alertType);
        this.alerts.push(alertRef);
        this.alerts$.next(this.alerts);
        if (alertRef.duration > 0) {
            this._setTimeout(alertRef);
        }
        return alertRef;
    }
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    _setTimeout(alert) {
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.removeAlert(alert);
        }), alert.duration);
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    removeAlert(alert) {
        this.alerts = this.alerts.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x !== alert));
        this.alerts$.next(this.alerts);
    }
}
AlertService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlertService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    AlertService.prototype.alerts$;
    /** @type {?} */
    AlertService.prototype.alerts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC9jbXgtYWxlcnQtdjcvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxNQUFNLE9BQU8sWUFBWTtJQUl2QjtRQUhBLFlBQU8sR0FBZ0MsSUFBSSxlQUFlLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0QsV0FBTSxHQUFlLEVBQUUsQ0FBQztJQUd4QixDQUFDOzs7Ozs7OztJQUVELFdBQVcsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQUUsV0FBbUIsSUFBSSxFQUFFLFlBQXVCLFNBQVMsQ0FBQyxPQUFPO1FBQ3hILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7OztJQUVELFNBQVMsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQUUsV0FBbUIsSUFBSSxFQUFFLFlBQXVCLFNBQVMsQ0FBQyxLQUFLO1FBQ3BILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7OztJQUVELFdBQVcsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQUUsV0FBbUIsSUFBSSxFQUFFLFlBQXVCLFNBQVMsQ0FBQyxPQUFPO1FBQ3hILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7OztJQUVELFFBQVEsQ0FBQyxZQUFvQixFQUFFLGFBQXFCLEVBQUUsV0FBbUIsSUFBSSxFQUFFLFlBQXVCLFNBQVMsQ0FBQyxJQUFJO1FBQ2xILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7Ozs7SUFFTyxJQUFJLENBQUMsWUFBb0IsRUFBRSxhQUFxQixFQUFFLFFBQWdCLEVBQUUsU0FBb0I7O2NBQ3hGLFFBQVEsR0FBRyxJQUFJLFFBQVEsQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUM7UUFDL0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRS9CLElBQUksUUFBUSxDQUFDLFFBQVEsR0FBRyxDQUFDLEVBQUU7WUFDekIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUM1QjtRQUVELE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxLQUFlO1FBQ2pDLE1BQU0sQ0FBQyxVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDckIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixDQUFDLEdBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JCLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQWU7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7O1lBN0NGLFVBQVU7Ozs7OztJQUVULCtCQUErRDs7SUFDL0QsOEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbGVydFR5cGUgfSBmcm9tICcuLi9tb2RlbHMvYWxlcnQnO1xuaW1wb3J0IHsgQWxlcnRSZWYgfSBmcm9tICcuL2FsZXJ0LXJlZic7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsZXJ0U2VydmljZSB7XG4gIGFsZXJ0cyQ6IEJlaGF2aW9yU3ViamVjdDxBbGVydFJlZltdPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoW10pO1xuICBhbGVydHM6IEFsZXJ0UmVmW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIG9wZW5TdWNjZXNzKGFsZXJ0TWVzc2FnZTogc3RyaW5nLCBhY3Rpb25NZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSA1MDAwLCBhbGVydFR5cGU6IEFsZXJ0VHlwZSA9IEFsZXJ0VHlwZS5TdWNjZXNzKSB7XG4gICAgcmV0dXJuIHRoaXMub3BlbihhbGVydE1lc3NhZ2UsIGFjdGlvbk1lc3NhZ2UsIGR1cmF0aW9uLCBhbGVydFR5cGUpO1xuICB9XG5cbiAgb3BlbkVycm9yKGFsZXJ0TWVzc2FnZTogc3RyaW5nLCBhY3Rpb25NZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSA1MDAwLCBhbGVydFR5cGU6IEFsZXJ0VHlwZSA9IEFsZXJ0VHlwZS5FcnJvcikge1xuICAgIHJldHVybiB0aGlzLm9wZW4oYWxlcnRNZXNzYWdlLCBhY3Rpb25NZXNzYWdlLCBkdXJhdGlvbiwgYWxlcnRUeXBlKTtcbiAgfVxuXG4gIG9wZW5XYXJuaW5nKGFsZXJ0TWVzc2FnZTogc3RyaW5nLCBhY3Rpb25NZXNzYWdlOiBzdHJpbmcsIGR1cmF0aW9uOiBudW1iZXIgPSA1MDAwLCBhbGVydFR5cGU6IEFsZXJ0VHlwZSA9IEFsZXJ0VHlwZS5XYXJuaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMub3BlbihhbGVydE1lc3NhZ2UsIGFjdGlvbk1lc3NhZ2UsIGR1cmF0aW9uLCBhbGVydFR5cGUpO1xuICB9XG5cbiAgb3BlbkluZm8oYWxlcnRNZXNzYWdlOiBzdHJpbmcsIGFjdGlvbk1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IDUwMDAsIGFsZXJ0VHlwZTogQWxlcnRUeXBlID0gQWxlcnRUeXBlLkluZm8pIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuKGFsZXJ0TWVzc2FnZSwgYWN0aW9uTWVzc2FnZSwgZHVyYXRpb24sIGFsZXJ0VHlwZSk7XG4gIH1cblxuICBwcml2YXRlIG9wZW4oYWxlcnRNZXNzYWdlOiBzdHJpbmcsIGFjdGlvbk1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb246IG51bWJlciwgYWxlcnRUeXBlOiBBbGVydFR5cGUpOiBBbGVydFJlZiB7XG4gICAgY29uc3QgYWxlcnRSZWYgPSBuZXcgQWxlcnRSZWYoYWxlcnRNZXNzYWdlLCBhY3Rpb25NZXNzYWdlLCBkdXJhdGlvbiwgYWxlcnRUeXBlKTtcbiAgICB0aGlzLmFsZXJ0cy5wdXNoKGFsZXJ0UmVmKTtcbiAgICB0aGlzLmFsZXJ0cyQubmV4dCh0aGlzLmFsZXJ0cyk7XG5cbiAgICBpZiAoYWxlcnRSZWYuZHVyYXRpb24gPiAwKSB7XG4gICAgICB0aGlzLl9zZXRUaW1lb3V0KGFsZXJ0UmVmKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxlcnRSZWY7XG4gIH1cblxuICBwcml2YXRlIF9zZXRUaW1lb3V0KGFsZXJ0OiBBbGVydFJlZikge1xuICAgIHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlQWxlcnQoYWxlcnQpO1xuICAgIH0sIGFsZXJ0LmR1cmF0aW9uKTtcbiAgfVxuXG4gIHJlbW92ZUFsZXJ0KGFsZXJ0OiBBbGVydFJlZikge1xuICAgIHRoaXMuYWxlcnRzID0gdGhpcy5hbGVydHMuZmlsdGVyKHggPT4geCAhPT0gYWxlcnQpO1xuICAgIHRoaXMuYWxlcnRzJC5uZXh0KHRoaXMuYWxlcnRzKTtcbiAgfVxufVxuIl19