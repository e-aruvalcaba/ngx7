/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { AlertService } from '../services/alert.service';
import { AlertType } from '../models/alert';
import { CmxFlugeeService } from '@cemex/cmx-flugee-v7';
export class AlertComponent {
    /**
     * @param {?} alertService
     * @param {?} flugeeService
     */
    constructor(alertService, flugeeService) {
        this.alertService = alertService;
        this.flugeeService = flugeeService;
        this.alerts$ = alertService.alerts$;
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    onLinkClick(alert) {
        alert.onAction();
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    getCssClass(alert) {
        return {
            'alert--success': AlertType.Success === alert.alertType,
            'alert--error': AlertType.Error === alert.alertType,
            'alert--warning': AlertType.Warning === alert.alertType,
            'alert--info': AlertType.Info === alert.alertType,
        };
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    onClose(alert) {
        this.alertService.removeAlert(alert);
        alert.onClose();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.flugeeService.direction$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.dirState = data;
        }));
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'cmx-alert',
                template: "<div *ngFor=\"let alert of alerts$ | async\" class=\"alert\" [ngClass]=\"getCssClass(alert)\" dir={{dirState}}>\n  <div class=\"alert__text\">{{alert.alertMessage}} <span class=\"alert__link\" (click)=\"onLinkClick(alert)\">{{alert.actionMessage}}</span></div>\n  <div class=\"alert__close\" (click)=\"onClose(alert)\"><i class=\"alert__icon cmx-icon-close\"></i></div>\n</div>",
                styles: ["@import url(https://www.cemexgo.com/cdn/cmx-dls-icons.css);@import url(https://www.cemexgo.com/cdn/cmx-fonts.css);.alert{width:100%;min-height:32px;color:#fff;font-size:.875rem;font-weight:700;line-height:1rem;position:relative;margin-bottom:10px;font-family:Roboto-Medium,sans-serif}.alert--error{background:#ee3d42}.alert--success{background:#7ac943}.alert--warning{background:#fbb03b}.alert--info{background:#3fa9f5}.alert__text{padding:8px 16px;font-size:.875rem;line-height:1rem;width:calc(100% - 70px);color:#fff}.alert__link{font-size:.875rem;font-weight:700;color:#fff;line-height:1rem;text-decoration:underline;cursor:pointer}.alert__close{position:absolute;right:10px;top:10px;cursor:pointer}.alert__icon{color:#fff}.alert--rtl,.alert[dir=rtl]{padding:8px 35px}"]
            }] }
];
/** @nocollapse */
AlertComponent.ctorParameters = () => [
    { type: AlertService },
    { type: CmxFlugeeService }
];
if (false) {
    /** @type {?} */
    AlertComponent.prototype.alerts$;
    /** @type {?} */
    AlertComponent.prototype.dirState;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.alertService;
    /**
     * @type {?}
     * @private
     */
    AlertComponent.prototype.flugeeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4L2NteC1hbGVydC12Ny8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2FsZXJ0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBSTVDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBUXhELE1BQU0sT0FBTyxjQUFjOzs7OztJQUl6QixZQUFvQixZQUEwQixFQUFVLGFBQStCO1FBQW5FLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQVUsa0JBQWEsR0FBYixhQUFhLENBQWtCO1FBQ3JGLElBQUksQ0FBQyxPQUFPLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQztJQUN0QyxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFlO1FBQ3pCLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNuQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFlO1FBQ3pCLE9BQU87WUFDTCxnQkFBZ0IsRUFBRSxTQUFTLENBQUMsT0FBTyxLQUFLLEtBQUssQ0FBQyxTQUFTO1lBQ3ZELGNBQWMsRUFBRSxTQUFTLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxTQUFTO1lBQ25ELGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxPQUFPLEtBQUssS0FBSyxDQUFDLFNBQVM7WUFDdkQsYUFBYSxFQUFFLFNBQVMsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDLFNBQVM7U0FDbEQsQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLEtBQWU7UUFDckIsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2xCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLElBQUksQ0FBQyxFQUFFO1lBQzdDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7O1lBcENGLFNBQVMsU0FBQzs7Z0JBRVQsUUFBUSxFQUFFLFdBQVc7Z0JBQ3JCLHFZQUFtQzs7YUFFcEM7Ozs7WUFaUSxZQUFZO1lBS1osZ0JBQWdCOzs7O0lBU3ZCLGlDQUFxQzs7SUFDckMsa0NBQWlCOzs7OztJQUVMLHNDQUFrQzs7Ozs7SUFBRSx1Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWxlcnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYWxlcnQuc2VydmljZSc7XG5pbXBvcnQgeyBBbGVydFR5cGUgfSBmcm9tICcuLi9tb2RlbHMvYWxlcnQnO1xuaW1wb3J0IHsgQWxlcnRSZWYgfSBmcm9tICcuLi9zZXJ2aWNlcy9hbGVydC1yZWYnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENteEZsdWdlZVNlcnZpY2UgfSBmcm9tICdAY2VtZXgvY214LWZsdWdlZS12Nyc7XG5cbkBDb21wb25lbnQoe1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Y29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnY214LWFsZXJ0JyxcbiAgdGVtcGxhdGVVcmw6ICdhbGVydC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWydhbGVydC5jb21wb25lbnQuc2NzcyddLFxufSlcbmV4cG9ydCBjbGFzcyBBbGVydENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGFsZXJ0cyQ6IEJlaGF2aW9yU3ViamVjdDxBbGVydFJlZltdPjtcbiAgZGlyU3RhdGU6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFsZXJ0U2VydmljZTogQWxlcnRTZXJ2aWNlLCBwcml2YXRlIGZsdWdlZVNlcnZpY2U6IENteEZsdWdlZVNlcnZpY2UpIHtcbiAgICB0aGlzLmFsZXJ0cyQgPSBhbGVydFNlcnZpY2UuYWxlcnRzJDtcbiAgfVxuXG4gIG9uTGlua0NsaWNrKGFsZXJ0OiBBbGVydFJlZikge1xuICAgIGFsZXJ0Lm9uQWN0aW9uKCk7XG4gIH1cblxuICBnZXRDc3NDbGFzcyhhbGVydDogQWxlcnRSZWYpIHtcbiAgICByZXR1cm4ge1xuICAgICAgJ2FsZXJ0LS1zdWNjZXNzJzogQWxlcnRUeXBlLlN1Y2Nlc3MgPT09IGFsZXJ0LmFsZXJ0VHlwZSxcbiAgICAgICdhbGVydC0tZXJyb3InOiBBbGVydFR5cGUuRXJyb3IgPT09IGFsZXJ0LmFsZXJ0VHlwZSxcbiAgICAgICdhbGVydC0td2FybmluZyc6IEFsZXJ0VHlwZS5XYXJuaW5nID09PSBhbGVydC5hbGVydFR5cGUsXG4gICAgICAnYWxlcnQtLWluZm8nOiBBbGVydFR5cGUuSW5mbyA9PT0gYWxlcnQuYWxlcnRUeXBlLFxuICAgIH07XG4gIH1cblxuICBvbkNsb3NlKGFsZXJ0OiBBbGVydFJlZikge1xuICAgIHRoaXMuYWxlcnRTZXJ2aWNlLnJlbW92ZUFsZXJ0KGFsZXJ0KTtcbiAgICBhbGVydC5vbkNsb3NlKCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLmZsdWdlZVNlcnZpY2UuZGlyZWN0aW9uJC5zdWJzY3JpYmUoZGF0YSA9PiB7XG4gICAgICB0aGlzLmRpclN0YXRlID0gZGF0YTtcbiAgICB9KTtcbiAgfVxufVxuIl19