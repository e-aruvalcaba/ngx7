import { CommonModule } from '@angular/common';
import { Injectable, Component, NgModule } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { CmxFlugeeService } from '@cemex/cmx-flugee-v7';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Alert {
}
/** @enum {number} */
const AlertType = {
    Success: 0,
    Error: 1,
    Info: 2,
    Warning: 3,
};
AlertType[AlertType.Success] = 'Success';
AlertType[AlertType.Error] = 'Error';
AlertType[AlertType.Info] = 'Info';
AlertType[AlertType.Warning] = 'Warning';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlertRef {
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?} duration
     * @param {?} alertType
     */
    constructor(alertMessage, actionMessage, duration, alertType) {
        this.alertMessage = alertMessage;
        this.actionMessage = actionMessage;
        this.duration = duration;
        this.alertType = alertType;
        this._onAction = new Subject();
        this._onClose = new Subject();
    }
    /**
     * @return {?}
     */
    onAction() {
        this._onAction.next();
    }
    /**
     * @return {?}
     */
    onActionClicked() {
        return this._onAction.asObservable();
    }
    /**
     * @return {?}
     */
    onClose() {
        this._onClose.next();
    }
    /**
     * @return {?}
     */
    onCloseClicked() {
        return this._onClose.asObservable();
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlertService {
    constructor() {
        this.alerts$ = new BehaviorSubject([]);
        this.alerts = [];
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openSuccess(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Success) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openError(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Error) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openWarning(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Warning) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    openInfo(alertMessage, actionMessage, duration = 5000, alertType = AlertType.Info) {
        return this.open(alertMessage, actionMessage, duration, alertType);
    }
    /**
     * @private
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?} duration
     * @param {?} alertType
     * @return {?}
     */
    open(alertMessage, actionMessage, duration, alertType) {
        /** @type {?} */
        const alertRef = new AlertRef(alertMessage, actionMessage, duration, alertType);
        this.alerts.push(alertRef);
        this.alerts$.next(this.alerts);
        if (alertRef.duration > 0) {
            this._setTimeout(alertRef);
        }
        return alertRef;
    }
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    _setTimeout(alert) {
        window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.removeAlert(alert);
        }), alert.duration);
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    removeAlert(alert) {
        this.alerts = this.alerts.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x !== alert));
        this.alerts$.next(this.alerts);
    }
}
AlertService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AlertService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlertComponent {
    /**
     * @param {?} alertService
     * @param {?} flugeeService
     */
    constructor(alertService, flugeeService) {
        this.alertService = alertService;
        this.flugeeService = flugeeService;
        this.alerts$ = alertService.alerts$;
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    onLinkClick(alert) {
        alert.onAction();
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    getCssClass(alert) {
        return {
            'alert--success': AlertType.Success === alert.alertType,
            'alert--error': AlertType.Error === alert.alertType,
            'alert--warning': AlertType.Warning === alert.alertType,
            'alert--info': AlertType.Info === alert.alertType,
        };
    }
    /**
     * @param {?} alert
     * @return {?}
     */
    onClose(alert) {
        this.alertService.removeAlert(alert);
        alert.onClose();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.flugeeService.direction$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.dirState = data;
        }));
    }
}
AlertComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'cmx-alert',
                template: "<div *ngFor=\"let alert of alerts$ | async\" class=\"alert\" [ngClass]=\"getCssClass(alert)\" dir={{dirState}}>\n  <div class=\"alert__text\">{{alert.alertMessage}} <span class=\"alert__link\" (click)=\"onLinkClick(alert)\">{{alert.actionMessage}}</span></div>\n  <div class=\"alert__close\" (click)=\"onClose(alert)\"><i class=\"alert__icon cmx-icon-close\"></i></div>\n</div>",
                styles: ["@import url(https://www.cemexgo.com/cdn/cmx-dls-icons.css);@import url(https://www.cemexgo.com/cdn/cmx-fonts.css);.alert{width:100%;min-height:32px;color:#fff;font-size:.875rem;font-weight:700;line-height:1rem;position:relative;margin-bottom:10px;font-family:Roboto-Medium,sans-serif}.alert--error{background:#ee3d42}.alert--success{background:#7ac943}.alert--warning{background:#fbb03b}.alert--info{background:#3fa9f5}.alert__text{padding:8px 16px;font-size:.875rem;line-height:1rem;width:calc(100% - 70px);color:#fff}.alert__link{font-size:.875rem;font-weight:700;color:#fff;line-height:1rem;text-decoration:underline;cursor:pointer}.alert__close{position:absolute;right:10px;top:10px;cursor:pointer}.alert__icon{color:#fff}.alert--rtl,.alert[dir=rtl]{padding:8px 35px}"]
            }] }
];
/** @nocollapse */
AlertComponent.ctorParameters = () => [
    { type: AlertService },
    { type: CmxFlugeeService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AlertModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: AlertModule,
            providers: [
                AlertService
            ]
        };
    }
}
AlertModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    AlertComponent,
                ],
                exports: [
                    AlertComponent,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AlertModule, AlertService, Alert, AlertType, AlertComponent as Éµa };

//# sourceMappingURL=cemex-cmx-alert-v7.js.map