/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AlertType } from '../models/alert';
import { AlertRef } from './alert-ref';
import { BehaviorSubject } from 'rxjs';
var AlertService = /** @class */ (function () {
    function AlertService() {
        this.alerts$ = new BehaviorSubject([]);
        this.alerts = [];
    }
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    AlertService.prototype.openSuccess = /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    function (alertMessage, actionMessage, duration, alertType) {
        if (duration === void 0) { duration = 5000; }
        if (alertType === void 0) { alertType = AlertType.Success; }
        return this.open(alertMessage, actionMessage, duration, alertType);
    };
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    AlertService.prototype.openError = /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    function (alertMessage, actionMessage, duration, alertType) {
        if (duration === void 0) { duration = 5000; }
        if (alertType === void 0) { alertType = AlertType.Error; }
        return this.open(alertMessage, actionMessage, duration, alertType);
    };
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    AlertService.prototype.openWarning = /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    function (alertMessage, actionMessage, duration, alertType) {
        if (duration === void 0) { duration = 5000; }
        if (alertType === void 0) { alertType = AlertType.Warning; }
        return this.open(alertMessage, actionMessage, duration, alertType);
    };
    /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    AlertService.prototype.openInfo = /**
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?=} duration
     * @param {?=} alertType
     * @return {?}
     */
    function (alertMessage, actionMessage, duration, alertType) {
        if (duration === void 0) { duration = 5000; }
        if (alertType === void 0) { alertType = AlertType.Info; }
        return this.open(alertMessage, actionMessage, duration, alertType);
    };
    /**
     * @private
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?} duration
     * @param {?} alertType
     * @return {?}
     */
    AlertService.prototype.open = /**
     * @private
     * @param {?} alertMessage
     * @param {?} actionMessage
     * @param {?} duration
     * @param {?} alertType
     * @return {?}
     */
    function (alertMessage, actionMessage, duration, alertType) {
        /** @type {?} */
        var alertRef = new AlertRef(alertMessage, actionMessage, duration, alertType);
        this.alerts.push(alertRef);
        this.alerts$.next(this.alerts);
        if (alertRef.duration > 0) {
            this._setTimeout(alertRef);
        }
        return alertRef;
    };
    /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype._setTimeout = /**
     * @private
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        var _this = this;
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            _this.removeAlert(alert);
        }), alert.duration);
    };
    /**
     * @param {?} alert
     * @return {?}
     */
    AlertService.prototype.removeAlert = /**
     * @param {?} alert
     * @return {?}
     */
    function (alert) {
        this.alerts = this.alerts.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x !== alert; }));
        this.alerts$.next(this.alerts);
    };
    AlertService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AlertService.ctorParameters = function () { return []; };
    return AlertService;
}());
export { AlertService };
if (false) {
    /** @type {?} */
    AlertService.prototype.alerts$;
    /** @type {?} */
    AlertService.prototype.alerts;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC9jbXgtYWxlcnQtdjcvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvYWxlcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFnQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV2QztJQUtFO1FBSEEsWUFBTyxHQUFnQyxJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMvRCxXQUFNLEdBQWUsRUFBRSxDQUFDO0lBR3hCLENBQUM7Ozs7Ozs7O0lBRUQsa0NBQVc7Ozs7Ozs7SUFBWCxVQUFZLFlBQW9CLEVBQUUsYUFBcUIsRUFBRSxRQUF1QixFQUFFLFNBQXdDO1FBQWpFLHlCQUFBLEVBQUEsZUFBdUI7UUFBRSwwQkFBQSxFQUFBLFlBQXVCLFNBQVMsQ0FBQyxPQUFPO1FBQ3hILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7OztJQUVELGdDQUFTOzs7Ozs7O0lBQVQsVUFBVSxZQUFvQixFQUFFLGFBQXFCLEVBQUUsUUFBdUIsRUFBRSxTQUFzQztRQUEvRCx5QkFBQSxFQUFBLGVBQXVCO1FBQUUsMEJBQUEsRUFBQSxZQUF1QixTQUFTLENBQUMsS0FBSztRQUNwSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckUsQ0FBQzs7Ozs7Ozs7SUFFRCxrQ0FBVzs7Ozs7OztJQUFYLFVBQVksWUFBb0IsRUFBRSxhQUFxQixFQUFFLFFBQXVCLEVBQUUsU0FBd0M7UUFBakUseUJBQUEsRUFBQSxlQUF1QjtRQUFFLDBCQUFBLEVBQUEsWUFBdUIsU0FBUyxDQUFDLE9BQU87UUFDeEgsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3JFLENBQUM7Ozs7Ozs7O0lBRUQsK0JBQVE7Ozs7Ozs7SUFBUixVQUFTLFlBQW9CLEVBQUUsYUFBcUIsRUFBRSxRQUF1QixFQUFFLFNBQXFDO1FBQTlELHlCQUFBLEVBQUEsZUFBdUI7UUFBRSwwQkFBQSxFQUFBLFlBQXVCLFNBQVMsQ0FBQyxJQUFJO1FBQ2xILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7Ozs7SUFFTywyQkFBSTs7Ozs7Ozs7SUFBWixVQUFhLFlBQW9CLEVBQUUsYUFBcUIsRUFBRSxRQUFnQixFQUFFLFNBQW9COztZQUN4RixRQUFRLEdBQUcsSUFBSSxRQUFRLENBQUMsWUFBWSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsU0FBUyxDQUFDO1FBQy9FLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUUvQixJQUFJLFFBQVEsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDNUI7UUFFRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7Ozs7SUFFTyxrQ0FBVzs7Ozs7SUFBbkIsVUFBb0IsS0FBZTtRQUFuQyxpQkFJQztRQUhDLE1BQU0sQ0FBQyxVQUFVOzs7UUFBQztZQUNoQixLQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzFCLENBQUMsR0FBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxrQ0FBVzs7OztJQUFYLFVBQVksS0FBZTtRQUN6QixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxLQUFLLEtBQUssRUFBWCxDQUFXLEVBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Z0JBN0NGLFVBQVU7Ozs7SUE4Q1gsbUJBQUM7Q0FBQSxBQTlDRCxJQThDQztTQTdDWSxZQUFZOzs7SUFDdkIsK0JBQStEOztJQUMvRCw4QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFsZXJ0VHlwZSB9IGZyb20gJy4uL21vZGVscy9hbGVydCc7XG5pbXBvcnQgeyBBbGVydFJlZiB9IGZyb20gJy4vYWxlcnQtcmVmJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIHtcbiAgYWxlcnRzJDogQmVoYXZpb3JTdWJqZWN0PEFsZXJ0UmVmW10+ID0gbmV3IEJlaGF2aW9yU3ViamVjdChbXSk7XG4gIGFsZXJ0czogQWxlcnRSZWZbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgb3BlblN1Y2Nlc3MoYWxlcnRNZXNzYWdlOiBzdHJpbmcsIGFjdGlvbk1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IDUwMDAsIGFsZXJ0VHlwZTogQWxlcnRUeXBlID0gQWxlcnRUeXBlLlN1Y2Nlc3MpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuKGFsZXJ0TWVzc2FnZSwgYWN0aW9uTWVzc2FnZSwgZHVyYXRpb24sIGFsZXJ0VHlwZSk7XG4gIH1cblxuICBvcGVuRXJyb3IoYWxlcnRNZXNzYWdlOiBzdHJpbmcsIGFjdGlvbk1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IDUwMDAsIGFsZXJ0VHlwZTogQWxlcnRUeXBlID0gQWxlcnRUeXBlLkVycm9yKSB7XG4gICAgcmV0dXJuIHRoaXMub3BlbihhbGVydE1lc3NhZ2UsIGFjdGlvbk1lc3NhZ2UsIGR1cmF0aW9uLCBhbGVydFR5cGUpO1xuICB9XG5cbiAgb3Blbldhcm5pbmcoYWxlcnRNZXNzYWdlOiBzdHJpbmcsIGFjdGlvbk1lc3NhZ2U6IHN0cmluZywgZHVyYXRpb246IG51bWJlciA9IDUwMDAsIGFsZXJ0VHlwZTogQWxlcnRUeXBlID0gQWxlcnRUeXBlLldhcm5pbmcpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVuKGFsZXJ0TWVzc2FnZSwgYWN0aW9uTWVzc2FnZSwgZHVyYXRpb24sIGFsZXJ0VHlwZSk7XG4gIH1cblxuICBvcGVuSW5mbyhhbGVydE1lc3NhZ2U6IHN0cmluZywgYWN0aW9uTWVzc2FnZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyID0gNTAwMCwgYWxlcnRUeXBlOiBBbGVydFR5cGUgPSBBbGVydFR5cGUuSW5mbykge1xuICAgIHJldHVybiB0aGlzLm9wZW4oYWxlcnRNZXNzYWdlLCBhY3Rpb25NZXNzYWdlLCBkdXJhdGlvbiwgYWxlcnRUeXBlKTtcbiAgfVxuXG4gIHByaXZhdGUgb3BlbihhbGVydE1lc3NhZ2U6IHN0cmluZywgYWN0aW9uTWVzc2FnZTogc3RyaW5nLCBkdXJhdGlvbjogbnVtYmVyLCBhbGVydFR5cGU6IEFsZXJ0VHlwZSk6IEFsZXJ0UmVmIHtcbiAgICBjb25zdCBhbGVydFJlZiA9IG5ldyBBbGVydFJlZihhbGVydE1lc3NhZ2UsIGFjdGlvbk1lc3NhZ2UsIGR1cmF0aW9uLCBhbGVydFR5cGUpO1xuICAgIHRoaXMuYWxlcnRzLnB1c2goYWxlcnRSZWYpO1xuICAgIHRoaXMuYWxlcnRzJC5uZXh0KHRoaXMuYWxlcnRzKTtcblxuICAgIGlmIChhbGVydFJlZi5kdXJhdGlvbiA+IDApIHtcbiAgICAgIHRoaXMuX3NldFRpbWVvdXQoYWxlcnRSZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBhbGVydFJlZjtcbiAgfVxuXG4gIHByaXZhdGUgX3NldFRpbWVvdXQoYWxlcnQ6IEFsZXJ0UmVmKSB7XG4gICAgd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVBbGVydChhbGVydCk7XG4gICAgfSwgYWxlcnQuZHVyYXRpb24pO1xuICB9XG5cbiAgcmVtb3ZlQWxlcnQoYWxlcnQ6IEFsZXJ0UmVmKSB7XG4gICAgdGhpcy5hbGVydHMgPSB0aGlzLmFsZXJ0cy5maWx0ZXIoeCA9PiB4ICE9PSBhbGVydCk7XG4gICAgdGhpcy5hbGVydHMkLm5leHQodGhpcy5hbGVydHMpO1xuICB9XG59XG4iXX0=