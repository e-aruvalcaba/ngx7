import { Input, Component, ElementRef, Renderer, Optional, Inject } from "@angular/core";
var CmxTooltipComponent = /** @class */ (function () {
    function CmxTooltipComponent(elementRef, renderer, isRTL) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        if (isRTL != undefined) {
            this.rtl = isRTL;
        }
    }
    CmxTooltipComponent.prototype.ngAfterViewInit = function () {
        this.positionElement();
    };
    Object.defineProperty(CmxTooltipComponent.prototype, "options", {
        get: function () {
            return this._options;
        },
        set: function (op) {
            this._options = op;
        },
        enumerable: true,
        configurable: true
    });
    CmxTooltipComponent.prototype.positionElement = function () {
        var tooltipElement = this.elementRef.nativeElement.querySelector("div.cmx-tooltip");
        var tooltipHeight = tooltipElement.offsetHeight;
        var tooltipWidth = tooltipElement.offsetWidth;
        var parentWidth = this._options.width;
        var parentHeight = this._options.height;
        var tooltipOffsetLeftCenter = this._options.x + (tooltipWidth / 2);
        var tooltipOffsetTopCenter = this._options.y + (tooltipHeight / 2);
        var parentOffsetLeftCenter = this._options.x + (this._options.width / 2);
        var parentOffsetTopCenter = this._options.y + (this._options.height / 2);
        var differenceX = Math.abs(tooltipOffsetLeftCenter - parentOffsetLeftCenter);
        var differenceY = Math.abs(tooltipOffsetTopCenter - parentOffsetTopCenter);
        switch (this._options.position) {
            case "up":
                this._options.y = this._options.y + this._options.height + 10;
                if (tooltipWidth > parentWidth) {
                    this._options.x = this._options.x - differenceX;
                }
                else if (tooltipWidth < parentWidth) {
                    this._options.x = this._options.x + differenceX;
                }
                this.tooltipPlacementClass = "cmx-tooltip--up";
                break;
            case "down":
                this._options.y = this._options.y - this._options.height - tooltipHeight;
                if (tooltipWidth > parentWidth) {
                    this._options.x = this._options.x - differenceX;
                }
                else if (tooltipWidth < parentWidth) {
                    this._options.x = this._options.x + differenceX;
                }
                this.tooltipPlacementClass = "cmx-tooltip--down";
                break;
            case "left":
                this._options.x = this._options.x + this._options.width + 10;
                if (tooltipHeight > parentHeight) {
                    differenceY = this.diffYLeft ? this.diffYLeft : differenceY;
                    this._options.y = this._options.y - differenceY;
                }
                else if (tooltipHeight < parentHeight) {
                    this._options.y = this._options.y + differenceY;
                }
                this.tooltipPlacementClass = "cmx-tooltip--left";
                break;
            case "right":
                this._options.x = this._options.x - tooltipWidth - 15;
                if (tooltipHeight > parentHeight) {
                    differenceY = this.diffYRight ? this.diffYRight : differenceY;
                    this._options.y = this._options.y - differenceY;
                }
                else if (tooltipHeight < parentHeight) {
                    this._options.y = this._options.y + differenceY;
                }
                this.tooltipPlacementClass = "cmx-tooltip--right";
                break;
            default:
                this._options.y = this._options.y - this._options.height - tooltipHeight;
                if (tooltipWidth > parentWidth) {
                    this._options.x = this._options.x - differenceX;
                }
                else if (tooltipWidth < parentWidth) {
                    this._options.x = this._options.x + differenceX;
                }
                this.tooltipPlacementClass = "cmx-tooltip--down";
                break;
        }
        this.setStyleValues();
    };
    CmxTooltipComponent.prototype.setStyleValues = function () {
        this.renderer.setElementStyle(this.elementRef.nativeElement, "display", "block");
        this.renderer.setElementStyle(this.elementRef.nativeElement, "position", "fixed");
        this.renderer.setElementStyle(this.elementRef.nativeElement, "top", this._options.y + "px");
        this.renderer.setElementStyle(this.elementRef.nativeElement, "left", this._options.x + "px");
    };
    CmxTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: "<cmx-tooltip></cmx-tooltip>",
                    styles: ["\n      @font-face {\n        font-family: \"Roboto\";\n        font-family: \"Roboto-Thin\";\n        font-weight: 100;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Light.ttf\");\n        font-weight: 300;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Regular.ttf\");\n        font-weight: 400;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Italic.ttf\");\n        font-weight: 400;\n        font-style: italic;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Medium.ttf\");\n        font-weight: 500;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Bold.ttf\");\n        font-weight: 700;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Black.ttf\");\n        font-weight: 800;\n      }\n\n      .cmx-tooltip {\n        border: 1px solid #333;\n        border-radius: 3px;\n        color: #E8EBEF;\n        font-size: .75rem;\n        background: #333;\n        padding: 0.5rem 1rem;\n        position: absolute;\n        font-weight: 500;\n        position: unset;\n        color: #E8EBEF;\n        padding: 8px 16px;\n        font-family: \"Roboto\",sans-serif;\n        font-weight: 500;\n        max-width: 500px;\n        box-sizing: border-box;\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box;\n        display: inline-block;\n        min-height: 32px;\n        width: auto;\n      }\n\n      .cmx-tooltip::after {\n        content: \"\";\n        position: absolute;\n        width: 0;\n        height: 0;\n        margin-left: -10px;\n        bottom: -13px;\n        left: 50%;\n        box-sizing: border-box;\n        border: 6px solid black;\n        border-color: transparent transparent #333 #333;\n        transform-origin: 0 0;\n        transform: rotate(-45deg);\n      }\n\n      .cmx-tooltip--up::after {\n        border-color: #333 #333 transparent transparent;\n        bottom: auto;\n        top: 0;\n      }\n\n      .cmx-tooltip--left::after {\n        border-color: #333 transparent transparent #333;\n        bottom: auto;\n        left: 1px;\n        top: 50%;\n      }\n\n      .cmx-tooltip--right::after {\n        border-color: transparent #333 #333 transparent;\n        bottom: auto;\n        right: -4px;\n        top: 50%;\n        left: auto;\n      }\n\n      .cmx-tooltip::after {\n        bottom: -12px;\n      }\n\n      .cmx-tooltip--up::after {\n        border-color: #333 #333 transparent transparent;\n        bottom: auto;\n        top: 0;\n        left: calc(50% - 1.5px);\n      }\n\n      .cmx-tooltip--left::after {\n        border-color: #333 transparent transparent #333;\n        bottom: auto;\n        left: 2px;\n        top: calc(50% - 1.5px);\n      }\n\n      .cmx-tooltip--right::after {\n        border-color: transparent #333 #333 transparent;\n        bottom: auto;\n        right: -3px;\n        top: calc(50% - 1.5px);\n        left: auto;\n      }\n    "],
                    template: "\n      <div class=\"cmx-tooltip\" \n          [ngClass]=\"tooltipPlacementClass\" \n          [attr.dir]=\"rtl? 'rtl' : 'ltr'\" \n          [innerHTML]=\"options.content\">\n    \n      </div>\n    ",
                },] },
    ];
    /** @nocollapse */
    CmxTooltipComponent.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: Renderer, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["RTL",] },] },
    ]; };
    CmxTooltipComponent.propDecorators = {
        'rtl': [{ type: Input, args: ["rtl",] },],
        'diffYLeft': [{ type: Input, args: ["diffYLeft",] },],
        'diffYRight': [{ type: Input, args: ["diffYRight",] },],
    };
    return CmxTooltipComponent;
}());
export { CmxTooltipComponent };
//# sourceMappingURL=cmx-tooltip.component.js.map