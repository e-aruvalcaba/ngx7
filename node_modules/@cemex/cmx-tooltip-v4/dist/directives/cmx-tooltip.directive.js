import { Directive, Input, ElementRef, ComponentFactoryResolver, ViewContainerRef, HostListener } from '@angular/core';
// cmx
import { CmxTooltipComponent } from './../components/';
var CmxTooltipDirective = /** @class */ (function () {
    function CmxTooltipDirective(elementRef, componentFactoryResolver, viewContainerRef) {
        this.elementRef = elementRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.offset = 0;
        //
    }
    Object.defineProperty(CmxTooltipDirective.prototype, "content", {
        get: function () {
            return this._content;
        },
        set: function (value) {
            this._content = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxTooltipDirective.prototype, "position", {
        set: function (value) {
            this._position = value;
        },
        enumerable: true,
        configurable: true
    });
    CmxTooltipDirective.prototype.show = function ($event) {
        var rect = this.elementRef.nativeElement.getBoundingClientRect();
        var options = {
            content: this.content,
            width: rect.width,
            height: rect.height,
            x: rect.x,
            y: rect.y,
            position: this._position,
        };
        var factory = this.componentFactoryResolver.resolveComponentFactory(CmxTooltipComponent);
        this.reference = this.viewContainerRef.createComponent(factory);
        this.reference.instance.options = options;
        this.reference.instance.rtl = this.rtl;
        this.reference.instance.diffYLeft = this.diffYLeft;
        this.reference.instance.diffYRight = this.diffYRight;
        this.reference.changeDetectorRef.detectChanges();
    };
    CmxTooltipDirective.prototype.hide = function () {
        this.reference.destroy();
    };
    CmxTooltipDirective.prototype.stop = function (event) {
        event.preventDefault();
        this.hide();
    };
    CmxTooltipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[cmx-tooltip]',
                },] },
    ];
    /** @nocollapse */
    CmxTooltipDirective.ctorParameters = function () { return [
        { type: ElementRef, },
        { type: ComponentFactoryResolver, },
        { type: ViewContainerRef, },
    ]; };
    CmxTooltipDirective.propDecorators = {
        'diffYLeft': [{ type: Input, args: ["diffYLeft",] },],
        'diffYRight': [{ type: Input, args: ["diffYRight",] },],
        'content': [{ type: Input, args: ["cmx-tooltip",] },],
        'rtl': [{ type: Input, args: ["rtl",] },],
        'position': [{ type: Input, args: ["position",] },],
        'show': [{ type: HostListener, args: ["mouseenter", ["$event"],] },],
        'hide': [{ type: HostListener, args: ["mouseleave", [],] },],
    };
    return CmxTooltipDirective;
}());
export { CmxTooltipDirective };
//# sourceMappingURL=cmx-tooltip.directive.js.map