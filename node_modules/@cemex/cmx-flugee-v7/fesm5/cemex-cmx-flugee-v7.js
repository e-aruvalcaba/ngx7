import { CommonModule } from '@angular/common';
import { Injectable, NgModule } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CmxFlugeeService = /** @class */ (function () {
    function CmxFlugeeService() {
        this.languages = {
            'ar': 'rtl',
            'de': 'ltr',
            'en': 'ltr',
            'es': 'ltr',
            'fr': 'ltr',
            'he': 'rtl',
            'pl': 'ltr',
        };
        /**
         * A hot observable that supplies any changes to the script direction.
         * Using the "replace-Observable-with-$" convention.
         * type {}
         */
        this.direction$ = new BehaviorSubject('');
        this.language = 'en';
        this.getDirectionFor(this.language);
    }
    /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     */
    /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     * @param {?} languageCode
     * @return {?}
     */
    CmxFlugeeService.prototype.getDirectionFor = /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     * @param {?} languageCode
     * @return {?}
     */
    function (languageCode) {
        try {
            this.language = languageCode;
            // We shouldn't need the national variation of the language to get its script.
            /** @type {?} */
            var baseLanguage = languageCode.split(/[-_]/)[0];
            if (!this.languages[baseLanguage]) {
                // The language isn't in the list.
                console.warn("Language '" + languageCode + "' is not in the list.  Defaulting to 'ltr'");
                // It's a language with a ltr script and used internationally.
                baseLanguage = 'en';
            }
            this.direction$.next(this.languages[baseLanguage]);
        }
        catch (e) {
            /*
             * In case of error, bet on the fact that most languages are written left-to-right.
             * (The most widely used RTL scripts are Arabic script, Hebrew script, and the
             * written form of some African languages like Fula).
             */
            console.warn(e);
            this.direction$.next('ltr');
        }
    };
    CmxFlugeeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CmxFlugeeService.ctorParameters = function () { return []; };
    return CmxFlugeeService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CmxFlugeeModule = /** @class */ (function () {
    function CmxFlugeeModule() {
    }
    /**
     * @return {?}
     */
    CmxFlugeeModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: CmxFlugeeModule,
            providers: [
                CmxFlugeeService,
            ],
        };
    };
    CmxFlugeeModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    providers: [CmxFlugeeService],
                },] }
    ];
    return CmxFlugeeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CmxFlugeeModule, CmxFlugeeService };

//# sourceMappingURL=cemex-cmx-flugee-v7.js.map