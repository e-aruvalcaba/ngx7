{"version":3,"sources":["ng://@cemex/cmx-flugee-v7/lib/services/flugee.service.ts","ng://@cemex/cmx-flugee-v7/lib/flugee.module.ts"],"names":["CmxFlugeeService","prototype","getDirectionFor","languageCode","baseLanguage","this","language","split","languages","console","warn","direction$","next","e","Injectable","ar","de","en","es","fr","he","pl","BehaviorSubject","CmxFlugeeModule","forRoot","ngModule","providers","NgModule","args","imports","CommonModule"],"mappings":"sYAAA,IAAAA,GAkCEA,EAAAC,UAAAC,gBAAA,SAAgBC,GACd,QAGMC,GAFJC,KAAKC,SAAWH,GAEgBI,MAAM,QAAQ,GACzCF,KAAKG,UAAUJ,KAElBK,QAAQC,KAAK,aAAaP,EAAY,8CAEtCC,EAAe,MAEjBC,KAAKM,WAAWC,KAAKP,KAAKG,UAAUJ,IACpC,MAAOS,GAMPJ,QAAQC,KAAKG,GACbR,KAAKM,WAAWC,KAAK,6BAlD1BE,EAAAA,mDAsDDd,GAlCE,SAAAA,IAjBAK,KAAAG,UAAiB,CACfO,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,OAQDhB,KAAAM,WAAsC,IAAIW,EAAAA,gBAAgB,IAC1DjB,KAAAC,SAAW,KAIhBD,KAAKH,gBAAgBG,KAAKC,UC1B9B,IAAAiB,GAWSA,EAAAC,QAAP,WACE,MAAO,CACLC,SAAUF,EACVG,UAAW,CACT1B,yBATP2B,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CAAEC,EAAAA,cACXJ,UAAW,CAAE1B,OAWfuB,GAbA,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class CmxFlugeeService {\n\n  languages: any = {\n    'ar': 'rtl',\n    'de': 'ltr',\n    'en': 'ltr',\n    'es': 'ltr',\n    'fr': 'ltr',\n    'he': 'rtl',\n    'pl': 'ltr',\n  };\n\n  /**\n   * A hot observable that supplies any changes to the script direction.\n   * Using the \"replace-Observable-with-$\" convention.\n   * type {}\n   */\n  public direction$: BehaviorSubject<string> = new BehaviorSubject('');\n  public language = 'en';\n  constructor(\n\n  ) {\n    this.getDirectionFor(this.language);\n  }\n\n  /**\n   * Get the direction for a given script based on language-code, and store the choice\n   * of language as a side-effect.\n   * param {string} languageCode an ISO 639-1 standard language-code\n   */\n  getDirectionFor(languageCode: string) {\n    try {\n      this.language = languageCode;\n      // We shouldn't need the national variation of the language to get its script.\n      let baseLanguage = languageCode.split(/[-_]/)[0];\n      if (!this.languages[baseLanguage]) {\n        // The language isn't in the list.\n        console.warn(`Language '${languageCode}' is not in the list.  Defaulting to 'ltr'`);\n        // It's a language with a ltr script and used internationally.\n        baseLanguage = 'en';\n      }\n      this.direction$.next(this.languages[baseLanguage]);\n    } catch (e) {\n      /*\n       * In case of error, bet on the fact that most languages are written left-to-right.\n       * (The most widely used RTL scripts are Arabic script, Hebrew script, and the\n       * written form of some African languages like Fula).\n       */\n      console.warn(e);\n      this.direction$.next('ltr');\n    }\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// SERVICES\nimport { CmxFlugeeService } from './services/flugee.service';\n\n@NgModule({\n  imports: [ CommonModule ],\n  providers: [ CmxFlugeeService ],\n})\nexport class CmxFlugeeModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: CmxFlugeeModule,\n      providers: [\n        CmxFlugeeService,\n      ],\n    };\n  }\n}\n"]}