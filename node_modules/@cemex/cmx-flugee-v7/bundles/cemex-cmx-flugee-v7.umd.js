(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@cemex/cmx-flugee-v7', ['exports', '@angular/common', '@angular/core', 'rxjs'], factory) :
    (factory((global.cemex = global.cemex || {}, global.cemex['cmx-flugee-v7'] = {}),global.ng.common,global.ng.core,global.rxjs));
}(this, (function (exports,common,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmxFlugeeService = /** @class */ (function () {
        function CmxFlugeeService() {
            this.languages = {
                'ar': 'rtl',
                'de': 'ltr',
                'en': 'ltr',
                'es': 'ltr',
                'fr': 'ltr',
                'he': 'rtl',
                'pl': 'ltr',
            };
            /**
             * A hot observable that supplies any changes to the script direction.
             * Using the "replace-Observable-with-$" convention.
             * type {}
             */
            this.direction$ = new rxjs.BehaviorSubject('');
            this.language = 'en';
            this.getDirectionFor(this.language);
        }
        /**
         * Get the direction for a given script based on language-code, and store the choice
         * of language as a side-effect.
         * param {string} languageCode an ISO 639-1 standard language-code
         */
        /**
         * Get the direction for a given script based on language-code, and store the choice
         * of language as a side-effect.
         * param {string} languageCode an ISO 639-1 standard language-code
         * @param {?} languageCode
         * @return {?}
         */
        CmxFlugeeService.prototype.getDirectionFor = /**
         * Get the direction for a given script based on language-code, and store the choice
         * of language as a side-effect.
         * param {string} languageCode an ISO 639-1 standard language-code
         * @param {?} languageCode
         * @return {?}
         */
            function (languageCode) {
                try {
                    this.language = languageCode;
                    // We shouldn't need the national variation of the language to get its script.
                    /** @type {?} */
                    var baseLanguage = languageCode.split(/[-_]/)[0];
                    if (!this.languages[baseLanguage]) {
                        // The language isn't in the list.
                        console.warn("Language '" + languageCode + "' is not in the list.  Defaulting to 'ltr'");
                        // It's a language with a ltr script and used internationally.
                        baseLanguage = 'en';
                    }
                    this.direction$.next(this.languages[baseLanguage]);
                }
                catch (e) {
                    /*
                     * In case of error, bet on the fact that most languages are written left-to-right.
                     * (The most widely used RTL scripts are Arabic script, Hebrew script, and the
                     * written form of some African languages like Fula).
                     */
                    console.warn(e);
                    this.direction$.next('ltr');
                }
            };
        CmxFlugeeService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CmxFlugeeService.ctorParameters = function () { return []; };
        return CmxFlugeeService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CmxFlugeeModule = /** @class */ (function () {
        function CmxFlugeeModule() {
        }
        /**
         * @return {?}
         */
        CmxFlugeeModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: CmxFlugeeModule,
                    providers: [
                        CmxFlugeeService,
                    ],
                };
            };
        CmxFlugeeModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule],
                        providers: [CmxFlugeeService],
                    },] }
        ];
        return CmxFlugeeModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CmxFlugeeModule = CmxFlugeeModule;
    exports.CmxFlugeeService = CmxFlugeeService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=cemex-cmx-flugee-v7.umd.js.map