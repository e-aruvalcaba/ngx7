/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var CmxFlugeeService = /** @class */ (function () {
    function CmxFlugeeService() {
        this.languages = {
            'ar': 'rtl',
            'de': 'ltr',
            'en': 'ltr',
            'es': 'ltr',
            'fr': 'ltr',
            'he': 'rtl',
            'pl': 'ltr',
        };
        /**
         * A hot observable that supplies any changes to the script direction.
         * Using the "replace-Observable-with-$" convention.
         * type {}
         */
        this.direction$ = new BehaviorSubject('');
        this.language = 'en';
        this.getDirectionFor(this.language);
    }
    /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     */
    /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     * @param {?} languageCode
     * @return {?}
     */
    CmxFlugeeService.prototype.getDirectionFor = /**
     * Get the direction for a given script based on language-code, and store the choice
     * of language as a side-effect.
     * param {string} languageCode an ISO 639-1 standard language-code
     * @param {?} languageCode
     * @return {?}
     */
    function (languageCode) {
        try {
            this.language = languageCode;
            // We shouldn't need the national variation of the language to get its script.
            /** @type {?} */
            var baseLanguage = languageCode.split(/[-_]/)[0];
            if (!this.languages[baseLanguage]) {
                // The language isn't in the list.
                console.warn("Language '" + languageCode + "' is not in the list.  Defaulting to 'ltr'");
                // It's a language with a ltr script and used internationally.
                baseLanguage = 'en';
            }
            this.direction$.next(this.languages[baseLanguage]);
        }
        catch (e) {
            /*
             * In case of error, bet on the fact that most languages are written left-to-right.
             * (The most widely used RTL scripts are Arabic script, Hebrew script, and the
             * written form of some African languages like Fula).
             */
            console.warn(e);
            this.direction$.next('ltr');
        }
    };
    CmxFlugeeService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CmxFlugeeService.ctorParameters = function () { return []; };
    return CmxFlugeeService;
}());
export { CmxFlugeeService };
if (false) {
    /** @type {?} */
    CmxFlugeeService.prototype.languages;
    /**
     * A hot observable that supplies any changes to the script direction.
     * Using the "replace-Observable-with-$" convention.
     * type {}
     * @type {?}
     */
    CmxFlugeeService.prototype.direction$;
    /** @type {?} */
    CmxFlugeeService.prototype.language;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmx1Z2VlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VtZXgvY214LWZsdWdlZS12Ny8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9mbHVnZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRXZDO0lBb0JFO1FBakJBLGNBQVMsR0FBUTtZQUNmLElBQUksRUFBRSxLQUFLO1lBQ1gsSUFBSSxFQUFFLEtBQUs7WUFDWCxJQUFJLEVBQUUsS0FBSztZQUNYLElBQUksRUFBRSxLQUFLO1lBQ1gsSUFBSSxFQUFFLEtBQUs7WUFDWCxJQUFJLEVBQUUsS0FBSztZQUNYLElBQUksRUFBRSxLQUFLO1NBQ1osQ0FBQzs7Ozs7O1FBT0ssZUFBVSxHQUE0QixJQUFJLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5RCxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBSXJCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7OztPQUlHOzs7Ozs7OztJQUNILDBDQUFlOzs7Ozs7O0lBQWYsVUFBZ0IsWUFBb0I7UUFDbEMsSUFBSTtZQUNGLElBQUksQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDOzs7Z0JBRXpCLFlBQVksR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDakMsa0NBQWtDO2dCQUNsQyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWEsWUFBWSwrQ0FBNEMsQ0FBQyxDQUFDO2dCQUNwRiw4REFBOEQ7Z0JBQzlELFlBQVksR0FBRyxJQUFJLENBQUM7YUFDckI7WUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNWOzs7O2VBSUc7WUFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7Z0JBcERGLFVBQVU7Ozs7SUFzRFgsdUJBQUM7Q0FBQSxBQXRERCxJQXNEQztTQXJEWSxnQkFBZ0I7OztJQUUzQixxQ0FRRTs7Ozs7OztJQU9GLHNDQUFxRTs7SUFDckUsb0NBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDbXhGbHVnZWVTZXJ2aWNlIHtcblxuICBsYW5ndWFnZXM6IGFueSA9IHtcbiAgICAnYXInOiAncnRsJyxcbiAgICAnZGUnOiAnbHRyJyxcbiAgICAnZW4nOiAnbHRyJyxcbiAgICAnZXMnOiAnbHRyJyxcbiAgICAnZnInOiAnbHRyJyxcbiAgICAnaGUnOiAncnRsJyxcbiAgICAncGwnOiAnbHRyJyxcbiAgfTtcblxuICAvKipcbiAgICogQSBob3Qgb2JzZXJ2YWJsZSB0aGF0IHN1cHBsaWVzIGFueSBjaGFuZ2VzIHRvIHRoZSBzY3JpcHQgZGlyZWN0aW9uLlxuICAgKiBVc2luZyB0aGUgXCJyZXBsYWNlLU9ic2VydmFibGUtd2l0aC0kXCIgY29udmVudGlvbi5cbiAgICogdHlwZSB7fVxuICAgKi9cbiAgcHVibGljIGRpcmVjdGlvbiQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnJyk7XG4gIHB1YmxpYyBsYW5ndWFnZSA9ICdlbic7XG4gIGNvbnN0cnVjdG9yKFxuXG4gICkge1xuICAgIHRoaXMuZ2V0RGlyZWN0aW9uRm9yKHRoaXMubGFuZ3VhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGlyZWN0aW9uIGZvciBhIGdpdmVuIHNjcmlwdCBiYXNlZCBvbiBsYW5ndWFnZS1jb2RlLCBhbmQgc3RvcmUgdGhlIGNob2ljZVxuICAgKiBvZiBsYW5ndWFnZSBhcyBhIHNpZGUtZWZmZWN0LlxuICAgKiBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZUNvZGUgYW4gSVNPIDYzOS0xIHN0YW5kYXJkIGxhbmd1YWdlLWNvZGVcbiAgICovXG4gIGdldERpcmVjdGlvbkZvcihsYW5ndWFnZUNvZGU6IHN0cmluZykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLmxhbmd1YWdlID0gbGFuZ3VhZ2VDb2RlO1xuICAgICAgLy8gV2Ugc2hvdWxkbid0IG5lZWQgdGhlIG5hdGlvbmFsIHZhcmlhdGlvbiBvZiB0aGUgbGFuZ3VhZ2UgdG8gZ2V0IGl0cyBzY3JpcHQuXG4gICAgICBsZXQgYmFzZUxhbmd1YWdlID0gbGFuZ3VhZ2VDb2RlLnNwbGl0KC9bLV9dLylbMF07XG4gICAgICBpZiAoIXRoaXMubGFuZ3VhZ2VzW2Jhc2VMYW5ndWFnZV0pIHtcbiAgICAgICAgLy8gVGhlIGxhbmd1YWdlIGlzbid0IGluIHRoZSBsaXN0LlxuICAgICAgICBjb25zb2xlLndhcm4oYExhbmd1YWdlICcke2xhbmd1YWdlQ29kZX0nIGlzIG5vdCBpbiB0aGUgbGlzdC4gIERlZmF1bHRpbmcgdG8gJ2x0cidgKTtcbiAgICAgICAgLy8gSXQncyBhIGxhbmd1YWdlIHdpdGggYSBsdHIgc2NyaXB0IGFuZCB1c2VkIGludGVybmF0aW9uYWxseS5cbiAgICAgICAgYmFzZUxhbmd1YWdlID0gJ2VuJztcbiAgICAgIH1cbiAgICAgIHRoaXMuZGlyZWN0aW9uJC5uZXh0KHRoaXMubGFuZ3VhZ2VzW2Jhc2VMYW5ndWFnZV0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qXG4gICAgICAgKiBJbiBjYXNlIG9mIGVycm9yLCBiZXQgb24gdGhlIGZhY3QgdGhhdCBtb3N0IGxhbmd1YWdlcyBhcmUgd3JpdHRlbiBsZWZ0LXRvLXJpZ2h0LlxuICAgICAgICogKFRoZSBtb3N0IHdpZGVseSB1c2VkIFJUTCBzY3JpcHRzIGFyZSBBcmFiaWMgc2NyaXB0LCBIZWJyZXcgc2NyaXB0LCBhbmQgdGhlXG4gICAgICAgKiB3cml0dGVuIGZvcm0gb2Ygc29tZSBBZnJpY2FuIGxhbmd1YWdlcyBsaWtlIEZ1bGEpLlxuICAgICAgICovXG4gICAgICBjb25zb2xlLndhcm4oZSk7XG4gICAgICB0aGlzLmRpcmVjdGlvbiQubmV4dCgnbHRyJyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==