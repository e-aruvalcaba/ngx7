import { Component, EventEmitter, HostListener, Input, Output, forwardRef, HostBinding, Optional, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export var CMX_CHECKBOX_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return CmxCheckboxComponent; }),
};
var CmxCheckboxComponent = /** @class */ (function () {
    function CmxCheckboxComponent(isRTL) {
        this.dirAttr = 'auto';
        this.change = new EventEmitter();
        this._checked = false;
        this._disabled = false;
        this._error = false;
        this._rtl = false;
        this._required = false;
        this._value = undefined;
        // controlValueAccessor public methods
        this.propagateChange = function (value) {
            // no-op
        };
        this.propagateTouch = function () {
            // no-op
        };
        if (isRTL != undefined) {
            this.rtl = isRTL;
        }
    }
    Object.defineProperty(CmxCheckboxComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function ($value) {
            if ($value === true || $value === false) {
                this._checked = $value;
                this.propagateChange($value);
                this.propagateTouch();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxCheckboxComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function ($value) {
            if ($value !== undefined && $value !== null) {
                this._disabled = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxCheckboxComponent.prototype, "error", {
        get: function () {
            return this._error;
        },
        set: function ($value) {
            if ($value !== undefined && $value !== null) {
                this._error = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxCheckboxComponent.prototype, "required", {
        get: function () {
            return this._required;
        },
        set: function ($value) {
            this._required = $value !== undefined && $value !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxCheckboxComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function ($value) {
            this._value = $value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxCheckboxComponent.prototype, "rtl", {
        get: function () {
            return this._rtl;
        },
        set: function ($value) {
            if ($value !== undefined && $value !== null) {
                this._rtl = $value;
                this.dirAttr = $value ? 'rtl' : 'ltr';
            }
        },
        enumerable: true,
        configurable: true
    });
    CmxCheckboxComponent.prototype.writeValue = function ($value) {
        if ($value !== undefined || $value !== null) {
            this._checked = $value;
        }
    };
    CmxCheckboxComponent.prototype.registerOnChange = function ($fn) {
        this.propagateChange = $fn;
    };
    CmxCheckboxComponent.prototype.registerOnTouched = function ($fn) {
        this.propagateTouch = $fn;
    };
    CmxCheckboxComponent.prototype.setDisabledState = function ($isDisabled) {
        this.disabled = $isDisabled;
    };
    /**
     * Handles click events on the component.
     * @param event
     */
    CmxCheckboxComponent.prototype.toggleCheckHost = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.toggleCheck();
    };
    /**
     * Toggles the "checked" state of the component.  Called in response to click-events
     * handled by the HostListener.
     */
    CmxCheckboxComponent.prototype.toggleCheck = function () {
        if (this.disabled === false) {
            this.checked = !this.checked;
            this.change.emit(this.checked);
        }
    };
    CmxCheckboxComponent.decorators = [
        { type: Component, args: [{
                    providers: [
                        CMX_CHECKBOX_VALUE_ACCESSOR,
                    ],
                    selector: 'cmx-checkbox',
                    styles: ["\n      html {\n        font-family: sans-serif;\n        line-height: 1.15;\n        -ms-text-size-adjust: 100%;\n        -webkit-text-size-adjust: 100%;\n      }\n\n      body {\n        margin: 0;\n      }\n\n      a {\n        background-color: transparent;\n        -webkit-text-decoration-skip: objects;\n      }\n\n      a:active,a:hover {\n        outline-width: 0;\n      }\n\n      input {\n        font-family: sans-serif;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n\n      input {\n        overflow: visible;\n      }\n\n      html [type=\"button\"],[type=\"reset\"],[type=\"submit\"] {\n        -webkit-appearance: button;\n      }\n\n      [type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n      }\n\n      [type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring {\n        outline: 1px dotted ButtonText;\n      }\n\n      [type=\"checkbox\"],[type=\"radio\"] {\n        box-sizing: border-box;\n        padding: 0;\n      }\n\n      [type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button {\n        height: auto;\n      }\n\n      [type=\"search\"] {\n        -webkit-appearance: textfield;\n        outline-offset: -2px;\n      }\n\n      [type=\"search\"]::-webkit-search-cancel-button,[type=\"search\"]::-webkit-search-decoration {\n        -webkit-appearance: none;\n      }\n\n      ::-webkit-file-upload-button {\n        -webkit-appearance: button;\n        font: inherit;\n      }\n\n      [hidden] {\n        display: none;\n      }\n\n      html {\n        box-sizing: border-box;\n      }\n\n      *,*::before,*::after {\n        box-sizing: inherit;\n      }\n\n      html {\n        -ms-overflow-style: scrollbar;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n      }\n\n      body {\n        font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\n        font-size: 1rem;\n        font-weight: normal;\n        line-height: 1.5;\n        color: #292b2c;\n        background-color: #fff;\n      }\n\n      [tabindex=\"-1\"]:focus {\n        outline: none !important;\n      }\n\n      a {\n        color: #139DF2;\n        text-decoration: none;\n      }\n\n      a:focus,a:hover {\n        color: #277EAF;\n        text-decoration: underline;\n      }\n\n      a:not([href]):not([tabindex]) {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      a:not([href]):not([tabindex]):focus {\n        outline: 0;\n      }\n\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n\n      a,[role=\"button\"],input,label {\n        touch-action: manipulation;\n      }\n\n      label {\n        display: inline-block;\n        margin-bottom: .5rem;\n      }\n\n      input {\n        line-height: inherit;\n      }\n\n      input[type=\"radio\"]:disabled,input[type=\"checkbox\"]:disabled {\n        cursor: not-allowed;\n      }\n\n      input[type=\"date\"],input[type=\"time\"],input[type=\"datetime-local\"],input[type=\"month\"] {\n        -webkit-appearance: listbox;\n      }\n\n      input[type=\"search\"] {\n        -webkit-appearance: none;\n      }\n\n      output {\n        display: inline-block;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        font-family: \"Roboto-Thin\";\n        font-weight: 100;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Light.ttf\");\n        font-weight: 300;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Regular.ttf\");\n        font-weight: 400;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Italic.ttf\");\n        font-weight: 400;\n        font-style: italic;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Medium.ttf\");\n        font-weight: 500;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Bold.ttf\");\n        font-weight: 700;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Black.ttf\");\n        font-weight: 800;\n      }\n\n      a {\n        text-decoration: none;\n        color: #3FA9F5;\n      }\n\n      a:hover {\n        text-decoration: underline;\n        color: #3FA9F5;\n      }\n\n      a:active {\n        text-decoration: underline;\n        color: #003876;\n      }\n\n      a.disabled {\n        text-decoration: none;\n        color: #666;\n        cursor: not-allowed;\n      }\n\n      :host {\n        font-family: \"Roboto\",sans-serif;\n        font-size: 1rem;\n        -moz-box-sizing: border-box;\n        -webkit-box-sizing: border-box;\n        box-sizing: border-box;\n        position: relative;\n      }\n\n      :host input[type=checkbox] {\n        position: absolute;\n        opacity: 0;\n        z-index: 0;\n        width: 16px;\n        height: 16px;\n        margin-right: 0.375rem;\n      }\n\n      :host input[type=checkbox]+label {\n        display: inline-flex;\n        align-items: flex-start;\n        position: relative;\n        min-height: 16px;\n      }\n\n      :host input[type=checkbox]+label::before {\n        border-color: #B0B0B0;\n        border-radius: 1px;\n        border-style: solid;\n        border-width: 1px;\n        box-sizing: border-box;\n        content: ' ';\n        display: inline-block;\n        height: 16px;\n        margin-right: 0.375rem;\n        min-width: 16px;\n        width: 16px;\n      }\n\n      :host input[type=checkbox].checked+label::before,:host input[type=checkbox]:checked+label::before {\n        background-color: #3FA9F5;\n        border-color: #3FA9F5;\n      }\n\n      :host input[type=checkbox].checked+label::after,:host input[type=checkbox]:checked+label::after {\n        content: ' ';\n        top: 4px;\n        left: 3px;\n        position: absolute;\n        width: 10px;\n        height: 6px;\n        border-left: 2.5px solid #fff;\n        border-bottom: 2.5px solid #fff;\n        border-top: none;\n        border-right: none;\n        transform: rotate(-45deg);\n      }\n\n      :host input[type=checkbox].error+label::before {\n        border-color: #EE3D42;\n      }\n\n      :host input[type=checkbox][disabled]+label::before {\n        background-color: #D6D6D6;\n      }\n\n      :host:hover label::before,:host:focus label::before {\n        background-color: #e8ebef;\n      }\n\n      :host[dir='rtl'] input[type=checkbox] {\n        margin-left: 0.375rem;\n        margin-right: 0;\n      }\n\n      :host[dir='rtl'] input[type=checkbox]+label::before {\n        margin-left: 0.375rem;\n        margin-right: 0;\n      }\n\n      :host[dir='rtl'] input[type=checkbox]:checked+label::after {\n        content: ' ';\n        top: 4px;\n        right: 3px;\n        left: auto;\n      }\n\n      :host input,:host label {\n        cursor: pointer;\n      }\n\n      :host label.--disabled {\n        cursor: not-allowed;\n      }\n\n      :host input+label>span {\n        display: inline-block;\n      }\n    "],
                    template: "\n      <input\n        id=\"tickBox\"\n        type=\"checkbox\"\n        [checked]=\"checked\"\n        [required]=\"required\"\n        [disabled]=\"disabled\"\n        [value]=\"value ? value : true\"\n        [class.checked]=\"checked\"\n        [class.error]=\"error\">\n      <label\n        for=\"tickBox\"\n        [ngClass]=\"{'--disabled': disabled }\">\n        <span>\n          <ng-content></ng-content>\n        </span>\n      </label>\n    ",
                },] },
    ];
    /** @nocollapse */
    CmxCheckboxComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['RTL',] },] },
    ]; };
    CmxCheckboxComponent.propDecorators = {
        'dirAttr': [{ type: HostBinding, args: ['attr.dir',] },],
        'checked': [{ type: Input },],
        'disabled': [{ type: Input },],
        'error': [{ type: Input },],
        'required': [{ type: Input },],
        'value': [{ type: Input },],
        'rtl': [{ type: Input },],
        'change': [{ type: Output },],
        'toggleCheckHost': [{ type: HostListener, args: ['click', ['$event'],] },],
    };
    return CmxCheckboxComponent;
}());
export { CmxCheckboxComponent };
//# sourceMappingURL=cmx-checkbox.component.js.map