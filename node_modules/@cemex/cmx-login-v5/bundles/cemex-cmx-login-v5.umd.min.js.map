{"version":3,"sources":["ng://@cemex/cmx-login-v5/lib/cmx-login.component.ts","ng://@cemex/cmx-login-v5/lib/cmx-login.module.ts"],"names":["CmxLoginComponent","Object","defineProperty","prototype","this","_rtl","$value","undefined","dirAttr","authenticate","_this","loginForm","valid","username","get","value","password","submitting","sessionService","login","generateCookie","appName","validateTemporaryPassword","then","tokenResponse","loggedIn","emit","loginFailed","userRegion","oauth2","region","regionHost","euRegion","indexOf","euHost","ameHost","profile","hasTemporaryPassword","routeAfterLogin","tempPasswordHandler","access_token","jwt","firstName","lastName","country","createCookie","JSON","stringify","clearCookie","params","URLSearchParams","urlRoute","append","window","location","host","sessionStorage","clear","baseUrl","protocol","href","encodeURIComponent","destionationUrl","toString","router","navigateByUrl","catch","err","status","errorMsg","ngAfterViewInit","setTimeout","length","controls","setErrors","goToForgotPassword","forgotPasswordUrl","navigate","ngOnInit","logout","eventBroadcaster","on","Broadcaster","DCM_APP_LOGOUT","subscribe","response","translationService","languageLoaded","data","getLogo","localStorage","getItem","substr","cmxLogoUrl","Component","args","selector","template","TranslationService","FormBuilder","SessionService","ActivatedRoute","Router","HostBinding","Input","Output","fb","route","title","width","showPassword","EventEmitter","group","Validators","required","valueChanges","CmxLoginModule","NgModule","declarations","imports","CommonModule","ReactiveFormsModule","RouterModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Component, Input, OnInit, Output, EventEmitter, HostBinding } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { SessionService } from '@cemex-core/angular-services-v7';\r\nimport { TranslationService } from '@cemex-core/angular-localization-v7';\r\nimport { Broadcaster } from '@cemex-core/events-v7';\r\n\r\nimport { Language } from './model/language';\r\nimport { TokenResponse } from './model/token-response';\r\n\r\n@Component({\r\n  selector: 'cmx-login',\r\n  templateUrl: './cmx-login.component.html',\r\n  styleUrls: ['../../../../../../../scss/cmx-login/v3/cmx-login.component.scss']\r\n})\r\nexport class CmxLoginComponent implements OnInit {\r\n\r\n  @HostBinding('attr.dir')\r\n    public dirAttr: string = 'auto';\r\n    @Input()\r\n    public title: string = '';\r\n    @Input()\r\n    public width: string = '';\r\n    @Input()\r\n    public forgotPasswordUrl: string;\r\n    @Input()\r\n    public appName: string;\r\n    @Input()\r\n    public validateTemporaryPassword: boolean = false;\r\n    @Input()\r\n    public urlRoute = '';\r\n    @Input()\r\n    get rtl(): boolean {\r\n        return this._rtl;\r\n    }\r\n    set rtl($value: boolean) {\r\n        if ($value !== undefined && $value !== null) {\r\n            this._rtl = $value;\r\n            this.dirAttr = $value ? 'rtl' : 'ltr';\r\n        }\r\n    }\r\n\r\n    public loginForm: FormGroup;\r\n    public loginFailed = false;\r\n    public submitting = false;\r\n    public currentLang: Language;\r\n    public errorMsg: string;\r\n    public cmxLogoUrl = '';\r\n    public showPassword: boolean = false;\r\n\r\n    @Output()\r\n    public loggedIn = new EventEmitter();\r\n    private generateCookie = true;\r\n    private _rtl: boolean = false;\r\n    private routeAfterLogin: 'dashboard' | 'resetPassword';\r\n    private euHost = (global as any)['HOST_EUROPE'];\r\n    private ameHost = (global as any)['HOST_AMERICA'];\r\n    private euRegion = ['GB', 'UK'];\r\n\r\n    constructor(\r\n        public translationService: TranslationService,\r\n        private fb: FormBuilder,\r\n        private sessionService: SessionService,\r\n        private route: ActivatedRoute,\r\n        private eventBroadcaster: Broadcaster,\r\n        private router: Router\r\n    ) {\r\n\r\n        this.getLogo();\r\n\r\n        this.loginForm = this.fb.group({\r\n            username: [null, Validators.required],\r\n            password: [null, Validators.required]\r\n        });\r\n\r\n        this.loginForm.valueChanges.subscribe(() => {\r\n            this.loginFailed = false;\r\n        });\r\n    }\r\n\r\n    public authenticate(): void {\r\n        if (!this.loginForm.valid) {\r\n            return;\r\n        }\r\n\r\n        const username: string = this.loginForm.get('username').value;\r\n        const password: string = this.loginForm.get('password').value;\r\n\r\n        this.submitting = true;\r\n        this.sessionService\r\n            .login(username, password,\r\n                this.generateCookie,\r\n                this.appName,\r\n                this.validateTemporaryPassword)\r\n            .then((tokenResponse: TokenResponse) => {\r\n                this.loggedIn.emit();\r\n                this.loginFailed = false;\r\n                this.submitting = false;\r\n                // Redirection between regions (America / Europe) depending on user region.z\r\n                const userRegion =\r\n                    tokenResponse ? tokenResponse.oauth2.region : this.sessionService.userRegion;\r\n                const regionHost: string =\r\n                    (this.euRegion.indexOf(userRegion) > -1) ?\r\n                        this.euHost : this.ameHost;\r\n\r\n                const hasTemporaryPassword = tokenResponse &&\r\n                    tokenResponse.profile && tokenResponse.profile.hasTemporaryPassword;\r\n                if (hasTemporaryPassword) {\r\n                    this.routeAfterLogin = 'resetPassword';\r\n                    const tempPasswordHandler = {\r\n                        access_token: tokenResponse.oauth2.access_token,\r\n                        jwt: tokenResponse.jwt,\r\n                        username,\r\n                        firstName: tokenResponse.profile.firstName,\r\n                        lastName: tokenResponse.profile.lastName,\r\n                        country: tokenResponse.country\r\n                    };\r\n                    this.sessionService\r\n                        .createCookie('cmxTmpSession', JSON.stringify(tempPasswordHandler));\r\n                } else {\r\n                    this.sessionService.clearCookie('cmxTmpSession');\r\n                    this.routeAfterLogin = 'dashboard';\r\n                }\r\n\r\n                const params = new URLSearchParams();\r\n                if (this.urlRoute) {\r\n                    params.append('returnUrl', this.urlRoute);\r\n                }\r\n\r\n                // If user is already on the right region, does normal routing\r\n                const currentHost = window.location.host;\r\n                if (regionHost !== currentHost) {\r\n                    sessionStorage.clear();\r\n                    const baseUrl =\r\n                        `${window.location.protocol}//${regionHost}/${this.routeAfterLogin}`;\r\n                    window.location.href =\r\n                        `${baseUrl}?returnUrl=${encodeURIComponent(this.urlRoute)}`;\r\n                } else {\r\n                    const destionationUrl = this.routeAfterLogin + '?' + params.toString();\r\n                    this.router.navigateByUrl(destionationUrl);\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                if (err.status === 403) {\r\n                    this.errorMsg = 'views.login.403Error';\r\n                } else {\r\n                    this.errorMsg = 'views.login.error';\r\n                }\r\n                this.loginFailed = true;\r\n                this.submitting = false;\r\n            });\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            const usrInput = this.loginForm.get('username');\r\n            const usrValue = usrInput.value || '';\r\n            if (usrValue.length > 0) {\r\n                this.loginForm.controls['password'].setErrors(null);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    /**\r\n     * Go to forgot password, default to /forgotPassword unless a custom absolute url is defined\r\n     */\r\n    public goToForgotPassword(): void {\r\n        if (!this.forgotPasswordUrl) {\r\n            this.router.navigate(['/forgotPassword']);\r\n        } else {\r\n            location.href = this.forgotPasswordUrl;\r\n        }\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.sessionService.logout();\r\n        this.eventBroadcaster.on<string>(Broadcaster.DCM_APP_LOGOUT)\r\n            .subscribe((response) => {\r\n                this.sessionService.clearCookie('up_session');\r\n            });\r\n\r\n        this.translationService.languageLoaded.subscribe((data) => this.getLogo());\r\n    }\r\n\r\n    private getLogo(): void {\r\n        let language = '';\r\n        language = localStorage.getItem('language') ||\r\n            sessionStorage.getItem('language') || 'en_US';\r\n\r\n        const country = language.substr(3, 5);\r\n\r\n        if (country === 'IL') {\r\n            this.cmxLogoUrl = 'https://www.cemexgo.com/cdn/logos/svg/readymix.co.il.white.svg';\r\n        } else {\r\n            this.cmxLogoUrl = 'https://www.cemexgo.com/cdn/logos/svg/cemex_mono_white.svg';\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CmxLoginComponent } from './cmx-login.component';\r\n\r\n@NgModule({\r\n  declarations: [CmxLoginComponent],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule,\r\n    FormsModule,\r\n  ],\r\n  exports: [CmxLoginComponent]\r\n})\r\nexport class CmxLoginModule { }\r\n"]}