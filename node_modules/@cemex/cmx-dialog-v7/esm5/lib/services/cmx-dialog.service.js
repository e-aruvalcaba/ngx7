/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var CmxDialogService = /** @class */ (function () {
    function CmxDialogService() {
        this.cmxDialogs = new Array();
    }
    /**
     * @param {?} cmxDialog
     * @return {?}
     */
    CmxDialogService.prototype.addDialog = /**
     * @param {?} cmxDialog
     * @return {?}
     */
    function (cmxDialog) {
        this.hideLastDialog();
        this.cmxDialogs.push(cmxDialog);
    };
    /**
     * @param {?} cmxDialog
     * @param {?} showLastDialog
     * @return {?}
     */
    CmxDialogService.prototype.removeDialog = /**
     * @param {?} cmxDialog
     * @param {?} showLastDialog
     * @return {?}
     */
    function (cmxDialog, showLastDialog) {
        this.cmxDialogs.splice(this.cmxDialogs.length - 1, 1);
        if (showLastDialog) {
            this.showLastDialog();
        }
    };
    /**
     * @return {?}
     */
    CmxDialogService.prototype.closeAllDialogs = /**
     * @return {?}
     */
    function () {
        for (var i = this.cmxDialogs.length - 1; i >= 0; i--) {
            this.cmxDialogs[i].close(false);
        }
    };
    /**
     * @private
     * @return {?}
     */
    CmxDialogService.prototype.showLastDialog = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.cmxDialogs.length > 0) {
            this.cmxDialogs[this.cmxDialogs.length - 1].show();
        }
    };
    /**
     * @private
     * @return {?}
     */
    CmxDialogService.prototype.hideLastDialog = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.cmxDialogs.length > 0) {
            this.cmxDialogs[this.cmxDialogs.length - 1].hide();
        }
    };
    CmxDialogService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    CmxDialogService.ctorParameters = function () { return []; };
    /** @nocollapse */ CmxDialogService.ngInjectableDef = i0.defineInjectable({ factory: function CmxDialogService_Factory() { return new CmxDialogService(); }, token: CmxDialogService, providedIn: "root" });
    return CmxDialogService;
}());
export { CmxDialogService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxDialogService.prototype.cmxDialogs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4L2NteC1kaWFsb2ctdjcvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY214LWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUkzQztJQU9JO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEtBQUssRUFBc0IsQ0FBQztJQUN0RCxDQUFDOzs7OztJQUVNLG9DQUFTOzs7O0lBQWhCLFVBQWlCLFNBQTZCO1FBQzFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7Ozs7SUFFTSx1Q0FBWTs7Ozs7SUFBbkIsVUFBb0IsU0FBNkIsRUFBRSxjQUF1QjtRQUN0RSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxjQUFjLEVBQUU7WUFDaEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7OztJQUVNLDBDQUFlOzs7SUFBdEI7UUFDSSxLQUFLLElBQUksQ0FBQyxHQUFXLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzFELElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ25DO0lBQ0wsQ0FBQzs7Ozs7SUFFTyx5Q0FBYzs7OztJQUF0QjtRQUNJLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDdEQ7SUFDTCxDQUFDOzs7OztJQUVPLHlDQUFjOzs7O0lBQXRCO1FBQ0ksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN0RDtJQUNMLENBQUM7O2dCQXZDSixVQUFVLFNBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzs7OzsyQkFORDtDQTRDQyxBQXhDRCxJQXdDQztTQXJDWSxnQkFBZ0I7Ozs7OztJQUV6QixzQ0FBeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IENteERpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4vLi4vY29tcG9uZW50cy9jbXgtZGlhbG9nL2NteC1kaWFsb2cuY29tcG9uZW50JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQ214RGlhbG9nU2VydmljZSB7XG5cbiAgICBwcml2YXRlIGNteERpYWxvZ3M6IENteERpYWxvZ0NvbXBvbmVudFtdO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuY214RGlhbG9ncyA9IG5ldyBBcnJheTxDbXhEaWFsb2dDb21wb25lbnQ+KCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZERpYWxvZyhjbXhEaWFsb2c6IENteERpYWxvZ0NvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhpZGVMYXN0RGlhbG9nKCk7XG4gICAgICAgIHRoaXMuY214RGlhbG9ncy5wdXNoKGNteERpYWxvZyk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZURpYWxvZyhjbXhEaWFsb2c6IENteERpYWxvZ0NvbXBvbmVudCwgc2hvd0xhc3REaWFsb2c6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbXhEaWFsb2dzLnNwbGljZSh0aGlzLmNteERpYWxvZ3MubGVuZ3RoIC0gMSwgMSk7XG4gICAgICAgIGlmIChzaG93TGFzdERpYWxvZykge1xuICAgICAgICAgICAgdGhpcy5zaG93TGFzdERpYWxvZygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlQWxsRGlhbG9ncygpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gdGhpcy5jbXhEaWFsb2dzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICB0aGlzLmNteERpYWxvZ3NbaV0uY2xvc2UoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93TGFzdERpYWxvZygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY214RGlhbG9ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmNteERpYWxvZ3NbdGhpcy5jbXhEaWFsb2dzLmxlbmd0aCAtIDFdLnNob3coKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaGlkZUxhc3REaWFsb2coKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNteERpYWxvZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5jbXhEaWFsb2dzW3RoaXMuY214RGlhbG9ncy5sZW5ndGggLSAxXS5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=