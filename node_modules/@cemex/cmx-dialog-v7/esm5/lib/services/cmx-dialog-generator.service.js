/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, } from '@angular/core';
import { CmxDialogComponent } from './../components/cmx-dialog/cmx-dialog.component';
import { CmxDialogConfirmationComponent } from '../components/cmx-dialog-confirmation/cmx-dialog-confirmation.component';
import { ConfirmationType } from '../components/cmx-dialog-confirmation/cmx-dialog-confirmation.component';
import * as i0 from "@angular/core";
var CmxDialogGeneratorService = /** @class */ (function () {
    function CmxDialogGeneratorService() {
        this.dialogDelay = 100;
        this.defaultSuccessMessage = 'This is a dynamically generated confirmation success dialog';
        this.defaultWarningMessage = 'This is a dynamically generated confirmation warning dialog';
        this.defaultErrorMessage = 'This is a dynamically generated confirmation error dialog';
        this.defaultErrorMessageDetail = 'This is a message detail';
    }
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     * @param {?} options
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.createConfirmationDialog = /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     * @param {?} options
     * @return {?}
     */
    function (viewContainerRef, componentFactoryResolver, options) {
        // tslint:disable-next-line:max-line-length
        /** @type {?} */
        var componentFactory = componentFactoryResolver.resolveComponentFactory(CmxDialogConfirmationComponent);
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        // tslint:disable-next-line:typedef
        /** @type {?} */
        var component = ((/** @type {?} */ (componentRef.instance)));
        this.setDialogSubscriptions(options, component.dialog);
        this.openConfirmationDialog(options, component);
        return component;
    };
    /* experimental */
    /* experimental */
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     * @param {?} componentTemplate
     * @param {?} options
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.createCustomDialog = /* experimental */
    /**
     * @param {?} viewContainerRef
     * @param {?} componentFactoryResolver
     * @param {?} componentTemplate
     * @param {?} options
     * @return {?}
     */
    function (viewContainerRef, componentFactoryResolver, componentTemplate, options) {
        /** @type {?} */
        var componentFactory = componentFactoryResolver.resolveComponentFactory(CmxDialogComponent);
        /** @type {?} */
        var componentRef = viewContainerRef.createComponent(componentFactory);
        // tslint:disable-next-line:typedef
        /** @type {?} */
        var component = ((/** @type {?} */ (componentRef.instance)));
        if (!(componentTemplate instanceof CmxDialogComponent)) {
            return component;
        }
        this.setDialogComponent(component, componentTemplate);
        this.setDialogComponentTimer(options, component);
        return component;
    };
    /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.setDialogSubscriptions = /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    function (options, component) {
        if (options.afterClosed) {
            component.afterClosed().subscribe(options.afterClosed());
        }
        if (options.afterOpened) {
            component.afterOpened().subscribe(options.afterOpened());
        }
    };
    /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.openConfirmationDialog = /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    function (options, component) {
        if (options.type === ConfirmationType.Success) {
            component.openAsSuccess(options.message ? options.message : this.defaultSuccessMessage);
        }
        else if (options.type === ConfirmationType.Warning) {
            component.openAsWarning(options.message ? options.message : this.defaultWarningMessage);
        }
        else if (options.type === ConfirmationType.Error) {
            component.openAsError(options.message ? options.message : this.defaultErrorMessage, options.messageDetail ? options.messageDetail : this.defaultErrorMessageDetail);
        }
    };
    /**
     * @private
     * @param {?} component
     * @param {?} componentTemplate
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.setDialogComponent = /**
     * @private
     * @param {?} component
     * @param {?} componentTemplate
     * @return {?}
     */
    function (component, componentTemplate) {
        component.enableHeader = componentTemplate.enableHeader;
        component.enableFooter = componentTemplate.enableFooter;
        component.enableClose = componentTemplate.enableClose;
        component.backgroundColor = componentTemplate.backgroundColor;
        component.rtl = componentTemplate.rtl;
        component.dirAttr = componentTemplate.dirAttr;
        console.log(component);
        if (component.enableHeader) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                component.dialogHeader.nativeElement.innerHTML = componentTemplate.dialogHeader.nativeElement.innerHTML;
            }), this.dialogDelay);
        }
        if (component.enableFooter) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                component.dialogFooter.nativeElement.innerHTML = componentTemplate.dialogFooter.nativeElement.innerHTML;
            }), this.dialogDelay);
        }
        setTimeout((/**
         * @return {?}
         */
        function () {
            component.dialogBody.nativeElement.innerHTML = componentTemplate.dialogBody.nativeElement.innerHTML;
        }), this.dialogDelay);
    };
    /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    CmxDialogGeneratorService.prototype.setDialogComponentTimer = /**
     * @private
     * @param {?} options
     * @param {?} component
     * @return {?}
     */
    function (options, component) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.setDialogSubscriptions(options, component);
            component.open();
        }), this.dialogDelay);
    };
    CmxDialogGeneratorService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */ CmxDialogGeneratorService.ngInjectableDef = i0.defineInjectable({ factory: function CmxDialogGeneratorService_Factory() { return new CmxDialogGeneratorService(); }, token: CmxDialogGeneratorService, providedIn: "root" });
    return CmxDialogGeneratorService;
}());
export { CmxDialogGeneratorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxDialogGeneratorService.prototype.dialogDelay;
    /**
     * @type {?}
     * @private
     */
    CmxDialogGeneratorService.prototype.defaultSuccessMessage;
    /**
     * @type {?}
     * @private
     */
    CmxDialogGeneratorService.prototype.defaultWarningMessage;
    /**
     * @type {?}
     * @private
     */
    CmxDialogGeneratorService.prototype.defaultErrorMessage;
    /**
     * @type {?}
     * @private
     */
    CmxDialogGeneratorService.prototype.defaultErrorMessageDetail;
}
//# sourceMappingURL=data:application/json;base64,