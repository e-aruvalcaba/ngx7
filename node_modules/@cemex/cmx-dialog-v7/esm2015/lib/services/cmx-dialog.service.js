/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class CmxDialogService {
    constructor() {
        this.cmxDialogs = new Array();
    }
    /**
     * @param {?} cmxDialog
     * @return {?}
     */
    addDialog(cmxDialog) {
        this.hideLastDialog();
        this.cmxDialogs.push(cmxDialog);
    }
    /**
     * @param {?} cmxDialog
     * @param {?} showLastDialog
     * @return {?}
     */
    removeDialog(cmxDialog, showLastDialog) {
        this.cmxDialogs.splice(this.cmxDialogs.length - 1, 1);
        if (showLastDialog) {
            this.showLastDialog();
        }
    }
    /**
     * @return {?}
     */
    closeAllDialogs() {
        for (let i = this.cmxDialogs.length - 1; i >= 0; i--) {
            this.cmxDialogs[i].close(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    showLastDialog() {
        if (this.cmxDialogs.length > 0) {
            this.cmxDialogs[this.cmxDialogs.length - 1].show();
        }
    }
    /**
     * @private
     * @return {?}
     */
    hideLastDialog() {
        if (this.cmxDialogs.length > 0) {
            this.cmxDialogs[this.cmxDialogs.length - 1].hide();
        }
    }
}
CmxDialogService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
CmxDialogService.ctorParameters = () => [];
/** @nocollapse */ CmxDialogService.ngInjectableDef = i0.defineInjectable({ factory: function CmxDialogService_Factory() { return new CmxDialogService(); }, token: CmxDialogService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    CmxDialogService.prototype.cmxDialogs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWRpYWxvZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4L2NteC1kaWFsb2ctdjcvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvY214LWRpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU8zQyxNQUFNLE9BQU8sZ0JBQWdCO0lBSXpCO1FBQ0ksSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLEtBQUssRUFBc0IsQ0FBQztJQUN0RCxDQUFDOzs7OztJQUVNLFNBQVMsQ0FBQyxTQUE2QjtRQUMxQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEMsQ0FBQzs7Ozs7O0lBRU0sWUFBWSxDQUFDLFNBQTZCLEVBQUUsY0FBdUI7UUFDdEUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3RELElBQUksY0FBYyxFQUFFO1lBQ2hCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN6QjtJQUNMLENBQUM7Ozs7SUFFTSxlQUFlO1FBQ2xCLEtBQUssSUFBSSxDQUFDLEdBQVcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDbkM7SUFDTCxDQUFDOzs7OztJQUVPLGNBQWM7UUFDbEIsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUN0RDtJQUNMLENBQUM7Ozs7O0lBRU8sY0FBYztRQUNsQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3REO0lBQ0wsQ0FBQzs7O1lBdkNKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs7Ozs7OztJQUdHLHNDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ214RGlhbG9nQ29tcG9uZW50IH0gZnJvbSAnLi8uLi9jb21wb25lbnRzL2NteC1kaWFsb2cvY214LWRpYWxvZy5jb21wb25lbnQnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDbXhEaWFsb2dTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgY214RGlhbG9nczogQ214RGlhbG9nQ29tcG9uZW50W107XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jbXhEaWFsb2dzID0gbmV3IEFycmF5PENteERpYWxvZ0NvbXBvbmVudD4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkRGlhbG9nKGNteERpYWxvZzogQ214RGlhbG9nQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGlkZUxhc3REaWFsb2coKTtcbiAgICAgICAgdGhpcy5jbXhEaWFsb2dzLnB1c2goY214RGlhbG9nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlRGlhbG9nKGNteERpYWxvZzogQ214RGlhbG9nQ29tcG9uZW50LCBzaG93TGFzdERpYWxvZzogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmNteERpYWxvZ3Muc3BsaWNlKHRoaXMuY214RGlhbG9ncy5sZW5ndGggLSAxLCAxKTtcbiAgICAgICAgaWYgKHNob3dMYXN0RGlhbG9nKSB7XG4gICAgICAgICAgICB0aGlzLnNob3dMYXN0RGlhbG9nKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvc2VBbGxEaWFsb2dzKCk6IHZvaWQge1xuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSB0aGlzLmNteERpYWxvZ3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHRoaXMuY214RGlhbG9nc1tpXS5jbG9zZShmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNob3dMYXN0RGlhbG9nKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jbXhEaWFsb2dzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuY214RGlhbG9nc1t0aGlzLmNteERpYWxvZ3MubGVuZ3RoIC0gMV0uc2hvdygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoaWRlTGFzdERpYWxvZygpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY214RGlhbG9ncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmNteERpYWxvZ3NbdGhpcy5jbXhEaWFsb2dzLmxlbmd0aCAtIDFdLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==