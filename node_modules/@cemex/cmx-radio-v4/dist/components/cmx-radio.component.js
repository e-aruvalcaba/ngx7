import { Component, Input, Output, EventEmitter, ElementRef, Renderer, Optional, HostBinding, Inject } from '@angular/core';
import { CmxRadioGroupDirective } from './cmx-radio-group.directive';
import { CmxRadioChange } from './cmx-radio-change';
var uniqueIdCounter = 0;
var CmxRadioButtonComponent = /** @class */ (function () {
    function CmxRadioButtonComponent(radioGroup, elementRef, renderer, isRTL) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.change = new EventEmitter();
        this.id = "md-radio-" + uniqueIdCounter++;
        this._checked = false;
        this._value = undefined;
        this._disabled = false;
        this._error = false;
        if (isRTL != undefined) {
            this.rtl = isRTL;
        }
        this.radioGroup = radioGroup;
    }
    Object.defineProperty(CmxRadioButtonComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (value) {
            if (this._value !== value) {
                this._value = value;
                if (this.radioGroup != null) {
                    if (!this.checked) {
                        this.checked = this.radioGroup.value === value;
                    }
                    if (this.checked) {
                        this.radioGroup.selected = this;
                    }
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxRadioButtonComponent.prototype, "checked", {
        get: function () {
            return this._checked;
        },
        set: function (newCheckedState) {
            if (this._checked !== newCheckedState) {
                this._checked = newCheckedState;
                if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {
                    this.radioGroup.selected = this;
                }
                else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {
                    // when unchecking the selected radio button, update the selected radio
                    // property on the group.
                    this.radioGroup.selected = null;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxRadioButtonComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            if (value) {
                this._disabled = true;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxRadioButtonComponent.prototype, "error", {
        get: function () {
            return this._error;
        },
        set: function (value) {
            this._error = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CmxRadioButtonComponent.prototype, "inputId", {
        get: function () {
            return this.id + "-input";
        },
        enumerable: true,
        configurable: true
    });
    CmxRadioButtonComponent.prototype.ngOnInit = function () {
        if (this.radioGroup) {
            // if the radio is inside a radio group, determine if it should be checked
            this.checked = this.radioGroup.value === this._value;
            // copy name from parent radio group
            this.name = this.radioGroup.name;
        }
    };
    CmxRadioButtonComponent.prototype.onInputChange = function (event) {
        event.stopPropagation();
        var groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;
        this.checked = true;
        this.emitChangeEvent();
        if (this.radioGroup) {
            this.radioGroup.controlValueAccessorChangeFn(this.value);
            this.radioGroup.touch();
            if (groupValueChanged) {
                this.radioGroup.emitChangeEvent();
            }
        }
    };
    CmxRadioButtonComponent.prototype.emitChangeEvent = function () {
        var event = new CmxRadioChange();
        event.source = this;
        event.value = this._value;
        this.change.emit(event);
    };
    CmxRadioButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cmx-radio-button',
                    styles: ["\n    @font-face {\n      font-family: \"Roboto\";\n      font-family: \"Roboto-Thin\";\n      font-weight: 100;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Light.ttf\");\n      font-weight: 300;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Regular.ttf\");\n      font-weight: 400;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Italic.ttf\");\n      font-weight: 400;\n      font-style: italic;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Medium.ttf\");\n      font-weight: 500;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Bold.ttf\");\n      font-weight: 700;\n    }\n\n    @font-face {\n      font-family: \"Roboto\";\n      src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Black.ttf\");\n      font-weight: 800;\n    }\n\n    a {\n      text-decoration: none;\n      color: #3FA9F5;\n    }\n\n    a:hover {\n      text-decoration: underline;\n      color: #3FA9F5;\n    }\n\n    a:active {\n      text-decoration: underline;\n      color: #003876;\n    }\n\n    a.disabled {\n      text-decoration: none;\n      color: #666;\n      cursor: not-allowed;\n    }\n\n    .cmx-radio {\n      font-family: \"Roboto\",sans-serif;\n      font-weight: 500;\n    }\n\n    .cmx-radio input[type=radio] {\n      position: absolute;\n      opacity: 0;\n      z-index: 1;\n      width: 16px;\n      height: 22px;\n      margin-right: 0.375rem;\n    }\n\n    .cmx-radio input[type=radio]+label {\n      display: inline-flex;\n      align-items: center;\n      position: relative;\n      height: 16px;\n    }\n\n    .cmx-radio input[type=radio]+label::before {\n      content: \" \";\n      display: inline-block;\n      width: 16px;\n      height: 16px;\n      box-sizing: border-box;\n      border-width: 1px;\n      border-color: #B0B0B0;\n      border-style: solid;\n      border-radius: 8px;\n      margin-right: 0.375rem;\n    }\n\n    .cmx-radio input[type=radio]:hover+label::before,.cmx-radio input[type=radio]:focus+label::before {\n      background-color: #e8ebef;\n    }\n\n    .cmx-radio input[type=radio]:checked+label::after {\n      content: ' ';\n      top: 4px;\n      left: 4px;\n      position: absolute;\n      width: 8px;\n      height: 8px;\n      background-color: #3FA9F5;\n      border-radius: 4px;\n    }\n\n    .cmx-radio input[type=radio]:checked.error+label::after {\n      background-color: #b71c1c;\n    }\n\n    .cmx-radio input[type=radio].error+label::before {\n      border-color: #EE3D42;\n    }\n\n    .cmx-radio input[type=radio][disabled]+label::before {\n      background-color: #D6D6D6;\n    }\n\n    .cmx-radio[dir=\"rtl\"] input[type=radio] {\n      margin-left: 0.375rem;\n      margin-right: 0;\n    }\n\n    .cmx-radio[dir=\"rtl\"] input[type=radio]+label::before {\n      margin-left: 0.375rem;\n      margin-right: 0;\n    }\n\n    .cmx-radio[dir=\"rtl\"] input[type=radio]:checked+label::after {\n      right: 4px;\n      left: auto;\n    }\n  "],
                    template: "\n    <div class=\"cmx-radio\" [attr.dir]=\"rtl? 'rtl' : 'ltr'\">\n      <input type=\"radio\"\n             [attr.data-tid]=\"dataTIdRadio\"\n             [checked]=\"checked\"\n             [class.error]=\"error\"\n             [disabled]=\"disabled\"\n             [id]=\"inputId\"\n             [name]=\"name\"\n             [value]=\"value\"\n             (change)=\"onInputChange( $event )\">\n      <label [attr.data-tid]=\"dataTIdLabel\" [attr.for]=\"inputId\" for=\"radio\">\n        <ng-content></ng-content>\n      </label>\n    </div>\n  ",
                },] },
    ];
    /** @nocollapse */
    CmxRadioButtonComponent.ctorParameters = function () { return [
        { type: CmxRadioGroupDirective, decorators: [{ type: Optional },] },
        { type: ElementRef, },
        { type: Renderer, },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ['RTL',] },] },
    ]; };
    CmxRadioButtonComponent.propDecorators = {
        'rtl': [{ type: Input },],
        'name': [{ type: Input },],
        'change': [{ type: Output },],
        'dataTIdRadio': [{ type: Input },],
        'dataTIdLabel': [{ type: Input },],
        'id': [{ type: HostBinding, args: ['attr.id',] }, { type: Input },],
        'value': [{ type: Input },],
        'checked': [{ type: Input },],
        'disabled': [{ type: Input },],
        'error': [{ type: Input },],
    };
    return CmxRadioButtonComponent;
}());
export { CmxRadioButtonComponent };
//# sourceMappingURL=cmx-radio.component.js.map