import { Injectable, Inject, Optional } from "@angular/core";
import { FormatterService } from "./formatter.service";
// tslint:disable
var moment = require('moment');
// tslint:enable
var DateFormatService = /** @class */ (function () {
    function DateFormatService(languagesList, formatter) {
        this.languagesList = languagesList;
        this.formatter = formatter;
        //
    }
    /**
     * @description Formats the range value of the datepicker
     * @param any $datepickerValue: The value of the range selected in the datepicker component,
     * requires a min and max attributes
     * @param string $momentFormat: format string for readable representation
     */
    DateFormatService.prototype.formatRange = function ($datepickerValue, $momentFormat) {
        var $language = this.findLanguage();
        var $answer = "";
        if ($momentFormat !== undefined && $momentFormat !== null) {
            moment.updateLocale(localStorage.language, this.currentLanguageConfig);
            return moment($datepickerValue.value.min).
                locale(localStorage.language).format($momentFormat) + " - " +
                moment($datepickerValue.value.max).
                    locale(localStorage.language).format($momentFormat);
        }
        else if (this.formatter != undefined) {
            $answer = this.formatter.formatDateTimeMoment($datepickerValue.value.min, $language.languageISO, $language.formatDate) +
                " - " +
                this.formatter.formatDateTimeMoment($datepickerValue.value.max, $language.languageISO, $language.formatDate);
        }
        else {
            var minDay = void 0;
            var minMonth = void 0;
            var minYear = void 0;
            var maxDay = void 0;
            var maxMonth = void 0;
            var maxYear = void 0;
            if ($datepickerValue.value.min.getDate() <= 9) {
                minDay = "0" + $datepickerValue.value.min.getDate();
            }
            else {
                minDay = $datepickerValue.value.min.getDate();
            }
            minMonth = $datepickerValue.value.min.getMonth();
            minYear = $datepickerValue.value.min.getFullYear();
            if ($datepickerValue.value.max.getDate() <= 9) {
                maxDay = "0" + $datepickerValue.value.max.getDate();
            }
            else {
                maxDay = $datepickerValue.value.max.getDate();
            }
            maxMonth = $datepickerValue.value.max.getMonth();
            maxYear = $datepickerValue.value.max.getFullYear();
            var $monthNamesArray = $language.monthNames.split(",");
            $answer = (minDay + " " + $monthNamesArray[minMonth] + ", " + minYear) +
                " - " +
                (maxDay + " " + $monthNamesArray[maxMonth] + ", " + maxYear);
        }
        return $answer;
    };
    /**
     * @description Formats the single value of the datepicker
     * @param any $datepickerValue: The value of the range selected in the datepicker component,
     * requires a min and max attributes
     * @param string $momentFormat: format string for readable representation
     */
    DateFormatService.prototype.formatSingle = function ($datepickerValue, $momentFormat) {
        var $language = this.findLanguage();
        var $answer = "";
        if ($momentFormat !== undefined && $momentFormat !== null) {
            if (localStorage.getItem("language") === undefined || localStorage.getItem("language") === null) {
                localStorage.setItem("language", "en_US");
            }
            moment.updateLocale(localStorage.language, this.currentLanguageConfig);
            return moment($datepickerValue.value.min).locale(localStorage.language).format($momentFormat);
        }
        else if (this.formatter != undefined) {
            $answer = this.formatter.formatDateTimeMoment($datepickerValue.value.min, $language.languageISO, $language.formatDate);
        }
        else {
            var day = void 0;
            var month = void 0;
            var year = void 0;
            if ($datepickerValue.value.min.getDate() <= 9) {
                day = "0" + $datepickerValue.value.min.getDate();
            }
            else {
                day = $datepickerValue.value.min.getDate();
            }
            month = $datepickerValue.value.min.getMonth();
            year = $datepickerValue.value.min.getFullYear();
            var $monthNamesArray = $language.monthNames.split(",");
            $answer = (day + " " + $monthNamesArray[month] + ", " + year);
        }
        return $answer;
    };
    /**
     * @description Looks for the language object in the languages structure
     * @returns any: The language found
     */
    DateFormatService.prototype.findLanguage = function () {
        var $storedLanguage = localStorage.getItem("language");
        var $languageToUse = {
            authorLanguage: "Fabritzio Villegas",
            countryCode: "US",
            currencyFormat: "%u%n",
            currencyName: "dollar",
            currencySymbol: "$",
            currencySymbolFloat: "left",
            dayNames: "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
            decimalNumbers: 2,
            decimalSeparator: ".",
            formatDate: "MMM D, YYYY",
            formatTime: "hh:mm A",
            languageCountry: "United States",
            languageISO: "en-US",
            languageId: 8,
            languageName: "English US",
            monthNames: "January,February,March,April,May,June,July,August,September,October,November,December",
            textFloat: "left",
            thousandSeparator: ",",
        };
        if (this.languagesList != undefined && $storedLanguage != undefined) {
            this.languagesList.forEach(function ($language) {
                if ($language.languageISO === $storedLanguage ||
                    $language.countryCode.toLowerCase() === $storedLanguage.toLowerCase() ||
                    $language.languageISO.includes($storedLanguage)) {
                    $languageToUse = $language;
                }
            });
        }
        return $languageToUse;
    };
    DateFormatService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    DateFormatService.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Inject, args: ["TRANSLATION_LANGUAGES",] }, { type: Optional },] },
        { type: FormatterService, decorators: [{ type: Optional },] },
    ]; };
    return DateFormatService;
}());
export { DateFormatService };
//# sourceMappingURL=date-format.service.js.map