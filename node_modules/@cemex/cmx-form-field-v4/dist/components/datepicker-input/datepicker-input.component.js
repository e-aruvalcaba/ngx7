import { Component, ElementRef, forwardRef, EventEmitter, Input, Output, Renderer, ViewChild, Inject, Optional, HostListener, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { DatepickerInputTags } from "./../../models";
import { DateFormatService } from "./../../services";
export var CMX_DATEPICKERINPUT_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return DatepickerInputComponent; }),
};
var DatepickerInputComponent = /** @class */ (function () {
    function DatepickerInputComponent(isRTL, tagsProviderValue, renderer, elementRef, formatter) {
        this.isRTL = isRTL;
        this.tagsProviderValue = tagsProviderValue;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.formatter = formatter;
        this.title = "";
        this.placeholder = "";
        this.singleDateSelection = false;
        this.select = new EventEmitter();
        this.dayClicked = new EventEmitter();
        this.cancel = new EventEmitter();
        this.datepickerTextValue = "";
        this.showDatepicker = false;
        this.resetFlag = true;
        this._disabled = false;
        this._rtl = false;
        // ============================================================================================
        // control value accessor methods
        // ============================================================================================
        this.propagateChange = function (value) {
            //
        };
        this.propagateTouch = function () {
            //
        };
        if (isRTL != undefined) {
            this.rtl = isRTL;
        }
    }
    Object.defineProperty(DatepickerInputComponent.prototype, "rtl", {
        get: function () {
            return this._rtl;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._rtl = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function ($param) {
            if ($param !== undefined && $param !== null) {
                this._value = $param;
                this.propagateChange(this._value);
                this.propagateTouch();
                this.datepickerValue = { value: {} };
                if (this._value.min && this._value.max) {
                    if (String(this._value.min) !== String(this._value.max)) {
                        this.datepickerValue.value = this._value;
                        this.datepickerValue.isRange = true;
                    }
                    else {
                        this.datepickerValue.value.min = this._value.min;
                        this.datepickerValue.value.max = this._value.max;
                        this.datepickerValue.isRange = false;
                    }
                }
                else {
                    this.datepickerValue.value.min = this._value;
                    this.datepickerValue.value.max = this._value;
                    this.datepickerValue.isRange = false;
                }
                this.setPlaceholder();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function ($value) {
            if ($value !== undefined && $value !== null) {
                this._disabled = $value;
                if (this._disabled) {
                    // is disabled
                    this.renderer.setElementClass(this.elementRef.nativeElement, "--disabled", true);
                }
                else {
                    // is not disabled
                    this.renderer.setElementClass(this.elementRef.nativeElement, "--disabled", false);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "tags", {
        get: function () {
            return this._tags;
        },
        set: function ($value) {
            if ($value != undefined && $value instanceof DatepickerInputTags) {
                this._tags = $value;
                if (this._tags.datepickerTags.momentFormat) {
                    this.formatter.currentLanguageConfig = {
                        months: this._tags.datepickerTags.months,
                        monthsShort: this._tags.datepickerTags.monthsShort,
                        weekdays: this._tags.datepickerTags.daysLong,
                        weekdaysMin: this._tags.datepickerTags.daysMin,
                        weekdaysShort: this._tags.datepickerTags.daysShort,
                    };
                    this.formatter.currentLanguageConfig.secondShort = "s";
                    this.formatter.currentLanguageConfig.minuteShort = "m";
                    this.formatter.currentLanguageConfig.hourShort = "h";
                    this.setPlaceholder();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "startWeekWith", {
        get: function () {
            return this._startWeekWith;
        },
        set: function ($value) {
            if ($value !== undefined && $value !== null) {
                this._startWeekWith = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "forbiddenWeekDays", {
        get: function () {
            return this._forbiddenWeekDays;
        },
        set: function ($value) {
            if ($value !== undefined) {
                this._forbiddenWeekDays = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatepickerInputComponent.prototype, "disabledDates", {
        get: function () {
            return this._disabledDates;
        },
        set: function ($value) {
            if ($value !== undefined) {
                this._disabledDates = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    DatepickerInputComponent.prototype.onKeydownEscape = function () {
        if (this.showDatepicker) {
            this.toggle();
        }
    };
    DatepickerInputComponent.prototype.onKeydownEnter = function () {
        if (this.showDatepicker && this._selectedValue !== undefined) {
            this.setSelection(this._selectedValue);
        }
    };
    DatepickerInputComponent.prototype.ngOnInit = function () {
        if (this.tagsProviderValue != undefined && this.tags == undefined) {
            var newTags = new DatepickerInputTags(this.tagsProviderValue.placeholder, this.tagsProviderValue.cancel, this.tagsProviderValue.apply);
            this.tags = newTags;
        }
        this.initializePlaceholder();
    };
    DatepickerInputComponent.prototype.writeValue = function ($value) {
        if ($value !== undefined) {
            this.value = $value;
        }
    };
    DatepickerInputComponent.prototype.registerOnChange = function ($fn) {
        this.propagateChange = $fn;
    };
    DatepickerInputComponent.prototype.registerOnTouched = function ($fn) {
        this.propagateTouch = $fn;
    };
    DatepickerInputComponent.prototype.setDisabledState = function ($isDisabled) {
        this.disabled = $isDisabled;
    };
    // ============================================================================================
    // datepicker manipulation
    // ============================================================================================
    DatepickerInputComponent.prototype.resetDatepicker = function () {
        this._value = undefined;
        this.resetFlag = true;
        this.initializePlaceholder();
    };
    DatepickerInputComponent.prototype.keypressCatcher = function ($event) {
        $event.preventDefault();
        this.datepickerTextValue = "";
        return false;
    };
    DatepickerInputComponent.prototype.toggle = function () {
        var _this = this;
        if (this.disabled === false) {
            this.showDatepicker = !this.showDatepicker;
            if (this.showDatepicker) {
                setTimeout(function () {
                    _this.datepickerComponent.forbiddenWeekDays = _this.forbiddenWeekDays;
                    _this.datepickerComponent.disabledDates = _this.disabledDates;
                    // set value so 'calculateDays' method gets called and re-renders all days.
                    _this.datepickerComponent.value = _this.value;
                    if (_this.resetFlag && _this._value === undefined) {
                        _this.datepickerComponent.reset();
                        _this.resetFlag = false;
                    }
                    _this.isInsideViewport();
                }, 10);
            }
        }
    };
    DatepickerInputComponent.prototype.stopTouchScroll = function (event) {
        event.stopPropagation();
        event.preventDefault();
    };
    DatepickerInputComponent.prototype.disableToggle = function ($event) {
        $event.stopPropagation();
    };
    DatepickerInputComponent.prototype.cancelSelection = function () {
        this.cancel.emit();
        this.showDatepicker = false;
    };
    DatepickerInputComponent.prototype.setSelection = function ($event) {
        this.toggle();
        this.value = ($event.isRange) ? $event.value : $event.value.min;
        this.select.emit($event);
    };
    DatepickerInputComponent.prototype.notifyDayWasClicked = function ($event) {
        this._selectedValue = $event;
        this.dayClicked.emit($event);
    };
    DatepickerInputComponent.prototype.initializePlaceholder = function () {
        if (this.placeholder == undefined || this.placeholder === "") {
            this.placeholder = (this.tags != undefined && this.tags.placeholder != undefined) ? this.tags.placeholder : "";
        }
    };
    DatepickerInputComponent.prototype.isInsideViewport = function () {
        var sidePositioner = this.rtl ? "right" : "left";
        // clearing
        this.renderer.setElementStyle(this.datepickerPositioner.nativeElement, sidePositioner, undefined);
        this.renderer.setElementStyle(this.datepickerPositioner.nativeElement, "top", undefined);
        // calculations
        var rect = this.datepickerPositioner.nativeElement.getBoundingClientRect();
        var screenHeight = window.innerHeight;
        var screenWidth = window.innerWidth;
        var adjustment = 20;
        if (this.rtl) {
            if (rect.left < 0) {
                var pxValue = Math.abs(rect.left);
                this.renderer.setElementStyle(this.datepickerPositioner.nativeElement, sidePositioner, (-1 * pxValue) + "px");
            }
        }
        else {
            if (rect.right > screenWidth) {
                // move to the left
                var pxValue = Math.abs(rect.right - screenWidth) + adjustment;
                this.renderer.setElementStyle(this.datepickerPositioner.nativeElement, sidePositioner, (-1 * pxValue) + "px");
            }
        }
        if (rect.bottom > screenHeight) {
            // move to the top
            var pxValue = Math.abs(rect.bottom - screenHeight);
            this.renderer.setElementStyle(this.datepickerPositioner.nativeElement, "top", (-1 * pxValue) + "px");
        }
    };
    /**
     * @description Formats the datepicker´s value to a readable string
     */
    DatepickerInputComponent.prototype.setPlaceholder = function () {
        var momentFormat = (this.tags != undefined) ? this.tags.datepickerTags.momentFormat : undefined;
        if (this.datepickerValue && this.datepickerValue.isRange === true) {
            this.placeholder = this.formatter.formatRange(this.datepickerValue, momentFormat);
        }
        else if (this.datepickerValue && this.datepickerValue.isRange === false) {
            this.placeholder = this.formatter.formatSingle(this.datepickerValue, momentFormat);
        }
    };
    DatepickerInputComponent.decorators = [
        { type: Component, args: [{
                    providers: [
                        CMX_DATEPICKERINPUT_VALUE_ACCESSOR,
                    ],
                    selector: "datepicker-input",
                    styles: ["\n      :host {\n        position: relative;\n        display: block;\n      }\n\n      :host.--disabled {\n        cursor: not-allowed;\n      }\n\n      :host.--disabled .datepicker-input__toggler {\n        cursor: not-allowed;\n      }\n\n      .datepicker-positioner {\n        z-index: 98;\n        position: absolute;\n        top: 100%;\n        display: block;\n        box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n        -webkit-box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n        -moz-box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n      }\n\n      .datepicker-icon {\n        float: right;\n        margin-right: 12px;\n        color: #3FA9F5;\n        font-family: \"Roboto\", \"sans serif\";\n        font-size: large;\n        margin-top: -32px;\n        position: relative;\n        background: white;\n        padding-left: 11px;\n      }\n\n      .datepicker-icon-rtl {\n        float: left;\n        margin-left: 12px;\n        color: #3FA9F5;\n        font-family: \"Roboto\", \"sans serif\";\n        font-size: large;\n        margin-top: -32px;\n        position: relative;\n        background: white;\n        padding-right: 11px;\n      }\n\n      .datepicker-mask {\n        z-index: 10;\n        opacity: 0;\n        background: none;\n        position: fixed;\n        width: 100vw;\n        height: 100vh;\n        top: 0;\n        left: 0;\n        display: block;\n        cursor: default;\n      }\n\n      @media only screen and (max-width: 415px) {\n        .datepicker-mask {\n          opacity: 0.8;\n          background: #000;\n        }\n\n        .datepicker-positioner {\n          position: fixed;\n          top: calc(50vh - 145px);\n          left: calc(50vw - 160px);\n        }\n      }\n\n      .datepicker-input__toggler {\n        height: 48px;\n        margin-bottom: -48px;\n        z-index: 9;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .datepicker-input__input {\n        z-index: 10;\n      }\n\n      .--black-placeholder:disabled::-webkit-input-placeholder {\n        color: #000;\n      }\n\n      .--black-placeholder:disabled:-moz-placeholder {\n        color: #000;\n      }\n\n      .--black-placeholder:disabled::-moz-placeholder {\n        color: #000;\n      }\n\n      .--black-placeholder:disabled:-ms-input-placeholder {\n        color: #000;\n      }\n    "],
                    template: "\n      <div class=\"datepicker-input__toggler\" (click)=\"toggle()\">\n      </div>\n      <input class=\"cmx-form-group datepicker-input__input\" type=\"text\" [class.--black-placeholder]=\"value\" [placeholder]=\"placeholder\"\n      (input)=\"keypressCatcher($event)\" [(ngModel)]=\"datepickerTextValue\">\n      <ng-content select=\"span.error-message\"></ng-content>\n      <div #datepickerPositioner class=\"datepicker-positioner\" *ngIf=\"showDatepicker\" (click)=\"disableToggle( $event )\">\n          <cmx-datepicker #cmxDatepickerComponent [value]=\"value\" [max]=\"max\" [min]=\"min\" [rtl]=\"rtl\"\n          [singleDateSelection]=\"singleDateSelection\"\n          (dayClicked)=\"notifyDayWasClicked($event)\" (select)=\"setSelection($event)\"\n          (cancel)=\"cancelSelection()\" [tags]=\"tags.datepickerTags\" [startWeekWith]=\"startWeekWith\" (touchmove)=\"stopTouchScroll($event)\"></cmx-datepicker>\n      </div>\n      <div [ngClass]=\"{ 'datepicker-icon': !rtl, 'datepicker-icon-rtl' : rtl }\">\n          <span class=\"cmx-icon-calendar\"></span>\n      </div>\n      <div class=\"datepicker-mask\" (touchmove)=\"stopTouchScroll($event)\" *ngIf=\"showDatepicker\" (click)=\"toggle()\"></div>\n    ",
                },] },
    ];
    /** @nocollapse */
    DatepickerInputComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: ["RTL",] },] },
        { type: DatepickerInputTags, decorators: [{ type: Optional }, { type: Inject, args: ["CMX_DATEPICKER_INPUT_TAGS",] },] },
        { type: Renderer, },
        { type: ElementRef, },
        { type: DateFormatService, },
    ]; };
    DatepickerInputComponent.propDecorators = {
        'title': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'max': [{ type: Input },],
        'min': [{ type: Input },],
        'singleDateSelection': [{ type: Input },],
        'rtl': [{ type: Input },],
        'value': [{ type: Input },],
        'disabled': [{ type: Input },],
        'tags': [{ type: Input },],
        'startWeekWith': [{ type: Input },],
        'forbiddenWeekDays': [{ type: Input },],
        'disabledDates': [{ type: Input },],
        'select': [{ type: Output },],
        'dayClicked': [{ type: Output },],
        'cancel': [{ type: Output },],
        'datepickerPositioner': [{ type: ViewChild, args: ["datepickerPositioner",] },],
        'datepickerComponent': [{ type: ViewChild, args: ["cmxDatepickerComponent",] },],
        'onKeydownEscape': [{ type: HostListener, args: ["document:keydown.escape",] },],
        'onKeydownEnter': [{ type: HostListener, args: ["document:keydown.enter",] },],
    };
    return DatepickerInputComponent;
}());
export { DatepickerInputComponent };
//# sourceMappingURL=datepicker-input.component.js.map