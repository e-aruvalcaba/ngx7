import { ChangeDetectorRef, Injector, AfterViewInit, ElementRef } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { Subject } from "rxjs/Subject";
import "rxjs/add/operator/debounceTime";
import "rxjs/add/operator/distinctUntilChanged";
import { Subscription } from "rxjs/Subscription";
import { BasicInput } from "./basic-input";
import { NgAutonumericComponent } from "./autonumeric.component";
export declare type TextAlign = "left" | "right" | "center";
export declare const INPUT_NUMBER_VALUE_ACCESSOR: any;
export declare class NumberInputComponent extends BasicInput implements ControlValueAccessor, AfterViewInit {
    private ref;
    injector: Injector;
    autoElement: NgAutonumericComponent;
    min: number;
    max: number;
    step: number;
    value: any;
    rtl: boolean;
    thousandSeparator: any;
    decimalSeparator: any;
    decimalNumber: number;
    disabled: boolean;
    align: TextAlign;
    hideControls: boolean;
    prefix: string;
    suffix: string;
    valueChanged: Subject<number>;
    subscription: Subscription;
    minPassed: Subject<number>;
    minSubscription: Subscription;
    formatValueSubj: Subject<number>;
    formatSub: Subscription;
    _value: any;
    _max: number;
    _thousandSeparator: string;
    _decimalSeparator: string;
    defaultConfig: any;
    private _numberValue;
    private _decimalNumber;
    private control;
    private _min;
    private _disabled;
    constructor(ref: ChangeDetectorRef, injector: Injector, element: ElementRef);
    onChange: any;
    onTouched: any;
    writeValue(value: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    touched(): void;
    setDisabledState(value: boolean): void;
    onChangeValue(value: any): void;
    increaseValue(): void;
    decreaseValue(): void;
    propagateChange: (value: any) => void;
    propagateTouch: () => any;
    ngAfterViewInit(): void;
    fakeValidator(activate: boolean): void;
    private resetValidatorsMinMax;
}
