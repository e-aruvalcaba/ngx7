import { Component, Input, ViewChild, ChangeDetectorRef, forwardRef, Renderer } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
export var TIME_INPUT_VALUE_ACCESSOR = {
    multi: true,
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return TimeInputComponent; }),
};
var TimeInputComponent = /** @class */ (function () {
    function TimeInputComponent(ref, renderer) {
        this.ref = ref;
        this.renderer = renderer;
        // @Input() public value: Date = new Date();
        this.is24Period = false;
        this.showTimeInput = false;
        this.timePickerTxt = "";
        this._placeholder = "";
        this.regex = new RegExp(/^\d+$/);
        this.specialKeys = ["Backspace", "Tab", "End", "Home", "Control", "F5"];
        this._hoursKeysCount = 0;
        this._minutesKeysCount = 0;
        this._rtl = false;
        this._value = new Date();
        this._hourStep = 1;
        this._minuteStep = 1;
        this.propagateChange = function (value) {
            //
        };
        this.propagateTouch = function () {
            //
        };
        if (this._placeholder === "") {
            this._placeholder = "Select Request Time";
        }
    }
    Object.defineProperty(TimeInputComponent.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._value = $value;
                this.propagateChange($value);
                this.propagateTouch();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInputComponent.prototype, "rtl", {
        get: function () {
            return this._rtl;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._rtl = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInputComponent.prototype, "placeholder", {
        get: function () {
            return this._placeholder;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._placeholder = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInputComponent.prototype, "hourStep", {
        get: function () {
            return this._hourStep;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._hourStep = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TimeInputComponent.prototype, "minuteStep", {
        get: function () {
            return this._minuteStep;
        },
        set: function ($value) {
            if ($value != undefined) {
                this._minuteStep = $value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @description Registers the control's value.
     * @param {any} $value Value given to the cmx-select.
     */
    TimeInputComponent.prototype.writeValue = function ($value) {
        if ($value != undefined) {
            this._value = $value;
        }
    };
    /**
     * @description Registers a callback function to be invoked when the control's value changes from user input.
     * @param {any} $fn Function that the change event will execute.
     */
    TimeInputComponent.prototype.registerOnChange = function ($fn) {
        this.propagateChange = $fn;
    };
    /**
     * @description Registers a callback function to be invoked when the control is blurred by the user.
     * @param {any} $fn Function that the touched event will execute.
     */
    TimeInputComponent.prototype.registerOnTouched = function ($fn) {
        this.propagateTouch = $fn;
    };
    // hours
    TimeInputComponent.prototype.hours_onClick = function (e) {
        this._hoursKeysCount = 0;
        setTimeout(function () {
            e.target.select();
        });
    };
    TimeInputComponent.prototype.hours_onFocus = function (e) {
        e.target.select();
        this._hoursKeysCount = 0;
    };
    TimeInputComponent.prototype.hours_onBlur = function (e) {
        this._hoursKeysCount = 0;
    };
    TimeInputComponent.prototype.hours_onKeyDown = function (e) {
        var _this = this;
        if (e.key === "ArrowLeft") {
            return false;
        }
        else if (e.key === "ArrowRight") {
            setTimeout(function () {
                _this._minutesElement.nativeElement.focus();
            });
        }
        else if (e.key === "ArrowDown") {
            this.changeHour(false);
        }
        else if (e.key === "ArrowUp") {
            this.changeHour(true);
        }
        else {
            var key = e.key.replace(/\s/g, "");
            if (this.specialKeys.indexOf(key) !== -1) {
                if (key === "Backspace") {
                    this._hoursKeysCount = 0;
                }
                return;
            }
            var current = e.target.value;
            // we need this because the current value on the DOM element
            // is not yet updated with the value from this event
            var next = current.concat(key);
            next = next.replace("--", "");
            if (next && !String(next).match(this.regex)) {
                e.preventDefault();
            }
            else {
                this._hoursKeysCount++;
                // go to minutes, cuz havent 30s hours..
                if (key >= 3) {
                    setTimeout(function () {
                        _this._minutesElement.nativeElement.focus();
                    });
                    return true;
                }
                // go to minutes, cuz the hour is complete
                if (this._hoursKeysCount === 2) {
                    setTimeout(function () {
                        _this._minutesElement.nativeElement.focus();
                    });
                    return true;
                }
            }
        }
    };
    TimeInputComponent.prototype.toggle = function () {
        var _this = this;
        this.showTimeInput = !this.showTimeInput;
        setTimeout(function () {
            _this.isInsideViewport();
        }, 60);
        this.updatePlaceholder();
    };
    Object.defineProperty(TimeInputComponent.prototype, "hours", {
        get: function () {
            if (this.value === undefined) {
                return "--";
            }
            var hours;
            if (this.is24Period) {
                hours = this.value.getHours();
            }
            else {
                if (this.value.getHours() > 12) {
                    hours = this.value.getHours() - 12;
                }
                else {
                    if (this.value.getHours() === 0) {
                        return 12;
                    }
                    else {
                        hours = this.value.getHours();
                    }
                }
            }
            if (+hours < 10) {
                hours = "0" + (+hours);
            }
            return hours;
        },
        set: function (hours) {
            if (hours >= 24) {
                hours = 23;
            }
            if (this.value === undefined) {
                this.value = new Date();
            }
            // temporal hack
            if (+hours === 0) {
                this.value.setHours(1);
            }
            else {
                this.value.setHours(0);
            }
            this.ref.detectChanges();
            this.value.setHours(hours);
        },
        enumerable: true,
        configurable: true
    });
    // minutes
    TimeInputComponent.prototype.minutes_onClick = function (e) {
        this._minutesKeysCount = 0;
        setTimeout(function () {
            e.target.select();
        });
    };
    TimeInputComponent.prototype.minutes_onFocus = function (e) {
        e.target.select();
        this._minutesKeysCount = 0;
    };
    TimeInputComponent.prototype.minutes_onBlur = function (e) {
        this._minutesKeysCount = 0;
    };
    TimeInputComponent.prototype.minutes_onKeyDown = function (e) {
        var _this = this;
        if (e.key === "ArrowLeft") {
            setTimeout(function () {
                _this._hoursElement.nativeElement.focus();
            });
        }
        else if (e.key === "ArrowRight") {
            if (!this.is24Period) {
                setTimeout(function () {
                    _this._periodElement.nativeElement.focus();
                });
            }
        }
        else if (e.key === "ArrowDown") {
            this.changeminute(false);
        }
        else if (e.key === "ArrowUp") {
            this.changeminute(true);
        }
        else {
            var key = e.key.replace(/\s/g, "");
            if (this.specialKeys.indexOf(key) !== -1) {
                if (key === "Backspace") {
                    this._minutesKeysCount = 0;
                }
                return;
            }
            var current = e.target.value;
            // we need this because the current value on the DOM element
            // is not yet updated with the value from this event
            var next = current.concat(key);
            if (next && !String(next).match(this.regex)) {
                e.preventDefault();
            }
            else {
                this._minutesKeysCount++;
                // go to minutes, cuz havent 30s hours..
                if (key >= 6) {
                    if (!this.is24Period) {
                        setTimeout(function () {
                            _this._periodElement.nativeElement.focus();
                        });
                    }
                    return true;
                }
                // go to period, cuz the minutes is complete
                if (this._minutesKeysCount === 2) {
                    if (!this.is24Period) {
                        setTimeout(function () {
                            _this._periodElement.nativeElement.focus();
                        });
                    }
                    return true;
                }
            }
        }
    };
    Object.defineProperty(TimeInputComponent.prototype, "minutes", {
        get: function () {
            if (this.value === undefined) {
                return "--";
            }
            var minutes;
            minutes = this.value.getMinutes();
            if (+minutes < 10) {
                minutes = "0" + (+minutes);
            }
            return minutes;
        },
        set: function (minutes) {
            // get the last 2 digits, only works for 24hours period
            if (minutes.length >= 3) {
                minutes = minutes.substring(minutes.length - 2, minutes.length);
            }
            if (minutes >= 60) {
                minutes = 59;
            }
            if (this.value === undefined) {
                this.value = new Date();
            }
            if (+minutes === 0) {
                this.value.setMinutes(1);
            }
            else {
                this.value.setMinutes(0);
            }
            this.ref.detectChanges();
            this.value.setMinutes(minutes);
        },
        enumerable: true,
        configurable: true
    });
    // period
    TimeInputComponent.prototype.onPaste = function (e) {
        e.preventDefault();
    };
    TimeInputComponent.prototype.keypressCatcher = function ($event) {
        $event.preventDefault();
        this.timePickerTxt = "";
        return false;
    };
    TimeInputComponent.prototype.hours_arrowUp = function () {
        this.changeHour(true);
    };
    TimeInputComponent.prototype.hours_arrowDown = function () {
        this.changeHour(false);
    };
    TimeInputComponent.prototype.minutes_arrowUp = function () {
        this.changeminute(true);
    };
    TimeInputComponent.prototype.minutes_arrowDown = function () {
        this.changeminute(false);
    };
    TimeInputComponent.prototype.tooglePeriod = function () {
        if (this.period === "AM") {
            this.value.setHours(this.value.getHours() + 12);
        }
        else if (this.period === "PM") {
            this.value.setHours(this.value.getHours() - 12);
        }
    };
    Object.defineProperty(TimeInputComponent.prototype, "period", {
        get: function () {
            if (this.value === undefined) {
                return "--";
            }
            return this.value.getHours() >= 12 ? "PM" : "AM";
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {boolean} $p true to increase, false to decrease value
     */
    TimeInputComponent.prototype.changeHour = function (p) {
        if (p) {
            this.value.setHours(this.value.getHours() + this.hourStep);
        }
        else {
            this.value.setHours(this.value.getHours() - this.hourStep);
        }
        this._hoursKeysCount = 0;
        this.updatePlaceholder();
    };
    /**
     * @param {boolean} $p true to increase, false to decrease value
     */
    TimeInputComponent.prototype.changeminute = function (p) {
        if (p) {
            this.value.setMinutes(this.value.getMinutes() + this.minuteStep);
        }
        else {
            this.value.setMinutes(this.value.getMinutes() - this.minuteStep);
        }
        this._hoursKeysCount = 0;
        this.updatePlaceholder();
    };
    TimeInputComponent.prototype.disableToggle = function ($event) {
        $event.stopPropagation();
    };
    TimeInputComponent.prototype.period_onClick = function (e) {
        setTimeout(function () {
            e.target.select();
        });
    };
    TimeInputComponent.prototype.period_onFocus = function (e) {
        e.target.select();
    };
    TimeInputComponent.prototype.period_onKeyDown = function (e) {
        // let key = e.key;
        var _this = this;
        if (this.specialKeys.indexOf(e.key) !== -1) {
            return;
        }
        if (e.key === "ArrowLeft") {
            setTimeout(function () {
                _this._minutesElement.nativeElement.focus();
            });
        }
        else if (e.key === "ArrowRight") {
            return false;
        }
        else {
            if (this.value === undefined) {
                this.value = new Date();
            }
            if (e.key === "ArrowUp" || e.key === "ArrowDown") {
                this.tooglePeriod();
            }
            if (e.key.toLowerCase() === "a" || e.key.toLowerCase() === "p") {
                if (this.period === "AM" && e.key.toLowerCase() === "p") {
                    this.value.setHours(this.value.getHours() + 12);
                }
                else if (this.period === "PM" && e.key.toLowerCase() === "a") {
                    this.value.setHours(this.value.getHours() - 12);
                }
            }
            setTimeout(function () {
                e.target.select();
            });
            return false;
        }
    };
    TimeInputComponent.prototype.updatePlaceholder = function () {
        this.placeholder = !this.is24Period ?
            this.hours + ":" + this.minutes + " " + this.period :
            this.hours + ":" + this.minutes;
    };
    TimeInputComponent.prototype.isInsideViewport = function () {
        var sidePositioner = this.rtl ? "right" : "left";
        // clearing
        this.renderer.setElementStyle(this.timeInputPositioner.nativeElement, sidePositioner, undefined);
        this.renderer.setElementStyle(this.timeInputPositioner.nativeElement, "top", undefined);
        // calculations
        var rect = this.timeInputPositioner.nativeElement.getBoundingClientRect();
        var screenHeight = window.innerHeight;
        var screenWidth = window.innerWidth;
        var adjustment = 20;
        if (this.rtl) {
            if (rect.left < 0) {
                var pxValue = Math.abs(rect.left);
                this.renderer.setElementStyle(this.timeInputPositioner.nativeElement, sidePositioner, (-1 * pxValue) + "px");
            }
        }
        else {
            if (rect.right > screenWidth) {
                // move to the left
                var pxValue = Math.abs(rect.right - screenWidth) + adjustment;
                this.renderer.setElementStyle(this.timeInputPositioner.nativeElement, sidePositioner, (-1 * pxValue) + "px");
            }
        }
        if (rect.bottom > screenHeight) {
            // move to the top
            var pxValue = Math.abs(rect.bottom - screenHeight);
            this.renderer.setElementStyle(this.timeInputPositioner.nativeElement, "top", (-1 * pxValue) + "px");
        }
    };
    TimeInputComponent.decorators = [
        { type: Component, args: [{
                    providers: [TIME_INPUT_VALUE_ACCESSOR],
                    selector: "time-input",
                    styles: ["\n      html {\n        font-family: sans-serif;\n        line-height: 1.15;\n        -ms-text-size-adjust: 100%;\n        -webkit-text-size-adjust: 100%;\n      }\n\n      body {\n        margin: 0;\n      }\n\n      footer {\n        display: block;\n      }\n\n      h1 {\n        font-size: 2em;\n        margin: 0.67em 0;\n      }\n\n      a {\n        background-color: transparent;\n        -webkit-text-decoration-skip: objects;\n      }\n\n      a:active,a:hover {\n        outline-width: 0;\n      }\n\n      b {\n        font-weight: inherit;\n      }\n\n      b {\n        font-weight: bolder;\n      }\n\n      sub {\n        font-size: 75%;\n        line-height: 0;\n        position: relative;\n        vertical-align: baseline;\n      }\n\n      sub {\n        bottom: -0.25em;\n      }\n\n      button,input,select,textarea {\n        font-family: sans-serif;\n        font-size: 100%;\n        line-height: 1.15;\n        margin: 0;\n      }\n\n      button,input {\n        overflow: visible;\n      }\n\n      button,select {\n        text-transform: none;\n      }\n\n      button,html [type=\"button\"],[type=\"reset\"],[type=\"submit\"] {\n        -webkit-appearance: button;\n      }\n\n      button::-moz-focus-inner,[type=\"button\"]::-moz-focus-inner,[type=\"reset\"]::-moz-focus-inner,[type=\"submit\"]::-moz-focus-inner {\n        border-style: none;\n        padding: 0;\n      }\n\n      button:-moz-focusring,[type=\"button\"]:-moz-focusring,[type=\"reset\"]:-moz-focusring,[type=\"submit\"]:-moz-focusring {\n        outline: 1px dotted ButtonText;\n      }\n\n      textarea {\n        overflow: auto;\n      }\n\n      [type=\"checkbox\"],[type=\"radio\"] {\n        box-sizing: border-box;\n        padding: 0;\n      }\n\n      [type=\"number\"]::-webkit-inner-spin-button,[type=\"number\"]::-webkit-outer-spin-button {\n        height: auto;\n      }\n\n      [type=\"search\"] {\n        -webkit-appearance: textfield;\n        outline-offset: -2px;\n      }\n\n      [type=\"search\"]::-webkit-search-cancel-button,[type=\"search\"]::-webkit-search-decoration {\n        -webkit-appearance: none;\n      }\n\n      ::-webkit-file-upload-button {\n        -webkit-appearance: button;\n        font: inherit;\n      }\n\n      details {\n        display: block;\n      }\n\n      [hidden] {\n        display: none;\n      }\n\n      html {\n        box-sizing: border-box;\n      }\n\n      *,*::before,*::after {\n        box-sizing: inherit;\n      }\n\n      html {\n        -ms-overflow-style: scrollbar;\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n      }\n\n      body {\n        font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif;\n        font-size: 1rem;\n        font-weight: normal;\n        line-height: 1.5;\n        color: #292b2c;\n        background-color: #fff;\n      }\n\n      [tabindex=\"-1\"]:focus {\n        outline: none !important;\n      }\n\n      h1,h2,h3,h4,h5,h6 {\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n\n      p {\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n\n      dd {\n        margin-bottom: 0;\n        margin-left: 0;\n      }\n\n      a {\n        color: #139DF2;\n        text-decoration: none;\n      }\n\n      a:focus,a:hover {\n        color: #277EAF;\n        text-decoration: underline;\n      }\n\n      a:not([href]):not([tabindex]) {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      a:not([href]):not([tabindex]):focus,a:not([href]):not([tabindex]):hover {\n        color: inherit;\n        text-decoration: none;\n      }\n\n      a:not([href]):not([tabindex]):focus {\n        outline: 0;\n      }\n\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n\n      a,button,[role=\"button\"],input,label,select,textarea {\n        touch-action: manipulation;\n      }\n\n      label {\n        display: inline-block;\n        margin-bottom: .5rem;\n      }\n\n      button:focus {\n        outline: 1px dotted;\n        outline: 5px auto -webkit-focus-ring-color;\n      }\n\n      input,button,select,textarea {\n        line-height: inherit;\n      }\n\n      input[type=\"radio\"]:disabled,input[type=\"checkbox\"]:disabled {\n        cursor: not-allowed;\n      }\n\n      input[type=\"date\"],input[type=\"time\"],input[type=\"datetime-local\"],input[type=\"month\"] {\n        -webkit-appearance: listbox;\n      }\n\n      textarea {\n        resize: vertical;\n      }\n\n      input[type=\"search\"] {\n        -webkit-appearance: none;\n      }\n\n      output {\n        display: inline-block;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        font-family: \"Roboto-Thin\";\n        font-weight: 100;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Light.ttf\");\n        font-weight: 300;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Regular.ttf\");\n        font-weight: 400;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Italic.ttf\");\n        font-weight: 400;\n        font-style: italic;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Medium.ttf\");\n        font-weight: 500;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Bold.ttf\");\n        font-weight: 700;\n      }\n\n      @font-face {\n        font-family: \"Roboto\";\n        src: url(\"https://www.cemexgo.com/cdn/fonts/Roboto-Black.ttf\");\n        font-weight: 800;\n      }\n\n      h1 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: 1.875rem;\n        line-height: 1.875rem;\n        font-weight: 700;\n        color: #001B3A;\n      }\n\n      h2 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: 1.5rem;\n        line-height: 1.5rem;\n        font-weight: 500;\n        color: #001B3A;\n      }\n\n      h3 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: 1.125rem;\n        line-height: 1.125rem;\n        font-weight: 400;\n        color: #001B3A;\n      }\n\n      h4 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: 1rem;\n        line-height: 1rem;\n        font-weight: 400;\n        color: #001B3A;\n      }\n\n      h5 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: .875rem;\n        line-height: 1rem;\n        font-weight: 500;\n        color: #001B3A;\n        text-transform: uppercase;\n      }\n\n      h6 {\n        font-family: \"Roboto\",sans-serif;\n        font-size: .75rem;\n        line-height: 1rem;\n        font-weight: 500;\n        color: #001B3A;\n      }\n\n      a {\n        text-decoration: none;\n        color: #3FA9F5;\n      }\n\n      a:hover {\n        text-decoration: underline;\n        color: #3FA9F5;\n      }\n\n      a:active {\n        text-decoration: underline;\n        color: #003876;\n      }\n\n      a.disabled {\n        text-decoration: none;\n        color: #666;\n        cursor: not-allowed;\n      }\n\n      .input-placeholder {\n        font-family: \"Roboto\",sans-serif;\n        font-size: .875rem;\n        line-height: 1rem;\n        color: #666;\n      }\n\n      .input-text {\n        font-family: \"Roboto\",sans-serif;\n        font-size: .875rem;\n        line-height: 1rem;\n        color: #333;\n      }\n\n      .text-left {\n        text-align: left !important;\n      }\n\n      .text-right {\n        text-align: right !important;\n      }\n\n      .text-center {\n        text-align: center !important;\n      }\n\n      .align-content-end {\n        align-content: flex-end !important;\n      }\n\n      .align-content-center {\n        align-content: center !important;\n      }\n\n      :host {\n        position: relative;\n      }\n\n      :host .timeinput {\n        width: 23px;\n        outline: none;\n        border: none !important;\n        padding: 30px 0 16px 4px !important;\n      }\n\n      .timepicker__input {\n        z-index: 10;\n      }\n\n      .timepicker__toggler {\n        height: 48px;\n        margin-bottom: -48px;\n        z-index: 9;\n        position: relative;\n        cursor: pointer;\n      }\n\n      .timepicker__positioner {\n        z-index: 98;\n        position: absolute;\n        display: inline-block;\n        box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n        -webkit-box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n        -moz-box-shadow: 0 5px 20px rgba(0,0,0,0.14);\n        text-align: center;\n        box-sizing: border-box;\n        -ms-touch-action: manipulation;\n        touch-action: manipulation;\n        background: #fff;\n        box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n        border-top: 3px solid #3fa9f5;\n        padding: .5rem;\n        border-radius: .125rem;\n        left: 0;\n        right: 0;\n      }\n\n      .timepicker__animate {\n        -webkit-animation: fpFadeInDown 0.3s cubic-bezier(0.23, 1, 0.32, 1);\n        animation: fpFadeInDown 0.3s cubic-bezier(0.23, 1, 0.32, 1);\n      }\n\n      .timepicker__time {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        width: auto;\n        -webkit-box-pack: center;\n        -ms-flex-pack: center;\n        justify-content: center;\n        border-top: none;\n      }\n\n      .timepicker__time-num {\n        display: -ms-grid;\n        display: grid;\n        -ms-grid-rows: 24px 1fr 24px;\n        grid-template-rows: 24px 1fr 24px;\n        -ms-grid-columns: 1fr;\n        grid-template-columns: 1fr;\n        -webkit-box-align: center;\n        -ms-flex-align: center;\n        align-items: center;\n      }\n\n      .timepicker__time-num span {\n        opacity: 1;\n      }\n\n      .timepicker__time-num:hover {\n        border-bottom: none;\n      }\n\n      .timepicker__time-separator {\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        -webkit-box-align: center;\n        -ms-flex-align: center;\n        align-items: center;\n        padding: 0 .25rem;\n        margin-top: 13px;\n      }\n\n      .timepicker__time-am-pm {\n        cursor: pointer;\n        margin-left: .40rem;\n        display: grid;\n        grid-template-rows: 32px 1fr 16px;\n        grid-template-columns: 1fr;\n        align-items: center;\n      }\n\n      .timepicker__time-am-pm:hover::before,.timepicker__time-am-pm:hover::after {\n        text-shadow: 0 2px 4px rgba(0,0,0,0.5);\n      }\n\n      .timepicker__time-am-pm::before,.timepicker__time-am-pm::after {\n        font-family: dls-icons !important;\n        content: \"\\E924\";\n        font-size: 1rem;\n        line-height: 0.5rem;\n        padding: 0.25rem 0;\n        display: block;\n        height: 16px;\n        color: #3FA9F5;\n      }\n\n      .timepicker__time-am-pm::after {\n        content: \"\\E925\";\n      }\n\n      .timepicker__mask {\n        z-index: 10;\n        opacity: 0;\n        background: black;\n        position: fixed;\n        width: 100vw;\n        height: 100vh;\n        top: 0;\n        left: 0;\n        display: block;\n        cursor: default;\n      }\n\n      .timepicker__icon {\n        float: right;\n        margin-right: 12px;\n        color: #3FA9F5;\n        font-family: \"Roboto\", \"sans serif\";\n        font-size: large;\n        margin-top: -32px;\n        position: relative;\n        background: white;\n        padding-left: 11px;\n      }\n\n      .timepicker__icon-rtl {\n        float: left;\n        margin-left: 12px;\n        color: #3FA9F5;\n        font-family: \"Roboto\", \"sans serif\";\n        font-size: large;\n        margin-top: -32px;\n        position: relative;\n        background: white;\n        padding-right: 11px;\n      }\n\n      .arrowUp,.arrowDown {\n        grid-column-start: 1;\n        -ms-grid-row: 1;\n        grid-row-start: 1;\n        font-size: 1rem;\n        line-height: .5rem;\n        padding: .25rem 0;\n        display: block;\n        height: 16px;\n      }\n\n      .arrowDown {\n        grid-row-start: 3;\n      }\n\n      .arrowUp::before,.arrowDown::before {\n        color: #3fa9f5;\n        font-family: dls-icons !important;\n        content: \"\\E924\";\n        font-size: 1rem;\n        line-height: 0.5rem;\n        padding: 0.25rem 0;\n        display: block;\n        height: 16px;\n        color: #3FA9F5;\n      }\n\n      .arrowDown::before {\n        content: \"\\E925\";\n      }\n\n      .arrowUp:hover::before,.arrowDown:hover::before {\n        text-shadow: 0 2px 4px rgba(0,0,0,0.5);\n        cursor: pointer;\n      }\n\n      span[dir=\"rtl\"] {\n        cursor: pointer;\n        margin-left: 0;\n        margin-right: .40rem;\n        align-items: center;\n      }\n\n      @-webkit-keyframes fpFadeInDown {\n        from {\n          opacity: 0;\n          -webkit-transform: translate3d(0, -20px, 0);\n          transform: translate3d(0, -20px, 0);\n        }\n\n        to {\n          opacity: 1;\n          -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n        }\n      }\n\n      @keyframes fpFadeInDown {\n        from {\n          opacity: 0;\n          -webkit-transform: translate3d(0, -20px, 0);\n          transform: translate3d(0, -20px, 0);\n        }\n\n        to {\n          opacity: 1;\n          -webkit-transform: translate3d(0, 0, 0);\n          transform: translate3d(0, 0, 0);\n        }\n      }\n    "],
                    template: "\n      <div class=\"timepicker__toggler\" (click)=\"toggle()\">\n      </div>\n      <input class=\"cmx-form-group timepicker__input\" type=\"text\" [class.--black-placeholder]=\"value\" [placeholder]=\"placeholder\"\n      (input)=\"keypressCatcher($event)\" [(ngModel)]=\"timePickerTxt\" [dir]=\"rtl ? 'rtl': 'ltr'\">\n      <ng-content select=\"span.error-message\"></ng-content>\n      <div #timeInputPositioner class=\"timepicker__positioner timepicker__animate\" *ngIf=\"showTimeInput\">\n          <div class=\"timepicker__time\">\n              <div class=\"timepicker__time-num\">\n                  <span (click)=\"hours_arrowUp()\" class=\"arrowUp\"></span>\n                  <input #hoursElement class=\"timeinput\" type=\"text\"\n                  [(ngModel)]=\"hours\"\n                  (click)=\"hours_onClick($event)\"\n                  (keydown)=\"hours_onKeyDown($event)\"\n                  (focus)=\"hours_onFocus($event)\"\n                  (paste)=\"onPaste($event)\">\n                  <span (click)=\"hours_arrowDown()\" class=\"arrowDown\"></span>\n              </div>\n              <span (click)=\"hours_arrowUp()\" class=\"timepicker__time-separator\">:</span>\n              <div class=\"timepicker__time-num\">\n                  <span (click)=\"minutes_arrowUp()\" class=\"arrowUp\"></span>\n                  <input #minutesElement class=\"timeinput\" type=\"text\"\n                  [(ngModel)]=\"minutes\"\n                  (keydown)=\"minutes_onKeyDown($event)\"\n                  (click)=\"minutes_onClick($event)\"\n                  (focus)=\"minutes_onFocus($event)\"\n                  (blur)=\"minutes_onBlur($event)\"\n                  (paste)=\"onPaste($event)\">\n                  <span (click)=\"minutes_arrowDown()\" class=\"arrowDown\"></span>\n              </div>\n              <span #periodElement (click)=\"tooglePeriod()\" [dir]=\"rtl ? 'rtl': 'ltr'\" *ngIf=\"!is24Period\" class=\"timepicker__time-am-pm\"\n              title=\"Click to toggle\" tabindex=\"-1\">{{ period }}</span>\n          </div>\n      </div>\n      <div [ngClass]=\"{ 'timepicker__icon': !rtl, 'timepicker__icon-rtl' : rtl }\">\n          <span class=\"cmx-icon-clock\"></span>\n      </div>\n      <div class=\"timepicker__mask\" *ngIf=\"showTimeInput\" (click)=\"toggle()\"></div>\n    ",
                },] },
    ];
    /** @nocollapse */
    TimeInputComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef, },
        { type: Renderer, },
    ]; };
    TimeInputComponent.propDecorators = {
        'is24Period': [{ type: Input },],
        'value': [{ type: Input },],
        'rtl': [{ type: Input },],
        'placeholder': [{ type: Input },],
        'hourStep': [{ type: Input },],
        'minuteStep': [{ type: Input },],
        '_hoursElement': [{ type: ViewChild, args: ["hoursElement",] },],
        '_minutesElement': [{ type: ViewChild, args: ["minutesElement",] },],
        '_periodElement': [{ type: ViewChild, args: ["periodElement",] },],
        'timeInputPositioner': [{ type: ViewChild, args: ["timeInputPositioner",] },],
    };
    return TimeInputComponent;
}());
export { TimeInputComponent };
//# sourceMappingURL=time-input.component.js.map