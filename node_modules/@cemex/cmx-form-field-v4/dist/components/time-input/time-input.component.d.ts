import { ElementRef, ChangeDetectorRef, Renderer } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
export declare const TIME_INPUT_VALUE_ACCESSOR: any;
export declare class TimeInputComponent implements ControlValueAccessor {
    private ref;
    private renderer;
    is24Period: boolean;
    value: Date;
    rtl: boolean;
    placeholder: string;
    hourStep: number;
    minuteStep: number;
    _hoursElement: ElementRef;
    _minutesElement: ElementRef;
    _periodElement: ElementRef;
    showTimeInput: boolean;
    timePickerTxt: string;
    private _placeholder;
    private regex;
    private specialKeys;
    private timeInputPositioner;
    private _hoursKeysCount;
    private _minutesKeysCount;
    private _rtl;
    private _value;
    private _hourStep;
    private _minuteStep;
    constructor(ref: ChangeDetectorRef, renderer: Renderer);
    propagateChange: (value: any) => void;
    propagateTouch: () => any;
    /**
     * @description Registers the control's value.
     * @param {any} $value Value given to the cmx-select.
     */
    writeValue($value: Date): void;
    /**
     * @description Registers a callback function to be invoked when the control's value changes from user input.
     * @param {any} $fn Function that the change event will execute.
     */
    registerOnChange($fn: any): void;
    /**
     * @description Registers a callback function to be invoked when the control is blurred by the user.
     * @param {any} $fn Function that the touched event will execute.
     */
    registerOnTouched($fn: any): void;
    hours_onClick(e: any): void;
    hours_onFocus(e: any): void;
    hours_onBlur(e: any): void;
    hours_onKeyDown(e: any): boolean | undefined;
    toggle(): void;
    hours: any;
    minutes_onClick(e: any): void;
    minutes_onFocus(e: any): void;
    minutes_onBlur(e: any): void;
    minutes_onKeyDown(e: any): true | undefined;
    minutes: any;
    onPaste(e: any): void;
    keypressCatcher($event: Event): boolean;
    hours_arrowUp(): void;
    hours_arrowDown(): void;
    minutes_arrowUp(): void;
    minutes_arrowDown(): void;
    tooglePeriod(): void;
    readonly period: string;
    /**
     * @param {boolean} $p true to increase, false to decrease value
     */
    private changeHour;
    /**
     * @param {boolean} $p true to increase, false to decrease value
     */
    private changeminute;
    private disableToggle;
    private period_onClick;
    private period_onFocus;
    private period_onKeyDown;
    private updatePlaceholder;
    private isInsideViewport;
}
