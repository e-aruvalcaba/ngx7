import { AfterContentInit, OnDestroy, EventEmitter, Renderer, ElementRef, QueryList } from "@angular/core";
import { ControlValueAccessor } from "@angular/forms";
import { CmxOptionComponent } from "./../cmx-option";
export declare const CMX_SELECT_VALUE_ACCESSOR: any;
export interface ICmxSelectTexts {
    searchEmptyResult: string;
}
export declare class CmxSelectComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    private renderer;
    elRef: ElementRef;
    value: any;
    disabled: boolean;
    placeholder: string;
    texts: ICmxSelectTexts;
    search: boolean;
    searchPlaceholder: string;
    rtl: boolean;
    forceTop: boolean;
    valueChange: EventEmitter<any>;
    optionsQueryList: QueryList<CmxOptionComponent>;
    showOptions: boolean;
    viewportHeight: number;
    searchValue: string;
    _rtl: boolean;
    _forceTop: boolean;
    resultsCount: number;
    private selectedValues;
    private itemsPositioner;
    private childHeight;
    private selectedOption;
    private selectedOptions;
    private originalPlaceholder;
    private _value;
    private _placeholder;
    private _disabled;
    private _search;
    private _searchPlaceholder;
    private optionsChangesSubscription;
    private optionsSubscriptions;
    private _texts;
    private _selectedItem;
    private _isMultipleSelect;
    constructor(renderer: Renderer, elRef: ElementRef);
    onHover(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    propagateChange: (value: any) => void;
    propagateTouch: () => any;
    /**
     * @description Registers the control's value.
     * @param {any} $value Value given to the cmx-select.
     */
    writeValue($value: any): void;
    /**
     * @description Registers a callback function to be invoked when the control's value changes from user input.
     * @param {any} $fn Function that the change event will execute.
     */
    registerOnChange($fn: any): void;
    /**
     * @description Registers a callback function to be invoked when the control is blurred by the user.
     * @param {any} $fn Function that the touched event will execute.
     */
    registerOnTouched($fn: any): void;
    /**
     * @description Registers the disabled state to the form control.
     * @param {boolean} $isDisabled Value that determines if the control will be disabled.
     */
    setDisabledState($isDisabled: boolean): void;
    toggleOptions(): void;
    /**
     * @description Sets the selected option
     * @param {string} $event Value given to the control.
     */
    filterSelectOptions($event: string): void;
    open(event: any): void;
    close($event: Event): void;
    private UpdateValues;
    /**
     * @description Sets the selected option based on a value.
     * If no option can be found with the designated value, the select trigger is cleared.
     * @param {any} $value Value given to the control.
     */
    private setSelectionByValue;
    private selectOption;
    private listenToOptions;
    private firstListenToOptions;
    /**
     * @description When a new option is selected, deselects the others and closes the panel.
     * @param {CmxOptionComponent} $option Reference of a CmxOptionComponent object.
     */
    private onSelect;
    /**
     * @description Clears the select trigger and deselects every option in the list.
     */
    private clearSelection;
    /**
     * @description Deselect each option that doesn't match the current selection
     */
    private deselectOptions;
    /**
     * @description Select all options
     */
    private selectAllOptions;
    private processOptions;
    private firstProcessOptions;
    private updatePlaceHolder;
    private dropSubscriptions;
    private setResultsCount;
    private isInsideViewport;
    private setselectedItem;
    private isMultipelSelect;
}
