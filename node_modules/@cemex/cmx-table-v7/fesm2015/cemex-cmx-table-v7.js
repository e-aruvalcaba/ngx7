import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { CmxDatepickerModule } from '@cemex/cmx-datepicker-v4';
import { CmxCheckboxComponent, CmxCheckboxModule } from '@cemex/cmx-checkbox-v4';
import { BehaviorSubject } from 'rxjs';
import { Directive, TemplateRef, Injectable, Component, Input, ViewChildren, forwardRef, Host, Output, EventEmitter, HostBinding, ContentChild, Renderer2, ViewChild, ViewContainerRef, ContentChildren, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Table {
    constructor() {
        this.columns = [];
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    setColumns(columns) {
        this.columns = columns;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    addColumn(column) {
        this.columns.push(column);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getColumn(key) {
        /** @type {?} */
        let answer;
        this.columns.forEach((/**
         * @param {?} column
         * @return {?}
         */
        (column) => {
            if (column.getKey() === key) {
                answer = column;
            }
        }));
        return answer;
    }
    /**
     * @return {?}
     */
    getColumns() {
        return this.columns;
    }
    /**
     * @param {?} _customerCode
     * @return {?}
     */
    setCustomerCode(_customerCode) {
        this.customerCode = _customerCode;
    }
    /**
     * @param {?} _companyCode
     * @return {?}
     */
    setCompanyCode(_companyCode) {
        this.companyCode = _companyCode;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxRowTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
CmxRowTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cmxRowTemplate]',
            },] }
];
/** @nocollapse */
CmxRowTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
CmxHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cmxHeaderTemplate]',
            },] }
];
/** @nocollapse */
CmxHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Filter {
    /**
     * @param {?} _name
     * @param {?} _value
     * @param {?} _active
     * @param {?} _columnKey
     */
    constructor(_name, _value, _active, _columnKey) {
        this.visible = true;
        this.name = _name;
        this.value = _value;
        this.active = _active;
        this.columnKey = _columnKey;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let $tableId = 0;
class WatcherService {
    constructor() {
        this.watchSubjects = [];
    }
    /**
     * @return {?}
     */
    clearActiveFilters() {
        this.watchSubjects.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        (sub) => {
            sub.activeFiltersSubject.next([]);
        }));
    }
    /**
     * @return {?}
     */
    createSubject() {
        $tableId++;
        /** @type {?} */
        const $subject = {
            id: $tableId,
            activeFilters: [],
            activeFiltersSubject: new BehaviorSubject([]),
        };
        this.watchSubjects.push($subject);
        return $tableId;
    }
    /**
     * @param {?} $id
     * @return {?}
     */
    listenToActiveFilters($id) {
        /** @type {?} */
        const $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        ($element) => $element.id === $id));
        return $aux.activeFiltersSubject.asObservable();
    }
    /**
     * @param {?} $id
     * @param {?} $filtersValue
     * @return {?}
     */
    emitActiveFilters($id, $filtersValue) {
        /** @type {?} */
        const $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        ($element) => $element.id === $id));
        $filtersValue.forEach((/**
         * @param {?} $filter
         * @return {?}
         */
        ($filter) => {
            /** @type {?} */
            const $foundIndex = $aux.activeFilters.findIndex((/**
             * @param {?} $element
             * @return {?}
             */
            ($element) => $element.name === $filter.name));
            if ($foundIndex === -1 && $filter.active === true) {
                // new filter to push
                $aux.activeFilters.push($filter);
            }
            else if ($foundIndex > -1 && $filter.active === false) {
                // filter was in the array but now has been deactivaded
                $aux.activeFilters.splice($foundIndex, 1);
            }
        }));
        $aux.activeFiltersSubject.next($aux.activeFilters);
    }
}
WatcherService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WatcherService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxCheckboxFiltersComponent {
    /**
     * @param {?} watcher
     * @param {?} parent
     */
    constructor(watcher, parent) {
        this.watcher = watcher;
        this.parent = parent;
        this.showAllOption = false;
        this.allOptionName = '';
        this.searchPlaceholder = '';
        this.enableSearch = false;
        this.searchTerm = '';
        this.allFilter = new Filter('All', null, false, null);
        this.isRtl = false;
        this.activeFilters = new BehaviorSubject(false);
        this.checkboxSubscriptions = [];
        this.isRtl = this.parent.rtl;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set filters($value) {
        if ($value !== undefined && $value !== null) {
            this._filters = $value;
        }
    }
    /**
     * @return {?}
     */
    get filters() {
        return this._filters;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.listenToCheckboxes();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.dropSubscriptions();
    }
    /**
     * @return {?}
     */
    listenToActiveFilters() {
        return this.activeFilters.asObservable();
    }
    /**
     * \@description Checks all filters when the 'All' checkbox is clicked.
     * @param {?} $event
     * @return {?}
     */
    toggleAll($event) {
        if (typeof $event === 'boolean') {
            this.allFilter.active = $event;
            this._filters.forEach((/**
             * @param {?} filter
             * @return {?}
             */
            (filter) => {
                if (filter.visible) {
                    filter.active = $event;
                }
            }));
        }
    }
    /**
     * \@description Toggles the 'active' attribute of a filter to enable or disable.
     * @param {?} filter
     * @param {?} $event
     * @return {?}
     */
    toggleFilter(filter, $event) {
        if (typeof $event === 'boolean') {
            filter.active = $event;
            if (!this.showAllOption) {
                return;
            }
            if (!$event) {
                this.allFilter.active = false;
            }
            else {
                /** @type {?} */
                let $filtersOnFalse = 0;
                this.filters.forEach((/**
                 * @param {?} $filter
                 * @return {?}
                 */
                ($filter) => {
                    if ($filter.active === false) {
                        $filtersOnFalse++;
                    }
                }));
                this.allFilter.active = ($filtersOnFalse === 0) ? true : false;
                // let $hasAllFilterActive: boolean = false;
                // $hasAllFilterActive = this._filters.every(function($filter) {
                //     return $filter.active;
                // });
                // this.allFilter.active = $hasAllFilterActive;
            }
        }
    }
    /**
     * @return {?}
     */
    clearSearch() {
        this.searchTerm = '';
        this.filters.forEach((/**
         * @param {?} $filter
         * @return {?}
         */
        ($filter) => {
            $filter.visible = true;
        }));
    }
    /**
     * @param {?} term
     * @return {?}
     */
    searchInFilter(term) {
        if (term.length >= 4 || term === '') {
            /** @type {?} */
            const aux = term.toLowerCase();
            if (aux !== '') {
                this.filters.filter((/**
                 * @param {?} row
                 * @return {?}
                 */
                (row) => {
                    if (row.name && row.name.toLowerCase().includes(aux)) {
                        row.visible = true;
                    }
                    else {
                        row.visible = false;
                    }
                }));
            }
            else {
                this.clearSearch();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitFilters() {
        this.watcher.emitActiveFilters(this.parent.assignedId, this._filters);
    }
    /**
     * @private
     * @return {?}
     */
    emitActiveCheckboxes() {
        /** @type {?} */
        const activeFilters = [];
        this._filters.forEach((/**
         * @param {?} filter
         * @return {?}
         */
        (filter) => {
            if (filter.active) {
                activeFilters.push(filter);
            }
        }));
        if (activeFilters.length > 0) {
            this.activeFilters.next(true);
        }
        else {
            this.activeFilters.next(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    listenToCheckboxes() {
        this.checkboxes.forEach((/**
         * @param {?} $checkbox
         * @return {?}
         */
        ($checkbox) => {
            /** @type {?} */
            const $subscription = $checkbox.change.subscribe((/**
             * @param {?} $checked
             * @return {?}
             */
            ($checked) => {
                this.emitFilters();
                this.emitActiveCheckboxes();
            }));
            this.checkboxSubscriptions.push($subscription);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    dropSubscriptions() {
        this.checkboxSubscriptions.forEach((/**
         * @param {?} $sub
         * @return {?}
         */
        ($sub) => $sub.unsubscribe()));
        this.checkboxSubscriptions = [];
    }
}
CmxCheckboxFiltersComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-checkbox-filters',
                template: "<div class=\"search-container\" *ngIf=\"enableSearch\">\r\n    <div id=\"cmx-checkbox-filter-search-input\" [dir]=\"isRtl ? 'rtl':'auto'\" class=\"filterSearchBox\" fxLayoutAlign=\"center center\" fxLayout=\"row\">\r\n        <input fxFlex class=\"search-input\" type=\"text\" placeholder=\"{{ searchPlaceholder }}\" [(ngModel)]=\"searchTerm\" (keyup)=\"searchInFilter(searchTerm)\">\r\n        <span fxFlex=\"35px\" class=\"cmx-icon-search search-input-icon\" aria-hidden=\"true\" *ngIf=\"searchTerm === ''\"></span>\r\n        <span fxFlex=\"35px\" class=\"cmx-icon-close search-input-icon\" aria-hidden=\"true\"  *ngIf=\"searchTerm !== ''\" (click)=\"clearSearch()\"></span>\r\n    </div>\r\n</div>\r\n<div *ngIf=\"showAllOption\" class=\"checkbox-container\" [dir]=\"isRtl ? 'rtl':'auto'\">\r\n    <cmx-checkbox [checked]=\"allFilter.active\" (change)=\"toggleAll($event)\" [rtl]=\"isRtl\">\r\n        {{ allOptionName }}\r\n    </cmx-checkbox>\r\n</div>\r\n<ng-container *ngFor=\"let filter of _filters; let $index = index;\">\r\n    <div [hidden]=\"!filter.visible\" class=\"checkbox-container\" [dir]=\"isRtl ? 'rtl':'auto'\">\r\n        <cmx-checkbox [id]=\"'checkbox-' + filter.columnKey + $index\" [checked]=\"filter.active\" (change)=\"toggleFilter(filter, $event)\" [rtl]=\"isRtl\">\r\n            {{ filter.name }}\r\n        </cmx-checkbox>\r\n    </div>\r\n</ng-container>",
                styles: [".roboto-bold{font-weight:700}.roboto-medium{font-weight:500}.roboto-regular{font-weight:400}.roboto-light{font-weight:300}.roboto-thin{font-weight:100}.h1-role,h1{font-family:Roboto,sans-serif;font-size:3rem;line-height:3rem;font-weight:700;color:#001b3a}.h2-role,.h3-role,h2,h3{font-family:Roboto,sans-serif;font-size:1.625rem;line-height:2rem;font-weight:400;color:#001b3a}.h4-role,h4{font-family:Roboto,sans-serif;font-size:2rem;line-height:2rem;font-weight:500;color:#001b3a}.h5-role,h5{font-family:Roboto,sans-serif;font-size:1.25rem;line-height:1.5rem;font-weight:400;color:#001b3a}.h6-role,h6{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;font-weight:700;color:#001b3a;text-transform:uppercase}.table-entry{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem}.table-entry-strong{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333;font-weight:700}.link,.table-entry,a{text-decoration:none;color:#3fa9f5}a:hover{text-decoration:underline}.input-placeholder{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#666}.input-text{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333}.size-15{font-size:.9375rem}.size-24{font-size:1.5rem}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.flex-first{order:-1}.flex-last{order:1}.flex-unordered{order:0}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.text-xs-left{text-align:left!important}.text-xs-right{text-align:right!important}.text-xs-center{text-align:center!important}.flex-xs-first{order:-1}.flex-xs-last{order:1}.flex-xs-unordered{order:0}.flex-xs-row{flex-direction:row!important}.flex-xs-column{flex-direction:column!important}.flex-xs-row-reverse{flex-direction:row-reverse!important}.flex-xs-column-reverse{flex-direction:column-reverse!important}.flex-xs-wrap{flex-wrap:wrap!important}.flex-xs-nowrap{flex-wrap:nowrap!important}.flex-xs-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xs-start{justify-content:flex-start!important}.justify-content-xs-end{justify-content:flex-end!important}.justify-content-xs-center{justify-content:center!important}.justify-content-xs-between{justify-content:space-between!important}.justify-content-xs-around{justify-content:space-around!important}.align-items-xs-start{align-items:flex-start!important}.align-items-xs-end{align-items:flex-end!important}.align-items-xs-center{align-items:center!important}.align-items-xs-baseline{align-items:baseline!important}.align-items-xs-stretch{align-items:stretch!important}.align-content-xs-start{align-content:flex-start!important}.align-content-xs-end{align-content:flex-end!important}.align-content-xs-center{align-content:center!important}.align-content-xs-between{align-content:space-between!important}.align-content-xs-around{align-content:space-around!important}.align-content-xs-stretch{align-content:stretch!important}.align-self-xs-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xs-start{align-self:flex-start!important}.align-self-xs-end{align-self:flex-end!important}.align-self-xs-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xs-baseline{align-self:baseline!important}.align-self-xs-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}.flex-sm-first{order:-1}.flex-sm-last{order:1}.flex-sm-unordered{order:0}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1080px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}.flex-md-first{order:-1}.flex-md-last{order:1}.flex-md-unordered{order:0}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1320px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}.flex-lg-first{order:-1}.flex-lg-last{order:1}.flex-lg-unordered{order:0}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1560px){.text-xlg-left{text-align:left!important}.text-xlg-right{text-align:right!important}.text-xlg-center{text-align:center!important}.flex-xlg-first{order:-1}.flex-xlg-last{order:1}.flex-xlg-unordered{order:0}.flex-xlg-row{flex-direction:row!important}.flex-xlg-column{flex-direction:column!important}.flex-xlg-row-reverse{flex-direction:row-reverse!important}.flex-xlg-column-reverse{flex-direction:column-reverse!important}.flex-xlg-wrap{flex-wrap:wrap!important}.flex-xlg-nowrap{flex-wrap:nowrap!important}.flex-xlg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xlg-start{justify-content:flex-start!important}.justify-content-xlg-end{justify-content:flex-end!important}.justify-content-xlg-center{justify-content:center!important}.justify-content-xlg-between{justify-content:space-between!important}.justify-content-xlg-around{justify-content:space-around!important}.align-items-xlg-start{align-items:flex-start!important}.align-items-xlg-end{align-items:flex-end!important}.align-items-xlg-center{align-items:center!important}.align-items-xlg-baseline{align-items:baseline!important}.align-items-xlg-stretch{align-items:stretch!important}.align-content-xlg-start{align-content:flex-start!important}.align-content-xlg-end{align-content:flex-end!important}.align-content-xlg-center{align-content:center!important}.align-content-xlg-between{align-content:space-between!important}.align-content-xlg-around{align-content:space-around!important}.align-content-xlg-stretch{align-content:stretch!important}.align-self-xlg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xlg-start{align-self:flex-start!important}.align-self-xlg-end{align-self:flex-end!important}.align-self-xlg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xlg-baseline{align-self:baseline!important}.align-self-xlg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}:host{display:block;max-height:196px;overflow-x:hidden;overflow-y:auto;border-top:3px solid #3fa9f5;cursor:default}.checkbox-container{margin:20px 0;padding:0 12px;white-space:nowrap;text-align:start}.filterSearchBox{border:1px solid #ccc;border-radius:4px;transition:.2s}.search-input{border:none;height:40px;padding-right:10px;padding-left:10px}.search-container{padding:0 12px;margin:20px 0}.search-input-icon{color:#3fa9f5;font-size:2em}"]
            }] }
];
/** @nocollapse */
CmxCheckboxFiltersComponent.ctorParameters = () => [
    { type: WatcherService },
    { type: CmxTableComponent, decorators: [{ type: Host }] }
];
CmxCheckboxFiltersComponent.propDecorators = {
    filters: [{ type: Input }],
    showAllOption: [{ type: Input }],
    allOptionName: [{ type: Input }],
    searchPlaceholder: [{ type: Input }],
    enableSearch: [{ type: Input }],
    checkboxes: [{ type: ViewChildren, args: [forwardRef((/**
                 * @return {?}
                 */
                () => CmxCheckboxComponent)),] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxDatepickerFilterComponent {
    /**
     * @param {?} watcher
     * @param {?} parent
     */
    constructor(watcher, parent) {
        this.watcher = watcher;
        this.parent = parent;
        this.isRtl = false;
        this.activeFilter = new BehaviorSubject(false);
        this.isRtl = this.parent.rtl;
    }
    /**
     * @return {?}
     */
    listenToActiveFilter() {
        return this.activeFilter.asObservable();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    activateFilter($event) {
        this.filter.value = $event.value;
        this.filter.active = true;
        /** @type {?} */
        const $aux = [this.filter];
        this.activeFilter.next(true);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    }
    /**
     * @return {?}
     */
    removeFilter() {
        this.filter.active = false;
        /** @type {?} */
        const $aux = [this.filter];
        this.activeFilter.next(false);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    }
}
CmxDatepickerFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-datepicker-filter',
                template: "<cmx-datepicker (select)=\"activateFilter( $event )\" (cancel)=\"removeFilter()\" [rtl]=\"isRtl\"></cmx-datepicker>",
                styles: [""]
            }] }
];
/** @nocollapse */
CmxDatepickerFilterComponent.ctorParameters = () => [
    { type: WatcherService },
    { type: CmxTableComponent, decorators: [{ type: Host }] }
];
CmxDatepickerFilterComponent.propDecorators = {
    filter: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxFilterSorterComponent {
    constructor() {
        this._searchValue = '';
        this._isAscending = false;
        this._isDescending = false;
        this.specificProp = null;
        this.enableSearch = true;
        this.onSelectedFilterItem = new EventEmitter();
        this.isfiltered = new EventEmitter();
        this.inputSelected = new EventEmitter();
        this.checkboxSelected = new EventEmitter();
        this._filteredCollection = [];
        this._compareCustomFn = null;
        this._searchFilterFn = null;
        this._rtl = false;
    }
    /**
     * @return {?}
     */
    get collection() {
        return this._filteredCollection;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set collection(value) {
        this._filteredCollection = value;
        if (value && value !== undefined) {
            this._originalCollection = value.slice(0, value.length);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set searchValue(value) {
        this._searchValue = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set sorterCustomFn(value) {
        this._compareCustomFn = value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set searchFilterFn(value) {
        this._searchFilterFn = value;
    }
    /**
     * @return {?}
     */
    get rtl() {
        return this._rtl;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set rtl($value) {
        if ($value !== undefined && $value !== undefined) {
            this._rtl = $value;
        }
    }
    /**
     * @return {?}
     */
    get dirRtl() {
        return (this._rtl) ? 'rtl' : 'ltr';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    clickInside(event) {
        // event.stopPropagation();
    }
    /**
     * @return {?}
     */
    reset() {
        this._searchValue = '';
        this._isAscending = false;
        this._isDescending = false;
        this._filteredCollection = this._originalCollection.slice(0, this._originalCollection.length);
        this.onSelectedFilterItem.emit(this._filteredCollection);
        this.isfiltered.emit(false);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ascendingItem($event) {
        this.checkboxSelected.emit({ order: 'asc', value: $event });
        this._isAscending = $event;
        this._isDescending = false;
        this.orderAZ();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    descendingItem($event) {
        this.checkboxSelected.emit({ order: 'des', value: $event });
        this._isAscending = false;
        this._isDescending = $event;
        this.orderAZ();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        const isAZ = this._isAscending || this._isDescending;
        this._filteredCollection = this._searchFilterFn(this._originalCollection, event.currentTarget.value, this.specificProp);
        if (isAZ) {
            this.orderAZ();
        }
        else {
            this.onSelectedFilterItem.emit(this._filteredCollection);
        }
        this.isfiltered.emit(this._searchValue !== '');
    }
    /**
     * @return {?}
     */
    resetInput() {
        /** @type {?} */
        const validate = this._isAscending || this._isDescending;
        if ((this._searchValue === '' || !this._searchValue) && !validate) {
            this.inputSelected.emit(this.id);
        }
    }
    // tslint:disable-next-line:typedef
    /**
     * @private
     * @return {?}
     */
    orderAZ() {
        if (!this._compareCustomFn) {
            return;
        }
        /** @type {?} */
        const isAZ = this._isAscending || this._isDescending;
        if (isAZ) {
            this._filteredCollection = this.orderAscDesc();
        }
        else {
            this._filteredCollection = this._searchValue !== '' ? this._filteredCollection
                .slice(0, this._originalCollection.length) :
                this._originalCollection.slice(0, this._originalCollection.length);
        }
        this.onSelectedFilterItem.emit(this._filteredCollection);
        this.isfiltered.emit(true);
    }
    /**
     * @private
     * @return {?}
     */
    orderAscDesc() {
        /** @type {?} */
        let sortCollection;
        if (this.specificProp) {
            sortCollection = this._filteredCollection.sort(this._compareCustomFn(this.specificProp));
            return this._isAscending ? sortCollection : sortCollection.reverse();
        }
        else {
            sortCollection = this._filteredCollection.sort(this._compareCustomFn);
            return this._isAscending ? sortCollection : sortCollection.reverse();
        }
    }
}
CmxFilterSorterComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-filter-sorter',
                template: "<!-- this component must be inside a div with dropdown bootstrao class \r\n    this component must be after a button to fire bootstrap dropdown\r\n    this component must have dropdown-menu bootstrap class\r\n-->\r\n\r\n<div \r\n    class=\"dropdown-menu-container\" \r\n    aria-labelledby=\"\" \r\n    (click)=\"clickInside($event)\" id=\"filtro\">\r\n    <div id=\"cmx-filter-sorter-search-input\" *ngIf=\"enableSearch\" dir=\"{{dirRtl}}\" class=\"search-input\">\r\n        <span class=\"cmx-icon-magnifier-glass icon\" aria-hidden=\"true\"></span>\r\n        <input (keyup.enter)=\"onSearch($event)\" [(ngModel)]=\"_searchValue\" type=\"text\" placeholder=\"{{ placeholder }}\" (focus)=\"resetInput()\">\r\n        <span class=\"cmx-icon-close icon-clear\" (click)=\"reset()\" aria-hidden=\"true\"></span>\r\n    </div>\r\n    <div class=\"cmx-checkbox__container\">\r\n        <cmx-checkbox [rtl]=\"rtl\" class=\"sorted__box\" [ngModel]=\"_isAscending\" (ngModelChange)=\"ascendingItem($event)\">{{keyOrderAsc}}</cmx-checkbox>\r\n        <br/>\r\n        <cmx-checkbox [rtl]=\"rtl\" class=\"sorted__box\" [ngModel]=\"_isDescending\" (ngModelChange)=\"descendingItem($event)\">{{keyOrderDesc}}</cmx-checkbox>\r\n    </div>\r\n</div>",
                styles: [".roboto-bold{font-weight:700}.roboto-medium{font-weight:500}.roboto-regular{font-weight:400}.roboto-light{font-weight:300}.roboto-thin{font-weight:100}.h1-role,h1{font-family:Roboto,sans-serif;font-size:3rem;line-height:3rem;font-weight:700;color:#001b3a}.h2-role,.h3-role,h2,h3{font-family:Roboto,sans-serif;font-size:1.625rem;line-height:2rem;font-weight:400;color:#001b3a}.h4-role,h4{font-family:Roboto,sans-serif;font-size:2rem;line-height:2rem;font-weight:500;color:#001b3a}.h5-role,h5{font-family:Roboto,sans-serif;font-size:1.25rem;line-height:1.5rem;font-weight:400;color:#001b3a}.h6-role,h6{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;font-weight:700;color:#001b3a;text-transform:uppercase}.table-entry{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem}.table-entry-strong{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333;font-weight:700}.link,.table-entry,a{text-decoration:none;color:#3fa9f5}a:hover{text-decoration:underline}.input-placeholder{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#666}.input-text{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333}.size-15{font-size:.9375rem}.size-24{font-size:1.5rem}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.flex-first{order:-1}.flex-last{order:1}.flex-unordered{order:0}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.text-xs-left{text-align:left!important}.text-xs-right{text-align:right!important}.text-xs-center{text-align:center!important}.flex-xs-first{order:-1}.flex-xs-last{order:1}.flex-xs-unordered{order:0}.flex-xs-row{flex-direction:row!important}.flex-xs-column{flex-direction:column!important}.flex-xs-row-reverse{flex-direction:row-reverse!important}.flex-xs-column-reverse{flex-direction:column-reverse!important}.flex-xs-wrap{flex-wrap:wrap!important}.flex-xs-nowrap{flex-wrap:nowrap!important}.flex-xs-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xs-start{justify-content:flex-start!important}.justify-content-xs-end{justify-content:flex-end!important}.justify-content-xs-center{justify-content:center!important}.justify-content-xs-between{justify-content:space-between!important}.justify-content-xs-around{justify-content:space-around!important}.align-items-xs-start{align-items:flex-start!important}.align-items-xs-end{align-items:flex-end!important}.align-items-xs-center{align-items:center!important}.align-items-xs-baseline{align-items:baseline!important}.align-items-xs-stretch{align-items:stretch!important}.align-content-xs-start{align-content:flex-start!important}.align-content-xs-end{align-content:flex-end!important}.align-content-xs-center{align-content:center!important}.align-content-xs-between{align-content:space-between!important}.align-content-xs-around{align-content:space-around!important}.align-content-xs-stretch{align-content:stretch!important}.align-self-xs-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xs-start{align-self:flex-start!important}.align-self-xs-end{align-self:flex-end!important}.align-self-xs-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xs-baseline{align-self:baseline!important}.align-self-xs-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}.flex-sm-first{order:-1}.flex-sm-last{order:1}.flex-sm-unordered{order:0}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1080px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}.flex-md-first{order:-1}.flex-md-last{order:1}.flex-md-unordered{order:0}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1320px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}.flex-lg-first{order:-1}.flex-lg-last{order:1}.flex-lg-unordered{order:0}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1560px){.text-xlg-left{text-align:left!important}.text-xlg-right{text-align:right!important}.text-xlg-center{text-align:center!important}.flex-xlg-first{order:-1}.flex-xlg-last{order:1}.flex-xlg-unordered{order:0}.flex-xlg-row{flex-direction:row!important}.flex-xlg-column{flex-direction:column!important}.flex-xlg-row-reverse{flex-direction:row-reverse!important}.flex-xlg-column-reverse{flex-direction:column-reverse!important}.flex-xlg-wrap{flex-wrap:wrap!important}.flex-xlg-nowrap{flex-wrap:nowrap!important}.flex-xlg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xlg-start{justify-content:flex-start!important}.justify-content-xlg-end{justify-content:flex-end!important}.justify-content-xlg-center{justify-content:center!important}.justify-content-xlg-between{justify-content:space-between!important}.justify-content-xlg-around{justify-content:space-around!important}.align-items-xlg-start{align-items:flex-start!important}.align-items-xlg-end{align-items:flex-end!important}.align-items-xlg-center{align-items:center!important}.align-items-xlg-baseline{align-items:baseline!important}.align-items-xlg-stretch{align-items:stretch!important}.align-content-xlg-start{align-content:flex-start!important}.align-content-xlg-end{align-content:flex-end!important}.align-content-xlg-center{align-content:center!important}.align-content-xlg-between{align-content:space-between!important}.align-content-xlg-around{align-content:space-around!important}.align-content-xlg-stretch{align-content:stretch!important}.align-self-xlg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xlg-start{align-self:flex-start!important}.align-self-xlg-end{align-self:flex-end!important}.align-self-xlg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xlg-baseline{align-self:baseline!important}.align-self-xlg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}:host{display:block;max-height:196px;border-top:3px solid #3fa9f5;cursor:default}.dropdown-menu-container{width:325px;max-height:204px}.dropdown-menu-container .search-input{padding:0 10px}.dropdown-menu-container .search-input .icon{top:8%;position:absolute}.dropdown-menu-container .search-input .icon-magnifier-glass{width:15px;height:15px;position:absolute}.dropdown-menu-container .search-input input{width:100%;border:0;border-bottom:1px solid #d6d6d6;background-color:transparent;text-indent:20px;padding-bottom:5px}.dropdown-menu-container .search-input input:focus{outline:0}.dropdown-menu-container .cmx-checkbox__container{margin-top:10px}.search-input[dir=rtl] .icon-clear{right:90%}.sorted__box{font-size:14px;padding:10px 9px}.icon-clear{position:absolute;top:8%;right:5%;width:4.3%}.icon-clear .icon-close-black{width:12px}.content-buttons-action{flex-direction:row-reverse;display:flex}.content-buttons-action a{padding:5px}"]
            }] }
];
/** @nocollapse */
CmxFilterSorterComponent.ctorParameters = () => [];
CmxFilterSorterComponent.propDecorators = {
    collection: [{ type: Input }],
    sorterCustomFn: [{ type: Input }],
    searchFilterFn: [{ type: Input }],
    rtl: [{ type: Input }],
    specificProp: [{ type: Input }],
    id: [{ type: Input }],
    placeholder: [{ type: Input }],
    keyTitle: [{ type: Input }],
    keySubtitle: [{ type: Input }],
    keyOrderAsc: [{ type: Input }],
    keyOrderDesc: [{ type: Input }],
    enableSearch: [{ type: Input }],
    onSelectedFilterItem: [{ type: Output }],
    isfiltered: [{ type: Output }],
    inputSelected: [{ type: Output }],
    checkboxSelected: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxHeaderCellComponent {
    /**
     * @param {?} parent
     * @param {?} renderer
     */
    constructor(parent, renderer) {
        this.parent = parent;
        this.renderer = renderer;
        this.cmxHeaderCellClass = true;
        this.hasFiltersClass = false;
        this.activeFiltersClass = false;
        this.showFilters = false;
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (this.checkboxFilters) {
            this.hasFiltersClass = true;
            this.filtersListener = this.checkboxFilters.listenToActiveFilters().subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => {
                this.activeFiltersClass = $event;
            }));
        }
        else if (this.datepickerFilter) {
            this.hasFiltersClass = true;
            this.filtersListener = this.datepickerFilter.listenToActiveFilter().subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => {
                this.activeFiltersClass = $event;
            }));
        }
        else if (this.filterSorter) {
            this.hasFiltersClass = true;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filtersListener) {
            this.filtersListener.unsubscribe();
        }
    }
    /**
     * @return {?}
     */
    toggle() {
        if (this.checkboxFilters || this.datepickerFilter || this.filterSorter) {
            this.showFilters = !this.showFilters;
            if (this.showFilters) {
                setTimeout((/**
                 * @return {?}
                 */
                () => this.isInsideViewport()), 100);
            }
        }
    }
    /**
     * @return {?}
     */
    closeFilters() {
        this.showFilters = false;
    }
    /**
     * @private
     * @return {?}
     */
    isInsideViewport() {
        /** @type {?} */
        const sidePositioner = this.parent.rtl ? 'right' : 'left';
        // clearing
        this.renderer.setStyle(this.filtersContainer.nativeElement, sidePositioner, undefined);
        this.renderer.setStyle(this.filtersContainer.nativeElement, 'top', undefined);
        // calculations
        /** @type {?} */
        const rect = this.filtersContainer.nativeElement.getBoundingClientRect();
        /** @type {?} */
        const screenHeight = window.innerHeight;
        /** @type {?} */
        const screenWidth = window.innerWidth;
        /** @type {?} */
        const adjustment = 20;
        if (this.parent.rtl) {
            if (rect.left < 0) {
                /** @type {?} */
                const pxValue = Math.abs(rect.left);
                this.renderer.setStyle(this.filtersContainer.nativeElement, sidePositioner, (-1 * pxValue) + 'px');
            }
        }
        else {
            if (rect.right > screenWidth) {
                // move to the left
                /** @type {?} */
                const pxValue = Math.abs(rect.right - screenWidth) + adjustment;
                this.renderer.setStyle(this.filtersContainer.nativeElement, sidePositioner, (-1 * pxValue) + 'px');
            }
        }
        if (rect.bottom > screenHeight) {
            // move to the top
            /** @type {?} */
            const pxValue = Math.abs(rect.bottom - screenHeight);
            this.renderer.setStyle(this.filtersContainer.nativeElement, 'top', (-1 * pxValue) + 'px');
        }
    }
}
CmxHeaderCellComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-header-cell',
                template: "<div class=\"cmx-header-cell__text\" (click)=\"toggle()\">\r\n    <div class=\"text-container\">\r\n        <ng-content></ng-content>\r\n        <ng-container *ngIf=\"checkboxFilters || datepickerFilter || filterSorter\">\r\n            <div class=\"cmx-icon__container\">\r\n                <span class=\"cmx-icon-down-single\" aria-hidden=\"true\"></span>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n</div>\r\n<ng-container *ngIf=\"showFilters\">\r\n    <div #filtersContainer class=\"cmx-header-cell__filters-container\">\r\n        <ng-content select=\"cmx-checkbox-filters,cmx-datepicker-filter,cmx-filter-sorter\"></ng-content>\r\n    </div>\r\n    <div class=\"cmx-header-cell__mask\" (click)=\"closeFilters()\"></div>\r\n</ng-container>",
                styles: [".roboto-bold{font-weight:700}.roboto-medium{font-weight:500}.roboto-regular{font-weight:400}.roboto-light{font-weight:300}.roboto-thin{font-weight:100}.h1-role,h1{font-family:Roboto,sans-serif;font-size:3rem;line-height:3rem;font-weight:700;color:#001b3a}.h2-role,.h3-role,h2,h3{font-family:Roboto,sans-serif;font-size:1.625rem;line-height:2rem;font-weight:400;color:#001b3a}.h4-role,h4{font-family:Roboto,sans-serif;font-size:2rem;line-height:2rem;font-weight:500;color:#001b3a}.h5-role,h5{font-family:Roboto,sans-serif;font-size:1.25rem;line-height:1.5rem;font-weight:400;color:#001b3a}.h6-role,h6{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;font-weight:700;color:#001b3a;text-transform:uppercase}.table-entry{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem}.table-entry-strong{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333;font-weight:700}.link,.table-entry,a{text-decoration:none;color:#3fa9f5}a:hover{text-decoration:underline}.input-placeholder{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#666}.input-text{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333}.size-15{font-size:.9375rem}.size-24{font-size:1.5rem}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.flex-first{order:-1}.flex-last{order:1}.flex-unordered{order:0}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.text-xs-left{text-align:left!important}.text-xs-right{text-align:right!important}.text-xs-center{text-align:center!important}.flex-xs-first{order:-1}.flex-xs-last{order:1}.flex-xs-unordered{order:0}.flex-xs-row{flex-direction:row!important}.flex-xs-column{flex-direction:column!important}.flex-xs-row-reverse{flex-direction:row-reverse!important}.flex-xs-column-reverse{flex-direction:column-reverse!important}.flex-xs-wrap{flex-wrap:wrap!important}.flex-xs-nowrap{flex-wrap:nowrap!important}.flex-xs-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xs-start{justify-content:flex-start!important}.justify-content-xs-end{justify-content:flex-end!important}.justify-content-xs-center{justify-content:center!important}.justify-content-xs-between{justify-content:space-between!important}.justify-content-xs-around{justify-content:space-around!important}.align-items-xs-start{align-items:flex-start!important}.align-items-xs-end{align-items:flex-end!important}.align-items-xs-center{align-items:center!important}.align-items-xs-baseline{align-items:baseline!important}.align-items-xs-stretch{align-items:stretch!important}.align-content-xs-start{align-content:flex-start!important}.align-content-xs-end{align-content:flex-end!important}.align-content-xs-center{align-content:center!important}.align-content-xs-between{align-content:space-between!important}.align-content-xs-around{align-content:space-around!important}.align-content-xs-stretch{align-content:stretch!important}.align-self-xs-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xs-start{align-self:flex-start!important}.align-self-xs-end{align-self:flex-end!important}.align-self-xs-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xs-baseline{align-self:baseline!important}.align-self-xs-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}.flex-sm-first{order:-1}.flex-sm-last{order:1}.flex-sm-unordered{order:0}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1080px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}.flex-md-first{order:-1}.flex-md-last{order:1}.flex-md-unordered{order:0}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1320px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}.flex-lg-first{order:-1}.flex-lg-last{order:1}.flex-lg-unordered{order:0}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1560px){.text-xlg-left{text-align:left!important}.text-xlg-right{text-align:right!important}.text-xlg-center{text-align:center!important}.flex-xlg-first{order:-1}.flex-xlg-last{order:1}.flex-xlg-unordered{order:0}.flex-xlg-row{flex-direction:row!important}.flex-xlg-column{flex-direction:column!important}.flex-xlg-row-reverse{flex-direction:row-reverse!important}.flex-xlg-column-reverse{flex-direction:column-reverse!important}.flex-xlg-wrap{flex-wrap:wrap!important}.flex-xlg-nowrap{flex-wrap:nowrap!important}.flex-xlg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xlg-start{justify-content:flex-start!important}.justify-content-xlg-end{justify-content:flex-end!important}.justify-content-xlg-center{justify-content:center!important}.justify-content-xlg-between{justify-content:space-between!important}.justify-content-xlg-around{justify-content:space-around!important}.align-items-xlg-start{align-items:flex-start!important}.align-items-xlg-end{align-items:flex-end!important}.align-items-xlg-center{align-items:center!important}.align-items-xlg-baseline{align-items:baseline!important}.align-items-xlg-stretch{align-items:stretch!important}.align-content-xlg-start{align-content:flex-start!important}.align-content-xlg-end{align-content:flex-end!important}.align-content-xlg-center{align-content:center!important}.align-content-xlg-between{align-content:space-between!important}.align-content-xlg-around{align-content:space-around!important}.align-content-xlg-stretch{align-content:stretch!important}.align-self-xlg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xlg-start{align-self:flex-start!important}.align-self-xlg-end{align-self:flex-end!important}.align-self-xlg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xlg-baseline{align-self:baseline!important}.align-self-xlg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}:host.cmx-header-cell{font-family:Roboto,sans-serif;padding-left:12px;padding-right:12px;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;position:relative}:host.cmx-header-cell.--has-filters{cursor:pointer}:host.cmx-header-cell.--has-filters .cmx-header-cell__text:hover{color:#3fa9f5}:host.cmx-header-cell.--has-filters .text-container{padding-right:16px}:host.cmx-header-cell.--active-filters .cmx-header-cell__text{color:#3fa9f5}:host.cmx-header-cell.--number .cmx-header-cell__text{text-align:right}:host.cmx-header-cell.--number .text-container{float:right}html[dir=rtl] :host.cmx-header-cell.--has-filters .cmx-icon__container{left:0;right:unset}html[dir=rtl] :host.cmx-header-cell.--has-filters .text-container{padding-right:0;padding-left:16px}html[dir=rtl] :host.cmx-header-cell.--number .cmx-header-cell__text{text-align:left}html[dir=rtl] :host.cmx-header-cell.--number .text-container{float:left}svg{width:10px;height:10px;margin-left:4px;fill:#3fa9f5}.cmx-header-cell__text{font-weight:700;color:#001b3a;font-size:.875rem;width:100%}.cmx-header-cell__filters-container{z-index:10;position:absolute;top:100%;width:auto;height:auto;background-color:#fff;box-shadow:0 8px 13px rgba(0,0,0,.3);-webkit-box-shadow:0 8px 13px rgba(0,0,0,.3);-moz-box-shadow:0 8px 13px rgba(0,0,0,.3)}.cmx-header-cell__mask{z-index:9;opacity:0;background:0 0;position:fixed;width:100vw;height:100vh;top:0;left:0;display:block;cursor:default}.text-container{position:relative;overflow:hidden;text-overflow:ellipsis;width:auto;display:inline-block}.cmx-icon__container{position:absolute;top:0;right:0}"]
            }] }
];
/** @nocollapse */
CmxHeaderCellComponent.ctorParameters = () => [
    { type: CmxTableComponent, decorators: [{ type: Host }] },
    { type: Renderer2 }
];
CmxHeaderCellComponent.propDecorators = {
    cmxHeaderCellClass: [{ type: HostBinding, args: ['class.cmx-header-cell',] }],
    hasFiltersClass: [{ type: HostBinding, args: ['class.--has-filters',] }],
    activeFiltersClass: [{ type: HostBinding, args: ['class.--active-filters',] }],
    checkboxFilters: [{ type: ContentChild, args: [CmxCheckboxFiltersComponent,] }],
    datepickerFilter: [{ type: ContentChild, args: [CmxDatepickerFilterComponent,] }],
    filterSorter: [{ type: ContentChild, args: [CmxFilterSorterComponent,] }],
    filtersContainer: [{ type: ViewChild, args: ['filtersContainer',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RowPlaceholderDirective {
    /**
     * @param {?} viewContainerReference
     */
    constructor(viewContainerReference) {
        this.viewContainerReference = viewContainerReference;
        this.cmxRowClass = true;
    }
}
RowPlaceholderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[rowPlaceholder]',
            },] }
];
/** @nocollapse */
RowPlaceholderDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
RowPlaceholderDirective.propDecorators = {
    cmxRowClass: [{ type: HostBinding, args: ['class.cmx-row',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class HeaderPlaceholderDirective {
    /**
     * @param {?} viewContainerReference
     */
    constructor(viewContainerReference) {
        this.viewContainerReference = viewContainerReference;
        this.cmxHeaderClass = true;
    }
}
HeaderPlaceholderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[headerPlaceholder]',
            },] }
];
/** @nocollapse */
HeaderPlaceholderDirective.ctorParameters = () => [
    { type: ViewContainerRef }
];
HeaderPlaceholderDirective.propDecorators = {
    cmxHeaderClass: [{ type: HostBinding, args: ['class.cmx-header',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxTableComponent {
    /**
     * @param {?} watcher
     */
    constructor(watcher) {
        this.watcher = watcher;
        this.cmxTableClass = true;
        this.pages = [];
        this.tableHasScroll = false;
        this._dataSource = [];
        this._pageSize = 30;
        this._rtl = false;
        this.currentActivePage = 1;
        this.currentPageData = [];
        this.viewportData = [];
        this.activeFiltersCopy = [];
        this.rowViewReferences = [];
    }
    /**
     * @return {?}
     */
    get tableSource() {
        return this._table;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set tableSource($value) {
        if ($value !== undefined && $value !== null && $value instanceof Table) {
            this._table = $value;
            this.renderHeader();
        }
    }
    /**
     * @return {?}
     */
    get dataSource() {
        return this._dataSource;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set dataSource($value) {
        if ($value !== undefined && $value !== null) {
            this._dataSource = $value;
            this.viewportData = $value;
            this.rowViewReferences = [];
            this.initialize();
        }
        else {
            this._dataSource = [];
        }
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set updateDataSource($value) {
        if ($value !== undefined && $value !== null) {
            this._dataSource = $value;
            this.viewportData = $value;
            this.rowViewReferences = [];
            this.updateDataTable();
        }
        else {
            this._dataSource = [];
        }
    }
    /**
     * @return {?}
     */
    get pageSize() {
        return this._pageSize;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set pageSize($value) {
        if ($value !== undefined && $value !== null) {
            this._pageSize = $value;
            this.calculateNumberOfPages();
            this.setPageData();
        }
    }
    /**
     * @return {?}
     */
    get rtl() {
        return this._rtl;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set rtl($value) {
        if ($value !== undefined && $value !== null) {
            this._rtl = $value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.renderHeader();
        this.assignedId = this.watcher.createSubject();
        this.activeFiltersSubscription = this.watcher.listenToActiveFilters(this.assignedId)
            .subscribe((/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            if ($event.length > 0) {
                this.activeFiltersCopy = $event;
                // there are filters to apply
                this.viewportData = this.filterData($event);
            }
            else {
                this.activeFiltersCopy = [];
                // no filters to apply
                this.viewportData = this._dataSource;
            }
            this.currentActivePage = 1;
            this.calculateNumberOfPages();
            this.setPageData();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.rowPlaceholder.viewContainerReference.clear();
        this.headerPlaceholder.viewContainerReference.clear();
        this.activeFiltersSubscription.unsubscribe();
    }
    /**
     * returns the items including filters applied in table
     * Author: Andres Santos
     * @return {?}
     */
    filteredItems() {
        return this.viewportData;
    }
    /**
     * returns the items including filters applied in current page
     * Author: Andres Santos
     * @return {?}
     */
    filteredItemsInPage() {
        return this.currentPageData;
    }
    /**
     * @return {?}
     */
    clearActiveFilters() {
        this.watcher.clearActiveFilters();
    }
    /**
     * returns the current active filters
     * Author: Antonio Vargas
     * @return {?}
     */
    getActiveFiltersCopy() {
        return this.activeFiltersCopy;
    }
    /**
     * Triggers the filtering of data
     * @param {?} $activeFilters
     * @return {?}
     */
    triggerFilter($activeFilters) {
        if ($activeFilters.length > 0) {
            // there are filters to apply
            this.viewportData = this.filterData($activeFilters);
        }
        else {
            // no filters to apply
            this.viewportData = this._dataSource;
        }
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * \@description Resets the table visualization.
     * @return {?}
     */
    reset() {
        this.currentActivePage = 1;
        this.rowViewReferences = [];
        this.initialize();
    }
    /**
     * @param {?} activeFilters
     * @return {?}
     */
    filterData(activeFilters) {
        /** @type {?} */
        let result = this._dataSource;
        /** @type {?} */
        const data = this._dataSource;
        /** @type {?} */
        let aux = [];
        /** @type {?} */
        const filtered = [];
        activeFilters.forEach((/**
         * @param {?} $filter
         * @return {?}
         */
        ($filter) => {
            filtered[$filter.columnKey] = [];
        }));
        activeFilters.forEach((/**
         * @param {?} $filter
         * @param {?} $index
         * @return {?}
         */
        ($filter, $index) => {
            aux = data.filter(this._table.getColumn($filter.columnKey).getFilterFunction($filter));
            filtered[$filter.columnKey] = filtered[$filter.columnKey].concat(aux);
        }));
        for (const $key of Object.keys(filtered)) {
            result = this.findIntersection(result, filtered[$key]);
        }
        return result;
    }
    /**
     * @param {?} columnId
     * @param {?} ASC
     * @return {?}
     */
    sortData(columnId, ASC) {
        this.viewportData = this.viewportData.sort(this._table.getColumn(columnId).getSortFunction(ASC));
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * \@description Apply the current active filters in the table
     * @return {?}
     */
    applyCurrentFilters() {
        if (this.activeFiltersCopy.length > 0) {
            this.viewportData = this.filterData(this.activeFiltersCopy);
        }
        else {
            this.viewportData = this._dataSource;
        }
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * \@description Overwrite the active filters with new ones to apply
     * @param {?} $filters
     * @return {?}
     */
    applyNewFilters($filters) {
        if ($filters && $filters.length > 0) {
            this.viewportData = this.filterData($filters);
        }
        else {
            this.viewportData = this._dataSource;
        }
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * @param {?} $currentPage
     * @return {?}
     */
    setCurrentPage($currentPage) {
        this.currentActivePage = $currentPage;
        this.setPageData();
    }
    /**
     * @private
     * @return {?}
     */
    initialize() {
        this.rowPlaceholder.viewContainerReference.clear();
        this.headerPlaceholder.viewContainerReference.clear();
        this.renderHeader();
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * @private
     * @return {?}
     */
    updateDataTable() {
        this.rowPlaceholder.viewContainerReference.clear();
        this.calculateNumberOfPages();
        this.setPageData();
    }
    /**
     * @private
     * @return {?}
     */
    checkIfTableHasScroll() {
        if (this.cmxTableBodyElement &&
            this.cmxTableBodyElement.nativeElement.offsetHeight <
                this.cmxTableBodyElement.nativeElement.scrollHeight) {
            this.tableHasScroll = true;
        }
        else {
            this.tableHasScroll = false;
        }
    }
    // =============================================================================================
    // views' rendering
    // =============================================================================================
    /**
     * @private
     * @return {?}
     */
    renderHeader() {
        this.headerPlaceholder.viewContainerReference.clear();
        if (this.headerDefinitions) {
            this.headerDefinitions.forEach((/**
             * @param {?} headerDef
             * @return {?}
             */
            (headerDef) => {
                /** @type {?} */
                const context = { $implicit: this._table };
                this.headerPlaceholder.viewContainerReference.createEmbeddedView(headerDef.template, context);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    renderRows() {
        if (this.rowDefinitions) {
            if (this.rowViewReferences && this.rowViewReferences.length > 0) {
                // the views already exist
                this.updateRowsContext();
            }
            else {
                // first rendering of the rows
                this.rowDefinitions.forEach((/**
                 * @param {?} rowDef
                 * @return {?}
                 */
                (rowDef) => {
                    this.currentPageData.forEach((/**
                     * @param {?} rowData
                     * @param {?} $index
                     * @return {?}
                     */
                    (rowData, $index) => {
                        /** @type {?} */
                        const context = { $implicit: rowData };
                        /** @type {?} */
                        const ref = this.rowPlaceholder.viewContainerReference.createEmbeddedView(rowDef.template, context);
                        this.rowViewReferences.push(ref);
                    }));
                }));
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateRowsContext() {
        if (this.rowDefinitions) {
            this.rowDefinitions.forEach((/**
             * @param {?} rowDef
             * @return {?}
             */
            (rowDef) => {
                this.rowViewReferences.forEach((/**
                 * @param {?} viewRef
                 * @param {?} $index
                 * @return {?}
                 */
                (viewRef, $index) => {
                    if ($index > (this.currentPageData.length - 1)) {
                        // the current page has less data to show than the set page size
                        if (viewRef !== undefined) {
                            viewRef.destroy();
                        }
                        this.rowViewReferences.splice($index, 1, undefined);
                    }
                    else {
                        // the view reference is used on the current page
                        /** @type {?} */
                        const context = { $implicit: this.currentPageData[$index] };
                        if (viewRef === undefined) {
                            // the view reference was destroyed, a new replacement
                            /** @type {?} */
                            const ref = this.rowPlaceholder.viewContainerReference
                                .createEmbeddedView(rowDef.template, context, $index);
                            this.rowViewReferences[$index] = ref;
                        }
                        else {
                            // no new view reference is required, update the context data
                            viewRef.context.$implicit = context.$implicit;
                        }
                    }
                }));
            }));
        }
    }
    // =============================================================================================
    // filters
    // =============================================================================================
    /**
     * @private
     * @param {?} arrayOne
     * @param {?} arrayTwo
     * @return {?}
     */
    findIntersection(arrayOne, arrayTwo) {
        /** @type {?} */
        const intersection = [];
        /** @type {?} */
        let $i = 0;
        /** @type {?} */
        let $j = 0;
        while ($i < arrayOne.length) {
            $j = 0;
            while ($j < arrayTwo.length) {
                if (arrayOne[$i] === arrayTwo[$j]) {
                    intersection.push(arrayOne[$i]);
                }
                $j++;
            }
            $i++;
        }
        return intersection;
    }
    // =============================================================================================
    // pagination
    // =============================================================================================
    /**
     * \@description Calculates the number of pages given the array of data and
     * determines the index of the data source for each page.
     * @private
     * @return {?}
     */
    calculateNumberOfPages() {
        /** @type {?} */
        const numberOfPages = Math.ceil(this.viewportData.length / this._pageSize);
        this.pages = [];
        /** @type {?} */
        let i = 1;
        do {
            /** @type {?} */
            const min = ((i - 1) * this._pageSize);
            /** @type {?} */
            const max = min + this._pageSize - 1;
            this.pages.push((/** @type {?} */ ({
                pageNumber: i,
                minIndex: min,
                maxIndex: max
            })));
            i++;
        } while (i <= numberOfPages);
    }
    /**
     * @private
     * @return {?}
     */
    setPageData() {
        /** @type {?} */
        const $page = this.pages.find((/**
         * @param {?} page
         * @return {?}
         */
        (page) => page.pageNumber === this.currentActivePage));
        this.currentPageData = [];
        if ($page !== undefined && $page !== null) {
            for (let $i = $page.minIndex; $i <= $page.maxIndex; $i++) {
                if (this.viewportData[$i]) {
                    this.currentPageData.push(this.viewportData[$i]);
                }
            }
        }
        else {
            this.currentActivePage = 1;
            for (let $i = this.pages[0].minIndex; $i <= this.pages[0].maxIndex; $i++) {
                if (this.viewportData[$i]) {
                    this.currentPageData.push(this.viewportData[$i]);
                }
            }
        }
        this.renderRows();
        this.checkIfTableHasScroll();
    }
}
CmxTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-table',
                template: "<div class=\"cmx-table-header\" [class.--scroll-spacing]=\"tableHasScroll\">\r\n    <ng-container headerPlaceholder></ng-container>\r\n</div>\r\n<div #cmxTableBody class=\"cmx-table-body\">\r\n    <ng-container rowPlaceholder></ng-container>\r\n</div>\r\n<div *ngIf=\"pages.length > 1\" style=\"text-align: center;\">\r\n    <cmx-pagination [pages]=\"pages.length\" [currentPage]=\"currentActivePage\"\r\n    (pageChanged)=\"setCurrentPage($event)\"></cmx-pagination>\r\n</div>",
                styles: ["@import url(https://www.cemexgo.com/cdn/cmx-dls-icons.css);.roboto-bold{font-weight:700}.roboto-medium{font-weight:500}.roboto-regular{font-weight:400}.roboto-light{font-weight:300}.roboto-thin{font-weight:100}.h1-role,h1{font-family:Roboto,sans-serif;font-size:3rem;line-height:3rem;font-weight:700;color:#001b3a}.h2-role,.h3-role,h2,h3{font-family:Roboto,sans-serif;font-size:1.625rem;line-height:2rem;font-weight:400;color:#001b3a}.h4-role,h4{font-family:Roboto,sans-serif;font-size:2rem;line-height:2rem;font-weight:500;color:#001b3a}.h5-role,h5{font-family:Roboto,sans-serif;font-size:1.25rem;line-height:1.5rem;font-weight:400;color:#001b3a}.h6-role,h6{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;font-weight:700;color:#001b3a;text-transform:uppercase}.table-entry{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem}.table-entry-strong{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333;font-weight:700}.link,.table-entry,a{text-decoration:none;color:#3fa9f5}a:hover{text-decoration:underline}.input-placeholder{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#666}.input-text{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333}.size-15{font-size:.9375rem}.size-24{font-size:1.5rem}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.flex-first{order:-1}.flex-last{order:1}.flex-unordered{order:0}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.text-xs-left{text-align:left!important}.text-xs-right{text-align:right!important}.text-xs-center{text-align:center!important}.flex-xs-first{order:-1}.flex-xs-last{order:1}.flex-xs-unordered{order:0}.flex-xs-row{flex-direction:row!important}.flex-xs-column{flex-direction:column!important}.flex-xs-row-reverse{flex-direction:row-reverse!important}.flex-xs-column-reverse{flex-direction:column-reverse!important}.flex-xs-wrap{flex-wrap:wrap!important}.flex-xs-nowrap{flex-wrap:nowrap!important}.flex-xs-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xs-start{justify-content:flex-start!important}.justify-content-xs-end{justify-content:flex-end!important}.justify-content-xs-center{justify-content:center!important}.justify-content-xs-between{justify-content:space-between!important}.justify-content-xs-around{justify-content:space-around!important}.align-items-xs-start{align-items:flex-start!important}.align-items-xs-end{align-items:flex-end!important}.align-items-xs-center{align-items:center!important}.align-items-xs-baseline{align-items:baseline!important}.align-items-xs-stretch{align-items:stretch!important}.align-content-xs-start{align-content:flex-start!important}.align-content-xs-end{align-content:flex-end!important}.align-content-xs-center{align-content:center!important}.align-content-xs-between{align-content:space-between!important}.align-content-xs-around{align-content:space-around!important}.align-content-xs-stretch{align-content:stretch!important}.align-self-xs-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xs-start{align-self:flex-start!important}.align-self-xs-end{align-self:flex-end!important}.align-self-xs-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xs-baseline{align-self:baseline!important}.align-self-xs-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}.flex-sm-first{order:-1}.flex-sm-last{order:1}.flex-sm-unordered{order:0}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1080px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}.flex-md-first{order:-1}.flex-md-last{order:1}.flex-md-unordered{order:0}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1320px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}.flex-lg-first{order:-1}.flex-lg-last{order:1}.flex-lg-unordered{order:0}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1560px){.text-xlg-left{text-align:left!important}.text-xlg-right{text-align:right!important}.text-xlg-center{text-align:center!important}.flex-xlg-first{order:-1}.flex-xlg-last{order:1}.flex-xlg-unordered{order:0}.flex-xlg-row{flex-direction:row!important}.flex-xlg-column{flex-direction:column!important}.flex-xlg-row-reverse{flex-direction:row-reverse!important}.flex-xlg-column-reverse{flex-direction:column-reverse!important}.flex-xlg-wrap{flex-wrap:wrap!important}.flex-xlg-nowrap{flex-wrap:nowrap!important}.flex-xlg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xlg-start{justify-content:flex-start!important}.justify-content-xlg-end{justify-content:flex-end!important}.justify-content-xlg-center{justify-content:center!important}.justify-content-xlg-between{justify-content:space-between!important}.justify-content-xlg-around{justify-content:space-around!important}.align-items-xlg-start{align-items:flex-start!important}.align-items-xlg-end{align-items:flex-end!important}.align-items-xlg-center{align-items:center!important}.align-items-xlg-baseline{align-items:baseline!important}.align-items-xlg-stretch{align-items:stretch!important}.align-content-xlg-start{align-content:flex-start!important}.align-content-xlg-end{align-content:flex-end!important}.align-content-xlg-center{align-content:center!important}.align-content-xlg-between{align-content:space-between!important}.align-content-xlg-around{align-content:space-around!important}.align-content-xlg-stretch{align-content:stretch!important}.align-self-xlg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xlg-start{align-self:flex-start!important}.align-self-xlg-end{align-self:flex-end!important}.align-self-xlg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xlg-baseline{align-self:baseline!important}.align-self-xlg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}:host{font-family:Roboto,sans-serif;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box}:host.cmx-table{display:block}.table-container{position:relative;width:100%;height:100%;background-color:#f4f6f9;display:block}.cmx-table-header{text-decoration:none;font-size:.75rem;line-height:20px;color:#001b3a;display:block;border-collapse:collapse;margin-bottom:4px;padding:10px 0;width:100%;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box}.cmx-table-header.--scroll-spacing{padding-right:2.5vh;padding-left:0}html[dir=rtl] :host .cmx-table-header{padding-left:10px}.cmx-table-body{display:block;padding:0;background-color:none;margin-bottom:16px;overflow-x:hidden}.--truncate-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;max-width:100%;min-width:0}:host::ng-deep .cmx-table-item{border-collapse:collapse;margin-bottom:4px;padding:8px 0;height:40px;width:100%;box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;border-top:2px solid #f4f6f9;border-bottom:2px solid #f4f6f9;background-color:#fff;transition:background-color .5s ease-out;-moz-transition:background-color .5s ease-out;-webkit-transition:background-color .5s ease-out}:host::ng-deep .cmx-table-item.checked{background-color:#b7deff!important}:host::ng-deep .cmx-table-item:hover{background-color:#d6d6d6}:host::ng-deep .cmx-table-item:nth-child(even){background-color:#e8ebef}:host::ng-deep .cmx-table-item:nth-child(even):hover{background-color:#d6d6d6}:host::ng-deep .cmx-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;padding-left:12px;padding-right:12px;color:#333;font-family:Roboto,sans-serif;font-size:.75rem;line-height:.75rem}:host::ng-deep .status{width:24px;height:16px;border-radius:2px;margin-right:8px;background-color:#d6d6d6}:host::ng-deep .status.ok{background-color:#7ac943}:host::ng-deep .status.warning{background-color:#f9a23d}:host::ng-deep .status.error{background-color:#c0392b}.pagination{display:inline-block;list-style:none;padding:0;margin:0}.pagination li{display:inline-block;margin:0 8px;float:left}.pagination li a{cursor:pointer;font-size:.875rem;line-height:22px;width:24px;height:24px;display:inline-block;color:#5c6570;float:left;text-decoration:none;border-radius:2px;text-align:center;border:1px solid transparent}.pagination li a.hover,.pagination li a:hover{border:1px solid #3fa9f5}.pagination li a.current{color:#fff;background:#3fa9f5}.pagination li svg{width:8px;height:12px;fill:#3fa9f5;transition:.25s}.pagination .pagination-next.hide,.pagination .pagination-prev.hide{display:none}.pagination .pagination-next.hover a,.pagination .pagination-next:hover a,.pagination .pagination-prev.hover a,.pagination .pagination-prev:hover a{border:0}.pagination .pagination-next.hover a svg,.pagination .pagination-next:hover a svg,.pagination .pagination-prev.hover a svg,.pagination .pagination-prev:hover a svg{width:16px;height:20px;fill:#3fa9f5}"]
            }] }
];
/** @nocollapse */
CmxTableComponent.ctorParameters = () => [
    { type: WatcherService }
];
CmxTableComponent.propDecorators = {
    tableSource: [{ type: Input }],
    dataSource: [{ type: Input }],
    updateDataSource: [{ type: Input }],
    pageSize: [{ type: Input }],
    rtl: [{ type: Input }],
    cmxTableClass: [{ type: HostBinding, args: ['class.cmx-table',] }],
    rowDefinitions: [{ type: ContentChildren, args: [CmxRowTemplateDirective,] }],
    headerDefinitions: [{ type: ContentChildren, args: [CmxHeaderTemplateDirective,] }],
    headerCells: [{ type: ContentChildren, args: [CmxHeaderCellComponent, { descendants: true },] }],
    rowPlaceholder: [{ type: ViewChild, args: [RowPlaceholderDirective,] }],
    headerPlaceholder: [{ type: ViewChild, args: [HeaderPlaceholderDirective,] }],
    cmxTableBodyElement: [{ type: ViewChild, args: ['cmxTableBody',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxPaginationComponent {
    /**
     * @param {?} parent
     */
    constructor(parent) {
        this.parent = parent;
        this.pageChanged = new EventEmitter();
        this.beginning = [];
        this.end = [];
        this.state = 1;
        this.isRtl = false;
        this._currentPage = 1;
        this.range = 5;
        // strange shit that a delay is needed to set the value from the parent
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.isRtl = this.parent.rtl;
        }), 100);
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set pages($value) {
        if ($value !== undefined && $value !== null) {
            this._pages = $value;
            this.organizePages();
        }
    }
    /**
     * @return {?}
     */
    get pages() {
        return this._pages;
    }
    /**
     * @param {?} $value
     * @return {?}
     */
    set currentPage($value) {
        if ($value !== undefined && $value != null) {
            this._currentPage = $value;
            if (this._currentPage < this.range) {
                this.state = 1;
            }
            else if (this._currentPage >= this.range &&
                this._currentPage <= (this.pages - this.range)) {
                this.state = 2;
            }
            else if (this._currentPage > (this.pages - this.range)) {
                this.state = 3;
            }
        }
    }
    /**
     * @return {?}
     */
    get currentPage() {
        return this._currentPage;
    }
    /**
     * \@description Goes one page down from the current one.
     * @return {?}
     */
    previousPage() {
        /** @type {?} */
        const $calc = this.currentPage - 1;
        if ($calc > 0) {
            this.setPage($calc);
        }
    }
    /**
     * \@description Goes one page up from the current one.
     * @return {?}
     */
    nextPage() {
        /** @type {?} */
        const $calc = this.currentPage + 1;
        if ($calc <= this.pages) {
            this.setPage($calc);
        }
    }
    /**
     * \@description Check if the last page shortcut is shown
     * whether the first page is present or not.
     * @return {?} boolean
     */
    showFirstPageShortcut() {
        /** @type {?} */
        let $show = true;
        this.end.forEach((/**
         * @param {?} $page
         * @return {?}
         */
        ($page) => {
            if ($page === 1) {
                $show = false;
            }
        }));
        return $show && (this.state !== 1);
    }
    /**
     * \@description Check if the last page shortcut is shown
     * whether the last page is present or not.
     * @return {?} boolean
     */
    showLastPageShortcut() {
        /** @type {?} */
        let $show = true;
        this.beginning.forEach((/**
         * @param {?} $page
         * @return {?}
         */
        ($page) => {
            if ($page === this.pages) {
                $show = false;
            }
        }));
        return $show && (this.state !== 3);
    }
    /**
     * \@description Sets the current page from the user's click.
     * @param {?} $page
     * @return {?}
     */
    setPage($page) {
        this.currentPage = $page;
        if (this.currentPage < this.range) {
            this.state = 1;
        }
        else if (this.currentPage >= this.range &&
            this.currentPage <= (this.pages - this.range)) {
            this.state = 2;
        }
        else if (this.currentPage > (this.pages - this.range)) {
            this.state = 3;
        }
        this.pageChanged.emit(this.currentPage);
    }
    /**
     * @private
     * @return {?}
     */
    organizePages() {
        this.state = 1;
        this.currentPage = 1;
        this.beginning = [];
        this.end = [];
        /** @type {?} */
        let $i = 1;
        while ($i <= this.range && $i <= this.pages) {
            this.beginning.push($i);
            $i++;
        }
        $i = (this.pages - this.range);
        if ($i === 0) {
            $i++;
        }
        while ($i <= this.pages) {
            this.end.push($i);
            $i++;
        }
    }
}
CmxPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-pagination',
                template: "<ul class=\"pagination\" [dir]=\"isRtl ? 'rtl':''\">\r\n    <ng-container *ngIf=\"currentPage !== 1\">\r\n        <li class=\"pagination-prev\">\r\n            <a (click)=\"previousPage()\">\r\n                <ng-container *ngIf=\"isRtl === false\">\r\n                    <svg id=\"icon-straight-arrow-left\" viewBox=\"0 0 6 10\" width=\"100%\" height=\"100%\">\r\n                        <title>icon-straight-arrow-left</title>\r\n                        <polygon class=\"icon-straight-arrow-left\" points=\"4.86 0 6 1.18 2.29 5 6 8.83 4.86 10 0 5 4.86 0\"></polygon>\r\n                    </svg>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"isRtl === true\">\r\n                    <svg id=\"icon-straight-arrow-right\" viewBox=\"0 0 6 10\" width=\"100%\" height=\"100%\">\r\n                        <title>icon-straight-arrow-right</title>\r\n                        <polygon class=\"icon-straight-arrow-right\" points=\"1.14 0 0 1.18 3.71 5 0 8.83 1.14 10 6 5 1.14 0\"></polygon>\r\n                    </svg>\r\n                </ng-container>\r\n            </a>\r\n        </li>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"showFirstPageShortcut()\">\r\n        <li>\r\n            <a (click)=\"setPage(1)\">\r\n                1\r\n            </a>\r\n        </li>\r\n        <li>\r\n            ...\r\n        </li>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"state === 1\">\r\n        <ng-container *ngFor=\"let $page of beginning;\">\r\n            <li>\r\n                <a [class.current]=\"$page === currentPage\" (click)=\"setPage($page)\">\r\n                    {{ $page }}\r\n                </a>\r\n            </li>    \r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"state === 2\">\r\n        <li>\r\n            <a (click)=\"setPage(currentPage - 1)\">\r\n                {{ currentPage - 1 }}\r\n            </a>\r\n        </li>\r\n        <li>\r\n            <a class=\"current\" (click)=\"setPage(currentPage)\">\r\n                {{ currentPage }}\r\n            </a>\r\n        </li>\r\n        <li>\r\n            <a (click)=\"setPage(currentPage + 1)\">\r\n                {{ currentPage + 1 }}\r\n            </a>\r\n        </li>   \r\n    </ng-container>\r\n    <ng-container *ngIf=\"state === 3\">\r\n        <ng-container *ngFor=\"let $page of end;\">\r\n            <li>\r\n                <a [class.current]=\"$page === currentPage\" (click)=\"setPage($page)\">\r\n                    {{ $page }}\r\n                </a>\r\n            </li>      \r\n        </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"showLastPageShortcut()\">\r\n        <li>\r\n            ...\r\n        </li>\r\n        <li>\r\n            <a (click)=\"setPage(pages)\">\r\n                {{ pages }}\r\n            </a>\r\n        </li>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"currentPage !== pages\">\r\n        <li class=\"pagination-next\">\r\n            <a (click)=\"nextPage()\">\r\n                <ng-container *ngIf=\"isRtl === false\">\r\n                    <svg id=\"icon-straight-arrow-right\" viewBox=\"0 0 6 10\" width=\"100%\" height=\"100%\">\r\n                        <title>icon-straight-arrow-right</title>\r\n                        <polygon class=\"icon-straight-arrow-right\" points=\"1.14 0 0 1.18 3.71 5 0 8.83 1.14 10 6 5 1.14 0\"></polygon>\r\n                    </svg>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"isRtl === true\">\r\n                    <svg id=\"icon-straight-arrow-left\" viewBox=\"0 0 6 10\" width=\"100%\" height=\"100%\">\r\n                        <title>icon-straight-arrow-left</title>\r\n                        <polygon class=\"icon-straight-arrow-left\" points=\"4.86 0 6 1.18 2.29 5 6 8.83 4.86 10 0 5 4.86 0\"></polygon>\r\n                    </svg>\r\n                </ng-container>\r\n            </a>\r\n        </li>\r\n    </ng-container>\r\n</ul>",
                styles: [".roboto-bold{font-weight:700}.roboto-medium{font-weight:500}.roboto-regular{font-weight:400}.roboto-light{font-weight:300}.roboto-thin{font-weight:100}.h1-role,h1{font-family:Roboto,sans-serif;font-size:3rem;line-height:3rem;font-weight:700;color:#001b3a}.h2-role,.h3-role,h2,h3{font-family:Roboto,sans-serif;font-size:1.625rem;line-height:2rem;font-weight:400;color:#001b3a}.h4-role,h4{font-family:Roboto,sans-serif;font-size:2rem;line-height:2rem;font-weight:500;color:#001b3a}.h5-role,h5{font-family:Roboto,sans-serif;font-size:1.25rem;line-height:1.5rem;font-weight:400;color:#001b3a}.h6-role,h6{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;font-weight:700;color:#001b3a;text-transform:uppercase}.table-entry{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem}.table-entry-strong{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333;font-weight:700}.link,.table-entry,a{text-decoration:none;color:#3fa9f5}a:hover{text-decoration:underline}.input-placeholder{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#666}.input-text{font-family:Roboto,sans-serif;font-size:.875rem;line-height:1rem;color:#333}.size-15{font-size:.9375rem}.size-24{font-size:1.5rem}.text-left{text-align:left!important}.text-right{text-align:right!important}.text-center{text-align:center!important}.flex-first{order:-1}.flex-last{order:1}.flex-unordered{order:0}.flex-row{flex-direction:row!important}.flex-column{flex-direction:column!important}.flex-row-reverse{flex-direction:row-reverse!important}.flex-column-reverse{flex-direction:column-reverse!important}.flex-wrap{flex-wrap:wrap!important}.flex-nowrap{flex-wrap:nowrap!important}.flex-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-start{justify-content:flex-start!important}.justify-content-end{justify-content:flex-end!important}.justify-content-center{justify-content:center!important}.justify-content-between{justify-content:space-between!important}.justify-content-around{justify-content:space-around!important}.align-items-start{align-items:flex-start!important}.align-items-end{align-items:flex-end!important}.align-items-center{align-items:center!important}.align-items-baseline{align-items:baseline!important}.align-items-stretch{align-items:stretch!important}.align-content-start{align-content:flex-start!important}.align-content-end{align-content:flex-end!important}.align-content-center{align-content:center!important}.align-content-between{align-content:space-between!important}.align-content-around{align-content:space-around!important}.align-content-stretch{align-content:stretch!important}.align-self-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-start{align-self:flex-start!important}.align-self-end{align-self:flex-end!important}.align-self-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-baseline{align-self:baseline!important}.align-self-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}@media (min-width:576px){.text-xs-left{text-align:left!important}.text-xs-right{text-align:right!important}.text-xs-center{text-align:center!important}.flex-xs-first{order:-1}.flex-xs-last{order:1}.flex-xs-unordered{order:0}.flex-xs-row{flex-direction:row!important}.flex-xs-column{flex-direction:column!important}.flex-xs-row-reverse{flex-direction:row-reverse!important}.flex-xs-column-reverse{flex-direction:column-reverse!important}.flex-xs-wrap{flex-wrap:wrap!important}.flex-xs-nowrap{flex-wrap:nowrap!important}.flex-xs-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xs-start{justify-content:flex-start!important}.justify-content-xs-end{justify-content:flex-end!important}.justify-content-xs-center{justify-content:center!important}.justify-content-xs-between{justify-content:space-between!important}.justify-content-xs-around{justify-content:space-around!important}.align-items-xs-start{align-items:flex-start!important}.align-items-xs-end{align-items:flex-end!important}.align-items-xs-center{align-items:center!important}.align-items-xs-baseline{align-items:baseline!important}.align-items-xs-stretch{align-items:stretch!important}.align-content-xs-start{align-content:flex-start!important}.align-content-xs-end{align-content:flex-end!important}.align-content-xs-center{align-content:center!important}.align-content-xs-between{align-content:space-between!important}.align-content-xs-around{align-content:space-around!important}.align-content-xs-stretch{align-content:stretch!important}.align-self-xs-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xs-start{align-self:flex-start!important}.align-self-xs-end{align-self:flex-end!important}.align-self-xs-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xs-baseline{align-self:baseline!important}.align-self-xs-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:768px){.text-sm-left{text-align:left!important}.text-sm-right{text-align:right!important}.text-sm-center{text-align:center!important}.flex-sm-first{order:-1}.flex-sm-last{order:1}.flex-sm-unordered{order:0}.flex-sm-row{flex-direction:row!important}.flex-sm-column{flex-direction:column!important}.flex-sm-row-reverse{flex-direction:row-reverse!important}.flex-sm-column-reverse{flex-direction:column-reverse!important}.flex-sm-wrap{flex-wrap:wrap!important}.flex-sm-nowrap{flex-wrap:nowrap!important}.flex-sm-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-sm-start{justify-content:flex-start!important}.justify-content-sm-end{justify-content:flex-end!important}.justify-content-sm-center{justify-content:center!important}.justify-content-sm-between{justify-content:space-between!important}.justify-content-sm-around{justify-content:space-around!important}.align-items-sm-start{align-items:flex-start!important}.align-items-sm-end{align-items:flex-end!important}.align-items-sm-center{align-items:center!important}.align-items-sm-baseline{align-items:baseline!important}.align-items-sm-stretch{align-items:stretch!important}.align-content-sm-start{align-content:flex-start!important}.align-content-sm-end{align-content:flex-end!important}.align-content-sm-center{align-content:center!important}.align-content-sm-between{align-content:space-between!important}.align-content-sm-around{align-content:space-around!important}.align-content-sm-stretch{align-content:stretch!important}.align-self-sm-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-sm-start{align-self:flex-start!important}.align-self-sm-end{align-self:flex-end!important}.align-self-sm-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-sm-baseline{align-self:baseline!important}.align-self-sm-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1080px){.text-md-left{text-align:left!important}.text-md-right{text-align:right!important}.text-md-center{text-align:center!important}.flex-md-first{order:-1}.flex-md-last{order:1}.flex-md-unordered{order:0}.flex-md-row{flex-direction:row!important}.flex-md-column{flex-direction:column!important}.flex-md-row-reverse{flex-direction:row-reverse!important}.flex-md-column-reverse{flex-direction:column-reverse!important}.flex-md-wrap{flex-wrap:wrap!important}.flex-md-nowrap{flex-wrap:nowrap!important}.flex-md-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-md-start{justify-content:flex-start!important}.justify-content-md-end{justify-content:flex-end!important}.justify-content-md-center{justify-content:center!important}.justify-content-md-between{justify-content:space-between!important}.justify-content-md-around{justify-content:space-around!important}.align-items-md-start{align-items:flex-start!important}.align-items-md-end{align-items:flex-end!important}.align-items-md-center{align-items:center!important}.align-items-md-baseline{align-items:baseline!important}.align-items-md-stretch{align-items:stretch!important}.align-content-md-start{align-content:flex-start!important}.align-content-md-end{align-content:flex-end!important}.align-content-md-center{align-content:center!important}.align-content-md-between{align-content:space-between!important}.align-content-md-around{align-content:space-around!important}.align-content-md-stretch{align-content:stretch!important}.align-self-md-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-md-start{align-self:flex-start!important}.align-self-md-end{align-self:flex-end!important}.align-self-md-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-md-baseline{align-self:baseline!important}.align-self-md-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1320px){.text-lg-left{text-align:left!important}.text-lg-right{text-align:right!important}.text-lg-center{text-align:center!important}.flex-lg-first{order:-1}.flex-lg-last{order:1}.flex-lg-unordered{order:0}.flex-lg-row{flex-direction:row!important}.flex-lg-column{flex-direction:column!important}.flex-lg-row-reverse{flex-direction:row-reverse!important}.flex-lg-column-reverse{flex-direction:column-reverse!important}.flex-lg-wrap{flex-wrap:wrap!important}.flex-lg-nowrap{flex-wrap:nowrap!important}.flex-lg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-lg-start{justify-content:flex-start!important}.justify-content-lg-end{justify-content:flex-end!important}.justify-content-lg-center{justify-content:center!important}.justify-content-lg-between{justify-content:space-between!important}.justify-content-lg-around{justify-content:space-around!important}.align-items-lg-start{align-items:flex-start!important}.align-items-lg-end{align-items:flex-end!important}.align-items-lg-center{align-items:center!important}.align-items-lg-baseline{align-items:baseline!important}.align-items-lg-stretch{align-items:stretch!important}.align-content-lg-start{align-content:flex-start!important}.align-content-lg-end{align-content:flex-end!important}.align-content-lg-center{align-content:center!important}.align-content-lg-between{align-content:space-between!important}.align-content-lg-around{align-content:space-around!important}.align-content-lg-stretch{align-content:stretch!important}.align-self-lg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-lg-start{align-self:flex-start!important}.align-self-lg-end{align-self:flex-end!important}.align-self-lg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-lg-baseline{align-self:baseline!important}.align-self-lg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}@media (min-width:1560px){.text-xlg-left{text-align:left!important}.text-xlg-right{text-align:right!important}.text-xlg-center{text-align:center!important}.flex-xlg-first{order:-1}.flex-xlg-last{order:1}.flex-xlg-unordered{order:0}.flex-xlg-row{flex-direction:row!important}.flex-xlg-column{flex-direction:column!important}.flex-xlg-row-reverse{flex-direction:row-reverse!important}.flex-xlg-column-reverse{flex-direction:column-reverse!important}.flex-xlg-wrap{flex-wrap:wrap!important}.flex-xlg-nowrap{flex-wrap:nowrap!important}.flex-xlg-wrap-reverse{flex-wrap:wrap-reverse!important}.justify-content-xlg-start{justify-content:flex-start!important}.justify-content-xlg-end{justify-content:flex-end!important}.justify-content-xlg-center{justify-content:center!important}.justify-content-xlg-between{justify-content:space-between!important}.justify-content-xlg-around{justify-content:space-around!important}.align-items-xlg-start{align-items:flex-start!important}.align-items-xlg-end{align-items:flex-end!important}.align-items-xlg-center{align-items:center!important}.align-items-xlg-baseline{align-items:baseline!important}.align-items-xlg-stretch{align-items:stretch!important}.align-content-xlg-start{align-content:flex-start!important}.align-content-xlg-end{align-content:flex-end!important}.align-content-xlg-center{align-content:center!important}.align-content-xlg-between{align-content:space-between!important}.align-content-xlg-around{align-content:space-around!important}.align-content-xlg-stretch{align-content:stretch!important}.align-self-xlg-auto{-ms-grid-row-align:auto!important;align-self:auto!important}.align-self-xlg-start{align-self:flex-start!important}.align-self-xlg-end{align-self:flex-end!important}.align-self-xlg-center{-ms-grid-row-align:center!important;align-self:center!important}.align-self-xlg-baseline{align-self:baseline!important}.align-self-xlg-stretch{-ms-grid-row-align:stretch!important;align-self:stretch!important}}.pagination{display:inline-block;list-style:none;padding:0;margin:0}.pagination li{margin:0 8px;float:left}.pagination li a{cursor:pointer;font-size:.875rem;line-height:22px;width:24px;height:24px;display:inline-block;color:#5c6570;float:left;text-decoration:none;border-radius:2px;text-align:center;border:1px solid transparent}.pagination li a.hover,.pagination li a:hover{border:1px solid #3fa9f5}.pagination li a.current{color:#fff;background:#3fa9f5}.pagination li svg{width:8px;height:12px;fill:#3fa9f5;transition:.25s}.pagination .pagination-next.hide,.pagination .pagination-prev.hide{display:none}.pagination .pagination-next.hover a,.pagination .pagination-next:hover a,.pagination .pagination-prev.hover a,.pagination .pagination-prev:hover a{border:0}.pagination .pagination-next.hover a svg,.pagination .pagination-next:hover a svg,.pagination .pagination-prev.hover a svg,.pagination .pagination-prev:hover a svg{width:16px;height:20px;fill:#3fa9f5}.pagination[dir=rtl] li{float:right}"]
            }] }
];
/** @nocollapse */
CmxPaginationComponent.ctorParameters = () => [
    { type: CmxTableComponent, decorators: [{ type: Host }] }
];
CmxPaginationComponent.propDecorators = {
    pages: [{ type: Input }],
    currentPage: [{ type: Input }],
    pageChanged: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxTableItemDirective {
    constructor() {
        this.cmxTableItemClass = true;
    }
}
CmxTableItemDirective.decorators = [
    { type: Directive, args: [{
                selector: 'cmx-table-item, [cmx-table-item]',
            },] }
];
/** @nocollapse */
CmxTableItemDirective.ctorParameters = () => [];
CmxTableItemDirective.propDecorators = {
    cmxTableItemClass: [{ type: HostBinding, args: ['class.cmx-table-item',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxCellDirective {
    constructor() {
        this.cmxCellClass = true;
    }
}
CmxCellDirective.decorators = [
    { type: Directive, args: [{
                selector: 'cmx-cell, [cmx-cell]',
            },] }
];
/** @nocollapse */
CmxCellDirective.ctorParameters = () => [];
CmxCellDirective.propDecorators = {
    cmxCellClass: [{ type: HostBinding, args: ['class.cmx-cell',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CmxTableModule {
}
CmxTableModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    FlexLayoutModule,
                    CmxCheckboxModule,
                    CmxDatepickerModule,
                ],
                declarations: [
                    CmxTableComponent,
                    CmxCheckboxFiltersComponent,
                    CmxRowTemplateDirective,
                    CmxHeaderTemplateDirective,
                    RowPlaceholderDirective,
                    HeaderPlaceholderDirective,
                    CmxHeaderCellComponent,
                    CmxFilterSorterComponent,
                    CmxCellDirective,
                    CmxTableItemDirective,
                    CmxDatepickerFilterComponent,
                    CmxPaginationComponent,
                ],
                exports: [
                    CmxTableComponent,
                    CmxCheckboxFiltersComponent,
                    CmxRowTemplateDirective,
                    CmxHeaderTemplateDirective,
                    CmxFilterSorterComponent,
                    RowPlaceholderDirective,
                    HeaderPlaceholderDirective,
                    CmxHeaderCellComponent,
                    CmxCellDirective,
                    CmxTableItemDirective,
                    CmxDatepickerFilterComponent,
                    CmxPaginationComponent,
                ],
                providers: [
                    WatcherService,
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Column {
    /**
     * @param {?} _name
     * @param {?} _columnKey
     * @param {?} _active
     * @param {?} _on
     * @param {?=} _nameValueKey
     * @param {?=} _filterValueKey
     * @param {?=} _hide
     */
    constructor(_name, _columnKey, _active, _on, _nameValueKey, _filterValueKey, _hide) {
        this.name = _name;
        this.columnKey = _columnKey;
        this.active = _active;
        this.on = _on;
        this.filters = [];
        this.nameValueKey = _nameValueKey;
        this.filterValueKey = _filterValueKey;
        this.hide = _hide;
    }
    /**
     * @return {?}
     */
    addDateFilter() {
        if (this.nameValueKey) {
            /** @type {?} */
            const dates = {
                min: new Date(),
                max: new Date()
            };
            /** @type {?} */
            const aux = new Filter(this.nameValueKey, dates, false, this.columnKey);
            this.dateFilter = aux;
        }
    }
    /**
     * @param {?} item
     * @param {?=} isDate
     * @return {?}
     */
    addFilter(item, isDate) {
        if (this.nameValueKey && this.filterValueKey) {
            /** @type {?} */
            const filter = this.filters.find((/**
             * @param {?} $element
             * @return {?}
             */
            ($element) => $element.value === item[this.filterValueKey]));
            if (filter === undefined) {
                /** @type {?} */
                const aux = new Filter(item[this.nameValueKey], item[this.filterValueKey], false, this.columnKey);
                this.filters.push(aux);
            }
        }
    }
    /**
     * @return {?}
     */
    getName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getKey() {
        return this.columnKey;
    }
    /**
     * @return {?}
     */
    getFilterNameKey() {
        return this.nameValueKey;
    }
    /**
     * @return {?}
     */
    getFilterValueKey() {
        return this.filterValueKey;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return this.filters;
    }
    /**
     * @param {?} $filters
     * @return {?}
     */
    setFilters($filters) {
        this.filters = $filters;
    }
    /**
     * @return {?}
     */
    getDateFilter() {
        return this.dateFilter;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getFilterFunction(filter) {
        if (this.filters.length > 0) {
            /** @type {?} */
            const aux = this.filters[0].value;
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericFilterFunction(filter);
            }
            else {
                return this.commonFilterFunction(filter);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateFilterFunction(filter);
        }
        return undefined;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    commonFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return item[this.filterValueKey] === filter.value;
        });
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    dateFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (typeof filter.value.min === 'string') {
                filter.value.min = this.getDateObject(filter.value.min);
            }
            if (typeof filter.value.max === 'string') {
                filter.value.max = this.getDateObject(filter.value.max);
            }
            /** @type {?} */
            const min = filter.value.min.getTime();
            /** @type {?} */
            const max = filter.value.max.getTime();
            return (item[this.filterValueKey] !== undefined &&
                min <= item[this.filterValueKey].getTime() &&
                item[this.filterValueKey].getTime() <= max);
        });
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    numericFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return item[this.filterValueKey] === filter.value;
            // return filter.value.min <= item[ this.filterValueKey ] &&
            // item[ this.filterValueKey ] <= filter.value.max;
        });
    }
    /**
     * @return {?}
     */
    clearFilters() {
        this.filters = [];
    }
    /**
     * @param {?} ASC
     * @return {?}
     */
    getSortFunction(ASC) {
        if (this.filters.length > 0) {
            /** @type {?} */
            const aux = this.filters[0].value;
            if (typeof aux === 'string' || aux instanceof String) {
                return this.stringSortFunction(ASC);
            }
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericSortFunction(ASC);
            }
            if (typeof aux === 'boolean') {
                return this.booleanSortFunction(ASC);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateSortFunction(ASC);
        }
        return undefined;
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    stringSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                return 1;
            }
            /** @type {?} */
            const order = (ASC) ? 1 : -1;
            return order * a[this.filterValueKey].localeCompare(b[this.filterValueKey]);
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    numericSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] < b[this.filterValueKey]) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] > b[this.filterValueKey]) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    booleanSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                return 1;
            }
            if (a[this.filterValueKey] === true && b[this.filterValueKey] === false) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] === false && b[this.filterValueKey] === true) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    dateSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey].getTime() < b[this.filterValueKey].getTime()) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey].getTime() > b[this.filterValueKey].getTime()) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getDateObject(date) {
        /** @type {?} */
        const auxDate = date.replace(/-g/, '/');
        /** @type {?} */
        const bits = auxDate.split(/\D/);
        /** @type {?} */
        const month = parseInt(bits[1], 10) - 1;
        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CmxTableModule, CmxTableComponent, Column, Filter, Table, CmxCheckboxFiltersComponent as ɵd, CmxDatepickerFilterComponent as ɵf, CmxHeaderCellComponent as ɵc, CmxPaginationComponent as ɵl, CmxFilterSorterComponent as ɵg, CmxCellDirective as ɵj, HeaderPlaceholderDirective as ɵi, CmxHeaderTemplateDirective as ɵb, RowPlaceholderDirective as ɵh, CmxRowTemplateDirective as ɵa, CmxTableItemDirective as ɵk, WatcherService as ɵe };

//# sourceMappingURL=cemex-cmx-table-v7.js.map