/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/** @type {?} */
var $tableId = 0;
/**
 * @record
 */
function WatchSubject() { }
if (false) {
    /** @type {?} */
    WatchSubject.prototype.id;
    /** @type {?} */
    WatchSubject.prototype.activeFilters;
    /** @type {?} */
    WatchSubject.prototype.activeFiltersSubject;
}
var WatcherService = /** @class */ (function () {
    function WatcherService() {
        this.watchSubjects = [];
    }
    /**
     * @return {?}
     */
    WatcherService.prototype.clearActiveFilters = /**
     * @return {?}
     */
    function () {
        this.watchSubjects.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        function (sub) {
            sub.activeFiltersSubject.next([]);
        }));
    };
    /**
     * @return {?}
     */
    WatcherService.prototype.createSubject = /**
     * @return {?}
     */
    function () {
        $tableId++;
        /** @type {?} */
        var $subject = {
            id: $tableId,
            activeFilters: [],
            activeFiltersSubject: new BehaviorSubject([]),
        };
        this.watchSubjects.push($subject);
        return $tableId;
    };
    /**
     * @param {?} $id
     * @return {?}
     */
    WatcherService.prototype.listenToActiveFilters = /**
     * @param {?} $id
     * @return {?}
     */
    function ($id) {
        /** @type {?} */
        var $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        function ($element) { return $element.id === $id; }));
        return $aux.activeFiltersSubject.asObservable();
    };
    /**
     * @param {?} $id
     * @param {?} $filtersValue
     * @return {?}
     */
    WatcherService.prototype.emitActiveFilters = /**
     * @param {?} $id
     * @param {?} $filtersValue
     * @return {?}
     */
    function ($id, $filtersValue) {
        /** @type {?} */
        var $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        function ($element) { return $element.id === $id; }));
        $filtersValue.forEach((/**
         * @param {?} $filter
         * @return {?}
         */
        function ($filter) {
            /** @type {?} */
            var $foundIndex = $aux.activeFilters.findIndex((/**
             * @param {?} $element
             * @return {?}
             */
            function ($element) { return $element.name === $filter.name; }));
            if ($foundIndex === -1 && $filter.active === true) {
                // new filter to push
                $aux.activeFilters.push($filter);
            }
            else if ($foundIndex > -1 && $filter.active === false) {
                // filter was in the array but now has been deactivaded
                $aux.activeFilters.splice($foundIndex, 1);
            }
        }));
        $aux.activeFiltersSubject.next($aux.activeFilters);
    };
    WatcherService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    WatcherService.ctorParameters = function () { return []; };
    return WatcherService;
}());
export { WatcherService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WatcherService.prototype.watchSubjects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4L2NteC10YWJsZS12Ny8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy93YXRjaGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFJL0MsUUFBUSxHQUFHLENBQUM7Ozs7QUFFaEIsMkJBSUM7OztJQUhHLDBCQUFXOztJQUNYLHFDQUF3Qjs7SUFDeEIsNENBQWdEOztBQUdwRDtJQUlJO1FBRlEsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0lBRTNCLENBQUM7Ozs7SUFFViwyQ0FBa0I7OztJQUF6QjtRQUNJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsR0FBRztZQUMzQixHQUFHLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7OztJQUVNLHNDQUFhOzs7SUFBcEI7UUFDSSxRQUFRLEVBQUUsQ0FBQzs7WUFDTCxRQUFRLEdBQWlCO1lBQzNCLEVBQUUsRUFBRSxRQUFRO1lBQ1osYUFBYSxFQUFFLEVBQUU7WUFDakIsb0JBQW9CLEVBQUUsSUFBSSxlQUFlLENBQVcsRUFBRSxDQUFDO1NBQzFEO1FBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDbEMsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQzs7Ozs7SUFFTSw4Q0FBcUI7Ozs7SUFBNUIsVUFBNkIsR0FBVzs7WUFDOUIsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSTs7OztRQUNoQyxVQUFDLFFBQVEsSUFBSyxPQUFBLFFBQVEsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFuQixDQUFtQixFQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7OztJQUVNLDBDQUFpQjs7Ozs7SUFBeEIsVUFBeUIsR0FBVyxFQUFFLGFBQXVCOztZQUNuRCxJQUFJLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJOzs7O1FBQ2hDLFVBQUMsUUFBUSxJQUFLLE9BQUEsUUFBUSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQW5CLENBQW1CLEVBQ3BDO1FBQ0QsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLE9BQU87O2dCQUNwQixXQUFXLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTOzs7O1lBQzVDLFVBQUMsUUFBUSxJQUFLLE9BQUEsUUFBUSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxFQUE5QixDQUE4QixFQUMvQztZQUNELElBQUksV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO2dCQUMvQyxxQkFBcUI7Z0JBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3BDO2lCQUFNLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO2dCQUNyRCx1REFBdUQ7Z0JBQ3ZELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QztRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7Z0JBL0NKLFVBQVU7Ozs7SUFnRFgscUJBQUM7Q0FBQSxBQWhERCxJQWdEQztTQS9DWSxjQUFjOzs7Ozs7SUFDdkIsdUNBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi9jbGFzc2VzL2ZpbHRlci5jbGFzcyc7XHJcblxyXG5sZXQgJHRhYmxlSWQgPSAwO1xyXG5cclxuaW50ZXJmYWNlIFdhdGNoU3ViamVjdCB7XHJcbiAgICBpZDogbnVtYmVyO1xyXG4gICAgYWN0aXZlRmlsdGVyczogRmlsdGVyW107XHJcbiAgICBhY3RpdmVGaWx0ZXJzU3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PEZpbHRlcltdPjtcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgV2F0Y2hlclNlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSB3YXRjaFN1YmplY3RzOiBXYXRjaFN1YmplY3RbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgcHVibGljIGNsZWFyQWN0aXZlRmlsdGVycygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLndhdGNoU3ViamVjdHMuZm9yRWFjaCgoc3ViKSA9PiB7XHJcbiAgICAgICAgICAgIHN1Yi5hY3RpdmVGaWx0ZXJzU3ViamVjdC5uZXh0KFtdKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY3JlYXRlU3ViamVjdCgpOiBudW1iZXIge1xyXG4gICAgICAgICR0YWJsZUlkKys7XHJcbiAgICAgICAgY29uc3QgJHN1YmplY3Q6IFdhdGNoU3ViamVjdCA9IHtcclxuICAgICAgICAgICAgaWQ6ICR0YWJsZUlkLFxyXG4gICAgICAgICAgICBhY3RpdmVGaWx0ZXJzOiBbXSxcclxuICAgICAgICAgICAgYWN0aXZlRmlsdGVyc1N1YmplY3Q6IG5ldyBCZWhhdmlvclN1YmplY3Q8RmlsdGVyW10+KFtdKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMud2F0Y2hTdWJqZWN0cy5wdXNoKCRzdWJqZWN0KTtcclxuICAgICAgICByZXR1cm4gJHRhYmxlSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxpc3RlblRvQWN0aXZlRmlsdGVycygkaWQ6IG51bWJlcik6IE9ic2VydmFibGU8RmlsdGVyW10+IHtcclxuICAgICAgICBjb25zdCAkYXV4ID0gdGhpcy53YXRjaFN1YmplY3RzLmZpbmQoXHJcbiAgICAgICAgICAgICgkZWxlbWVudCkgPT4gJGVsZW1lbnQuaWQgPT09ICRpZFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuICRhdXguYWN0aXZlRmlsdGVyc1N1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVtaXRBY3RpdmVGaWx0ZXJzKCRpZDogbnVtYmVyLCAkZmlsdGVyc1ZhbHVlOiBGaWx0ZXJbXSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0ICRhdXggPSB0aGlzLndhdGNoU3ViamVjdHMuZmluZChcclxuICAgICAgICAgICAgKCRlbGVtZW50KSA9PiAkZWxlbWVudC5pZCA9PT0gJGlkXHJcbiAgICAgICAgKTtcclxuICAgICAgICAkZmlsdGVyc1ZhbHVlLmZvckVhY2goKCRmaWx0ZXIpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgJGZvdW5kSW5kZXggPSAkYXV4LmFjdGl2ZUZpbHRlcnMuZmluZEluZGV4KFxyXG4gICAgICAgICAgICAgICAgKCRlbGVtZW50KSA9PiAkZWxlbWVudC5uYW1lID09PSAkZmlsdGVyLm5hbWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKCRmb3VuZEluZGV4ID09PSAtMSAmJiAkZmlsdGVyLmFjdGl2ZSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gbmV3IGZpbHRlciB0byBwdXNoXHJcbiAgICAgICAgICAgICAgICAkYXV4LmFjdGl2ZUZpbHRlcnMucHVzaCgkZmlsdGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICgkZm91bmRJbmRleCA+IC0xICYmICRmaWx0ZXIuYWN0aXZlID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIHdhcyBpbiB0aGUgYXJyYXkgYnV0IG5vdyBoYXMgYmVlbiBkZWFjdGl2YWRlZFxyXG4gICAgICAgICAgICAgICAgJGF1eC5hY3RpdmVGaWx0ZXJzLnNwbGljZSgkZm91bmRJbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICAkYXV4LmFjdGl2ZUZpbHRlcnNTdWJqZWN0Lm5leHQoJGF1eC5hY3RpdmVGaWx0ZXJzKTtcclxuICAgIH1cclxufVxyXG4iXX0=