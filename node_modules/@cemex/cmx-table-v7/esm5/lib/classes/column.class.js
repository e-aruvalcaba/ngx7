/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Filter } from './filter.class';
var Column = /** @class */ (function () {
    function Column(_name, _columnKey, _active, _on, _nameValueKey, _filterValueKey, _hide) {
        this.name = _name;
        this.columnKey = _columnKey;
        this.active = _active;
        this.on = _on;
        this.filters = [];
        this.nameValueKey = _nameValueKey;
        this.filterValueKey = _filterValueKey;
        this.hide = _hide;
    }
    /**
     * @return {?}
     */
    Column.prototype.addDateFilter = /**
     * @return {?}
     */
    function () {
        if (this.nameValueKey) {
            /** @type {?} */
            var dates = {
                min: new Date(),
                max: new Date()
            };
            /** @type {?} */
            var aux = new Filter(this.nameValueKey, dates, false, this.columnKey);
            this.dateFilter = aux;
        }
    };
    /**
     * @param {?} item
     * @param {?=} isDate
     * @return {?}
     */
    Column.prototype.addFilter = /**
     * @param {?} item
     * @param {?=} isDate
     * @return {?}
     */
    function (item, isDate) {
        var _this = this;
        if (this.nameValueKey && this.filterValueKey) {
            /** @type {?} */
            var filter = this.filters.find((/**
             * @param {?} $element
             * @return {?}
             */
            function ($element) { return $element.value === item[_this.filterValueKey]; }));
            if (filter === undefined) {
                /** @type {?} */
                var aux = new Filter(item[this.nameValueKey], item[this.filterValueKey], false, this.columnKey);
                this.filters.push(aux);
            }
        }
    };
    /**
     * @return {?}
     */
    Column.prototype.getName = /**
     * @return {?}
     */
    function () {
        return this.name;
    };
    /**
     * @return {?}
     */
    Column.prototype.getKey = /**
     * @return {?}
     */
    function () {
        return this.columnKey;
    };
    /**
     * @return {?}
     */
    Column.prototype.getFilterNameKey = /**
     * @return {?}
     */
    function () {
        return this.nameValueKey;
    };
    /**
     * @return {?}
     */
    Column.prototype.getFilterValueKey = /**
     * @return {?}
     */
    function () {
        return this.filterValueKey;
    };
    /**
     * @return {?}
     */
    Column.prototype.getFilters = /**
     * @return {?}
     */
    function () {
        return this.filters;
    };
    /**
     * @param {?} $filters
     * @return {?}
     */
    Column.prototype.setFilters = /**
     * @param {?} $filters
     * @return {?}
     */
    function ($filters) {
        this.filters = $filters;
    };
    /**
     * @return {?}
     */
    Column.prototype.getDateFilter = /**
     * @return {?}
     */
    function () {
        return this.dateFilter;
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    Column.prototype.getFilterFunction = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        if (this.filters.length > 0) {
            /** @type {?} */
            var aux = this.filters[0].value;
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericFilterFunction(filter);
            }
            else {
                return this.commonFilterFunction(filter);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateFilterFunction(filter);
        }
        return undefined;
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    Column.prototype.commonFilterFunction = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        return (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item[_this.filterValueKey] === filter.value;
        });
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    Column.prototype.dateFilterFunction = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        return (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (typeof filter.value.min === 'string') {
                filter.value.min = _this.getDateObject(filter.value.min);
            }
            if (typeof filter.value.max === 'string') {
                filter.value.max = _this.getDateObject(filter.value.max);
            }
            /** @type {?} */
            var min = filter.value.min.getTime();
            /** @type {?} */
            var max = filter.value.max.getTime();
            return (item[_this.filterValueKey] !== undefined &&
                min <= item[_this.filterValueKey].getTime() &&
                item[_this.filterValueKey].getTime() <= max);
        });
    };
    /**
     * @param {?} filter
     * @return {?}
     */
    Column.prototype.numericFilterFunction = /**
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        var _this = this;
        return (/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return item[_this.filterValueKey] === filter.value;
            // return filter.value.min <= item[ this.filterValueKey ] &&
            // item[ this.filterValueKey ] <= filter.value.max;
        });
    };
    /**
     * @return {?}
     */
    Column.prototype.clearFilters = /**
     * @return {?}
     */
    function () {
        this.filters = [];
    };
    /**
     * @param {?} ASC
     * @return {?}
     */
    Column.prototype.getSortFunction = /**
     * @param {?} ASC
     * @return {?}
     */
    function (ASC) {
        if (this.filters.length > 0) {
            /** @type {?} */
            var aux = this.filters[0].value;
            if (typeof aux === 'string' || aux instanceof String) {
                return this.stringSortFunction(ASC);
            }
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericSortFunction(ASC);
            }
            if (typeof aux === 'boolean') {
                return this.booleanSortFunction(ASC);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateSortFunction(ASC);
        }
        return undefined;
    };
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    Column.prototype.stringSortFunction = /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    function (ASC) {
        var _this = this;
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a[_this.filterValueKey] === undefined) {
                return 1;
            }
            /** @type {?} */
            var order = (ASC) ? 1 : -1;
            return order * a[_this.filterValueKey].localeCompare(b[_this.filterValueKey]);
        });
    };
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    Column.prototype.numericSortFunction = /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    function (ASC) {
        var _this = this;
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a[_this.filterValueKey] === undefined) {
                /** @type {?} */
                var order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[_this.filterValueKey] === undefined) {
                /** @type {?} */
                var order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[_this.filterValueKey] < b[_this.filterValueKey]) {
                /** @type {?} */
                var order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[_this.filterValueKey] > b[_this.filterValueKey]) {
                /** @type {?} */
                var order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    };
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    Column.prototype.booleanSortFunction = /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    function (ASC) {
        var _this = this;
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a[_this.filterValueKey] === undefined) {
                return 1;
            }
            if (a[_this.filterValueKey] === true && b[_this.filterValueKey] === false) {
                /** @type {?} */
                var order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[_this.filterValueKey] === false && b[_this.filterValueKey] === true) {
                /** @type {?} */
                var order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    };
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    Column.prototype.dateSortFunction = /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    function (ASC) {
        var _this = this;
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            if (a[_this.filterValueKey] === undefined) {
                /** @type {?} */
                var order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[_this.filterValueKey] === undefined) {
                /** @type {?} */
                var order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[_this.filterValueKey].getTime() < b[_this.filterValueKey].getTime()) {
                /** @type {?} */
                var order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[_this.filterValueKey].getTime() > b[_this.filterValueKey].getTime()) {
                /** @type {?} */
                var order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    Column.prototype.getDateObject = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var auxDate = date.replace(/-g/, '/');
        /** @type {?} */
        var bits = auxDate.split(/\D/);
        /** @type {?} */
        var month = parseInt(bits[1], 10) - 1;
        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
    };
    return Column;
}());
export { Column };
if (false) {
    /** @type {?} */
    Column.prototype.active;
    /** @type {?} */
    Column.prototype.on;
    /** @type {?} */
    Column.prototype.hide;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.name;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.columnKey;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.filters;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.dateFilter;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.nameValueKey;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.filterValueKey;
}
//# sourceMappingURL=data:application/json;base64,