/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Host } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Filter } from '../../classes/filter.class';
import { WatcherService } from '../../services/watcher.service';
import { CmxTableComponent } from '../cmx-table/cmx-table.component';
var CmxDatepickerFilterComponent = /** @class */ (function () {
    function CmxDatepickerFilterComponent(watcher, parent) {
        this.watcher = watcher;
        this.parent = parent;
        this.isRtl = false;
        this.activeFilter = new BehaviorSubject(false);
        this.isRtl = this.parent.rtl;
    }
    /**
     * @return {?}
     */
    CmxDatepickerFilterComponent.prototype.listenToActiveFilter = /**
     * @return {?}
     */
    function () {
        return this.activeFilter.asObservable();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CmxDatepickerFilterComponent.prototype.activateFilter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.filter.value = $event.value;
        this.filter.active = true;
        /** @type {?} */
        var $aux = [this.filter];
        this.activeFilter.next(true);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    };
    /**
     * @return {?}
     */
    CmxDatepickerFilterComponent.prototype.removeFilter = /**
     * @return {?}
     */
    function () {
        this.filter.active = false;
        /** @type {?} */
        var $aux = [this.filter];
        this.activeFilter.next(false);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    };
    CmxDatepickerFilterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'cmx-datepicker-filter',
                    template: "<cmx-datepicker (select)=\"activateFilter( $event )\" (cancel)=\"removeFilter()\" [rtl]=\"isRtl\"></cmx-datepicker>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    CmxDatepickerFilterComponent.ctorParameters = function () { return [
        { type: WatcherService },
        { type: CmxTableComponent, decorators: [{ type: Host }] }
    ]; };
    CmxDatepickerFilterComponent.propDecorators = {
        filter: [{ type: Input }]
    };
    return CmxDatepickerFilterComponent;
}());
export { CmxDatepickerFilterComponent };
if (false) {
    /** @type {?} */
    CmxDatepickerFilterComponent.prototype.filter;
    /** @type {?} */
    CmxDatepickerFilterComponent.prototype.isRtl;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.activeFilter;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.watcher;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.parent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC9jbXgtdGFibGUtdjcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jbXgtZGF0ZXBpY2tlci1maWx0ZXIvY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZELE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVyRTtJQVdJLHNDQUFvQixPQUF1QixFQUFrQixNQUF5QjtRQUFsRSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUFrQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUgvRSxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2IsaUJBQVksR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFHakYsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRU0sMkRBQW9COzs7SUFBM0I7UUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUMsQ0FBQzs7Ozs7SUFFTSxxREFBYzs7OztJQUFyQixVQUFzQixNQUFXO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztZQUNwQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7OztJQUVNLG1EQUFZOzs7SUFBbkI7UUFDSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O1lBQ3JCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDOztnQkFoQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLCtIQUFxRDs7aUJBRXhEOzs7O2dCQVBRLGNBQWM7Z0JBQ2QsaUJBQWlCLHVCQWF3QixJQUFJOzs7eUJBTGpELEtBQUs7O0lBMkJWLG1DQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0E1QlksNEJBQTRCOzs7SUFDckMsOENBQStCOztJQUUvQiw2Q0FBcUI7Ozs7O0lBQ3JCLG9EQUFxRjs7Ozs7SUFFekUsK0NBQStCOzs7OztJQUFFLDhDQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIEhvc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi4vLi4vY2xhc3Nlcy9maWx0ZXIuY2xhc3MnO1xyXG5pbXBvcnQgeyBXYXRjaGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3dhdGNoZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IENteFRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi4vY214LXRhYmxlL2NteC10YWJsZS5jb21wb25lbnQnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2NteC1kYXRlcGlja2VyLWZpbHRlcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlVXJsczogWycuLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Njc3MvY214LXRhYmxlL3YxL2NteC1kYXRlcGlja2VyLWZpbHRlci5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDbXhEYXRlcGlja2VyRmlsdGVyQ29tcG9uZW50IHtcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBmaWx0ZXI6IEZpbHRlcjtcclxuXHJcbiAgICBwdWJsaWMgaXNSdGwgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgYWN0aXZlRmlsdGVyOiBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdhdGNoZXI6IFdhdGNoZXJTZXJ2aWNlLCBASG9zdCgpIHByaXZhdGUgcGFyZW50OiBDbXhUYWJsZUNvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNSdGwgPSB0aGlzLnBhcmVudC5ydGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGxpc3RlblRvQWN0aXZlRmlsdGVyKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZUZpbHRlci5hc09ic2VydmFibGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWN0aXZhdGVGaWx0ZXIoJGV2ZW50OiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZpbHRlci52YWx1ZSA9ICRldmVudC52YWx1ZTtcclxuICAgICAgICB0aGlzLmZpbHRlci5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIGNvbnN0ICRhdXggPSBbdGhpcy5maWx0ZXJdO1xyXG4gICAgICAgIHRoaXMuYWN0aXZlRmlsdGVyLm5leHQodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy53YXRjaGVyLmVtaXRBY3RpdmVGaWx0ZXJzKHRoaXMucGFyZW50LmFzc2lnbmVkSWQsICRhdXgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVGaWx0ZXIoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXIuYWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgY29uc3QgJGF1eCA9IFt0aGlzLmZpbHRlcl07XHJcbiAgICAgICAgdGhpcy5hY3RpdmVGaWx0ZXIubmV4dChmYWxzZSk7XHJcbiAgICAgICAgdGhpcy53YXRjaGVyLmVtaXRBY3RpdmVGaWx0ZXJzKHRoaXMucGFyZW50LmFzc2lnbmVkSWQsICRhdXgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==