/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
/** @type {?} */
let $tableId = 0;
/**
 * @record
 */
function WatchSubject() { }
if (false) {
    /** @type {?} */
    WatchSubject.prototype.id;
    /** @type {?} */
    WatchSubject.prototype.activeFilters;
    /** @type {?} */
    WatchSubject.prototype.activeFiltersSubject;
}
export class WatcherService {
    constructor() {
        this.watchSubjects = [];
    }
    /**
     * @return {?}
     */
    clearActiveFilters() {
        this.watchSubjects.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        (sub) => {
            sub.activeFiltersSubject.next([]);
        }));
    }
    /**
     * @return {?}
     */
    createSubject() {
        $tableId++;
        /** @type {?} */
        const $subject = {
            id: $tableId,
            activeFilters: [],
            activeFiltersSubject: new BehaviorSubject([]),
        };
        this.watchSubjects.push($subject);
        return $tableId;
    }
    /**
     * @param {?} $id
     * @return {?}
     */
    listenToActiveFilters($id) {
        /** @type {?} */
        const $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        ($element) => $element.id === $id));
        return $aux.activeFiltersSubject.asObservable();
    }
    /**
     * @param {?} $id
     * @param {?} $filtersValue
     * @return {?}
     */
    emitActiveFilters($id, $filtersValue) {
        /** @type {?} */
        const $aux = this.watchSubjects.find((/**
         * @param {?} $element
         * @return {?}
         */
        ($element) => $element.id === $id));
        $filtersValue.forEach((/**
         * @param {?} $filter
         * @return {?}
         */
        ($filter) => {
            /** @type {?} */
            const $foundIndex = $aux.activeFilters.findIndex((/**
             * @param {?} $element
             * @return {?}
             */
            ($element) => $element.name === $filter.name));
            if ($foundIndex === -1 && $filter.active === true) {
                // new filter to push
                $aux.activeFilters.push($filter);
            }
            else if ($foundIndex > -1 && $filter.active === false) {
                // filter was in the array but now has been deactivaded
                $aux.activeFilters.splice($foundIndex, 1);
            }
        }));
        $aux.activeFiltersSubject.next($aux.activeFilters);
    }
}
WatcherService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
WatcherService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    WatcherService.prototype.watchSubjects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2F0Y2hlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbWV4L2NteC10YWJsZS12Ny8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy93YXRjaGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7SUFJL0MsUUFBUSxHQUFHLENBQUM7Ozs7QUFFaEIsMkJBSUM7OztJQUhHLDBCQUFXOztJQUNYLHFDQUF3Qjs7SUFDeEIsNENBQWdEOztBQUlwRCxNQUFNLE9BQU8sY0FBYztJQUd2QjtRQUZRLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztJQUUzQixDQUFDOzs7O0lBRVYsa0JBQWtCO1FBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTzs7OztRQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDL0IsR0FBRyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7SUFFTSxhQUFhO1FBQ2hCLFFBQVEsRUFBRSxDQUFDOztjQUNMLFFBQVEsR0FBaUI7WUFDM0IsRUFBRSxFQUFFLFFBQVE7WUFDWixhQUFhLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsRUFBRSxJQUFJLGVBQWUsQ0FBVyxFQUFFLENBQUM7U0FDMUQ7UUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNsQyxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVNLHFCQUFxQixDQUFDLEdBQVc7O2NBQzlCLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUk7Ozs7UUFDaEMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUNwQztRQUNELE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3BELENBQUM7Ozs7OztJQUVNLGlCQUFpQixDQUFDLEdBQVcsRUFBRSxhQUF1Qjs7Y0FDbkQsSUFBSSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSTs7OztRQUNoQyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxHQUFHLEVBQ3BDO1FBQ0QsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxDQUFDLE9BQU8sRUFBRSxFQUFFOztrQkFDeEIsV0FBVyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUzs7OztZQUM1QyxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUMsSUFBSSxFQUMvQztZQUNELElBQUksV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssSUFBSSxFQUFFO2dCQUMvQyxxQkFBcUI7Z0JBQ3JCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ3BDO2lCQUFNLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssS0FBSyxFQUFFO2dCQUNyRCx1REFBdUQ7Z0JBQ3ZELElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUM3QztRQUNMLENBQUMsRUFBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7O1lBL0NKLFVBQVU7Ozs7Ozs7OztJQUVQLHVDQUEyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgRmlsdGVyIH0gZnJvbSAnLi4vY2xhc3Nlcy9maWx0ZXIuY2xhc3MnO1xyXG5cclxubGV0ICR0YWJsZUlkID0gMDtcclxuXHJcbmludGVyZmFjZSBXYXRjaFN1YmplY3Qge1xyXG4gICAgaWQ6IG51bWJlcjtcclxuICAgIGFjdGl2ZUZpbHRlcnM6IEZpbHRlcltdO1xyXG4gICAgYWN0aXZlRmlsdGVyc1N1YmplY3Q6IEJlaGF2aW9yU3ViamVjdDxGaWx0ZXJbXT47XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFdhdGNoZXJTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgd2F0Y2hTdWJqZWN0czogV2F0Y2hTdWJqZWN0W10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhckFjdGl2ZUZpbHRlcnMoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy53YXRjaFN1YmplY3RzLmZvckVhY2goKHN1YikgPT4ge1xyXG4gICAgICAgICAgICBzdWIuYWN0aXZlRmlsdGVyc1N1YmplY3QubmV4dChbXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZVN1YmplY3QoKTogbnVtYmVyIHtcclxuICAgICAgICAkdGFibGVJZCsrO1xyXG4gICAgICAgIGNvbnN0ICRzdWJqZWN0OiBXYXRjaFN1YmplY3QgPSB7XHJcbiAgICAgICAgICAgIGlkOiAkdGFibGVJZCxcclxuICAgICAgICAgICAgYWN0aXZlRmlsdGVyczogW10sXHJcbiAgICAgICAgICAgIGFjdGl2ZUZpbHRlcnNTdWJqZWN0OiBuZXcgQmVoYXZpb3JTdWJqZWN0PEZpbHRlcltdPihbXSksXHJcbiAgICAgICAgfTtcclxuICAgICAgICB0aGlzLndhdGNoU3ViamVjdHMucHVzaCgkc3ViamVjdCk7XHJcbiAgICAgICAgcmV0dXJuICR0YWJsZUlkO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBsaXN0ZW5Ub0FjdGl2ZUZpbHRlcnMoJGlkOiBudW1iZXIpOiBPYnNlcnZhYmxlPEZpbHRlcltdPiB7XHJcbiAgICAgICAgY29uc3QgJGF1eCA9IHRoaXMud2F0Y2hTdWJqZWN0cy5maW5kKFxyXG4gICAgICAgICAgICAoJGVsZW1lbnQpID0+ICRlbGVtZW50LmlkID09PSAkaWRcclxuICAgICAgICApO1xyXG4gICAgICAgIHJldHVybiAkYXV4LmFjdGl2ZUZpbHRlcnNTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBlbWl0QWN0aXZlRmlsdGVycygkaWQ6IG51bWJlciwgJGZpbHRlcnNWYWx1ZTogRmlsdGVyW10pOiB2b2lkIHtcclxuICAgICAgICBjb25zdCAkYXV4ID0gdGhpcy53YXRjaFN1YmplY3RzLmZpbmQoXHJcbiAgICAgICAgICAgICgkZWxlbWVudCkgPT4gJGVsZW1lbnQuaWQgPT09ICRpZFxyXG4gICAgICAgICk7XHJcbiAgICAgICAgJGZpbHRlcnNWYWx1ZS5mb3JFYWNoKCgkZmlsdGVyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0ICRmb3VuZEluZGV4ID0gJGF1eC5hY3RpdmVGaWx0ZXJzLmZpbmRJbmRleChcclxuICAgICAgICAgICAgICAgICgkZWxlbWVudCkgPT4gJGVsZW1lbnQubmFtZSA9PT0gJGZpbHRlci5uYW1lXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIGlmICgkZm91bmRJbmRleCA9PT0gLTEgJiYgJGZpbHRlci5hY3RpdmUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgIC8vIG5ldyBmaWx0ZXIgdG8gcHVzaFxyXG4gICAgICAgICAgICAgICAgJGF1eC5hY3RpdmVGaWx0ZXJzLnB1c2goJGZpbHRlcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJGZvdW5kSW5kZXggPiAtMSAmJiAkZmlsdGVyLmFjdGl2ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZpbHRlciB3YXMgaW4gdGhlIGFycmF5IGJ1dCBub3cgaGFzIGJlZW4gZGVhY3RpdmFkZWRcclxuICAgICAgICAgICAgICAgICRhdXguYWN0aXZlRmlsdGVycy5zcGxpY2UoJGZvdW5kSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgJGF1eC5hY3RpdmVGaWx0ZXJzU3ViamVjdC5uZXh0KCRhdXguYWN0aXZlRmlsdGVycyk7XHJcbiAgICB9XHJcbn1cclxuIl19