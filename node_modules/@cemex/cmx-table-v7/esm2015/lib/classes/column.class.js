/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Filter } from './filter.class';
export class Column {
    /**
     * @param {?} _name
     * @param {?} _columnKey
     * @param {?} _active
     * @param {?} _on
     * @param {?=} _nameValueKey
     * @param {?=} _filterValueKey
     * @param {?=} _hide
     */
    constructor(_name, _columnKey, _active, _on, _nameValueKey, _filterValueKey, _hide) {
        this.name = _name;
        this.columnKey = _columnKey;
        this.active = _active;
        this.on = _on;
        this.filters = [];
        this.nameValueKey = _nameValueKey;
        this.filterValueKey = _filterValueKey;
        this.hide = _hide;
    }
    /**
     * @return {?}
     */
    addDateFilter() {
        if (this.nameValueKey) {
            /** @type {?} */
            const dates = {
                min: new Date(),
                max: new Date()
            };
            /** @type {?} */
            const aux = new Filter(this.nameValueKey, dates, false, this.columnKey);
            this.dateFilter = aux;
        }
    }
    /**
     * @param {?} item
     * @param {?=} isDate
     * @return {?}
     */
    addFilter(item, isDate) {
        if (this.nameValueKey && this.filterValueKey) {
            /** @type {?} */
            const filter = this.filters.find((/**
             * @param {?} $element
             * @return {?}
             */
            ($element) => $element.value === item[this.filterValueKey]));
            if (filter === undefined) {
                /** @type {?} */
                const aux = new Filter(item[this.nameValueKey], item[this.filterValueKey], false, this.columnKey);
                this.filters.push(aux);
            }
        }
    }
    /**
     * @return {?}
     */
    getName() {
        return this.name;
    }
    /**
     * @return {?}
     */
    getKey() {
        return this.columnKey;
    }
    /**
     * @return {?}
     */
    getFilterNameKey() {
        return this.nameValueKey;
    }
    /**
     * @return {?}
     */
    getFilterValueKey() {
        return this.filterValueKey;
    }
    /**
     * @return {?}
     */
    getFilters() {
        return this.filters;
    }
    /**
     * @param {?} $filters
     * @return {?}
     */
    setFilters($filters) {
        this.filters = $filters;
    }
    /**
     * @return {?}
     */
    getDateFilter() {
        return this.dateFilter;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    getFilterFunction(filter) {
        if (this.filters.length > 0) {
            /** @type {?} */
            const aux = this.filters[0].value;
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericFilterFunction(filter);
            }
            else {
                return this.commonFilterFunction(filter);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateFilterFunction(filter);
        }
        return undefined;
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    commonFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return item[this.filterValueKey] === filter.value;
        });
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    dateFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            if (typeof filter.value.min === 'string') {
                filter.value.min = this.getDateObject(filter.value.min);
            }
            if (typeof filter.value.max === 'string') {
                filter.value.max = this.getDateObject(filter.value.max);
            }
            /** @type {?} */
            const min = filter.value.min.getTime();
            /** @type {?} */
            const max = filter.value.max.getTime();
            return (item[this.filterValueKey] !== undefined &&
                min <= item[this.filterValueKey].getTime() &&
                item[this.filterValueKey].getTime() <= max);
        });
    }
    /**
     * @param {?} filter
     * @return {?}
     */
    numericFilterFunction(filter) {
        return (/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            return item[this.filterValueKey] === filter.value;
            // return filter.value.min <= item[ this.filterValueKey ] &&
            // item[ this.filterValueKey ] <= filter.value.max;
        });
    }
    /**
     * @return {?}
     */
    clearFilters() {
        this.filters = [];
    }
    /**
     * @param {?} ASC
     * @return {?}
     */
    getSortFunction(ASC) {
        if (this.filters.length > 0) {
            /** @type {?} */
            const aux = this.filters[0].value;
            if (typeof aux === 'string' || aux instanceof String) {
                return this.stringSortFunction(ASC);
            }
            if (typeof aux === 'number' && isFinite(aux)) {
                return this.numericSortFunction(ASC);
            }
            if (typeof aux === 'boolean') {
                return this.booleanSortFunction(ASC);
            }
            // array value && typeof value === 'object' && value.constructor === Array
            // object value && typeof value === 'object' && value.constructor === Object
        }
        if (this.dateFilter) {
            return this.dateSortFunction(ASC);
        }
        return undefined;
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    stringSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                return 1;
            }
            /** @type {?} */
            const order = (ASC) ? 1 : -1;
            return order * a[this.filterValueKey].localeCompare(b[this.filterValueKey]);
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    numericSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] < b[this.filterValueKey]) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] > b[this.filterValueKey]) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    booleanSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                return 1;
            }
            if (a[this.filterValueKey] === true && b[this.filterValueKey] === false) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey] === false && b[this.filterValueKey] === true) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} ASC
     * @return {?}
     */
    dateSortFunction(ASC) {
        return (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            if (a[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            if (b[this.filterValueKey] === undefined) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey].getTime() < b[this.filterValueKey].getTime()) {
                /** @type {?} */
                const order = (ASC) ? -1 : 1;
                return order;
            }
            if (a[this.filterValueKey].getTime() > b[this.filterValueKey].getTime()) {
                /** @type {?} */
                const order = (ASC) ? 1 : -1;
                return order;
            }
            return 0;
        });
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    getDateObject(date) {
        /** @type {?} */
        const auxDate = date.replace(/-g/, '/');
        /** @type {?} */
        const bits = auxDate.split(/\D/);
        /** @type {?} */
        const month = parseInt(bits[1], 10) - 1;
        return new Date(bits[0], month, bits[2], bits[3], bits[4], bits[5]);
    }
}
if (false) {
    /** @type {?} */
    Column.prototype.active;
    /** @type {?} */
    Column.prototype.on;
    /** @type {?} */
    Column.prototype.hide;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.name;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.columnKey;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.filters;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.dateFilter;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.nameValueKey;
    /**
     * @type {?}
     * @private
     */
    Column.prototype.filterValueKey;
}
//# sourceMappingURL=data:application/json;base64,