/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Host } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { Filter } from '../../classes/filter.class';
import { WatcherService } from '../../services/watcher.service';
import { CmxTableComponent } from '../cmx-table/cmx-table.component';
export class CmxDatepickerFilterComponent {
    /**
     * @param {?} watcher
     * @param {?} parent
     */
    constructor(watcher, parent) {
        this.watcher = watcher;
        this.parent = parent;
        this.isRtl = false;
        this.activeFilter = new BehaviorSubject(false);
        this.isRtl = this.parent.rtl;
    }
    /**
     * @return {?}
     */
    listenToActiveFilter() {
        return this.activeFilter.asObservable();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    activateFilter($event) {
        this.filter.value = $event.value;
        this.filter.active = true;
        /** @type {?} */
        const $aux = [this.filter];
        this.activeFilter.next(true);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    }
    /**
     * @return {?}
     */
    removeFilter() {
        this.filter.active = false;
        /** @type {?} */
        const $aux = [this.filter];
        this.activeFilter.next(false);
        this.watcher.emitActiveFilters(this.parent.assignedId, $aux);
    }
}
CmxDatepickerFilterComponent.decorators = [
    { type: Component, args: [{
                selector: 'cmx-datepicker-filter',
                template: "<cmx-datepicker (select)=\"activateFilter( $event )\" (cancel)=\"removeFilter()\" [rtl]=\"isRtl\"></cmx-datepicker>",
                styles: [""]
            }] }
];
/** @nocollapse */
CmxDatepickerFilterComponent.ctorParameters = () => [
    { type: WatcherService },
    { type: CmxTableComponent, decorators: [{ type: Host }] }
];
CmxDatepickerFilterComponent.propDecorators = {
    filter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CmxDatepickerFilterComponent.prototype.filter;
    /** @type {?} */
    CmxDatepickerFilterComponent.prototype.isRtl;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.activeFilter;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.watcher;
    /**
     * @type {?}
     * @private
     */
    CmxDatepickerFilterComponent.prototype.parent;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BjZW1leC9jbXgtdGFibGUtdjcvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9jbXgtZGF0ZXBpY2tlci1maWx0ZXIvY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZELE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFFbkQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQU9yRSxNQUFNLE9BQU8sNEJBQTRCOzs7OztJQU1yQyxZQUFvQixPQUF1QixFQUFrQixNQUF5QjtRQUFsRSxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUFrQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUgvRSxVQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ2IsaUJBQVksR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFHakYsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztJQUNqQyxDQUFDOzs7O0lBRU0sb0JBQW9CO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1QyxDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxNQUFXO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDOztjQUNwQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7OztJQUVNLFlBQVk7UUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O2NBQ3JCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDOUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDOzs7WUFoQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLCtIQUFxRDs7YUFFeEQ7Ozs7WUFQUSxjQUFjO1lBQ2QsaUJBQWlCLHVCQWF3QixJQUFJOzs7cUJBTGpELEtBQUs7Ozs7SUFBTiw4Q0FBK0I7O0lBRS9CLDZDQUFxQjs7Ozs7SUFDckIsb0RBQXFGOzs7OztJQUV6RSwrQ0FBK0I7Ozs7O0lBQUUsOENBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgSG9zdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXIgfSBmcm9tICcuLi8uLi9jbGFzc2VzL2ZpbHRlci5jbGFzcyc7XHJcbmltcG9ydCB7IFdhdGNoZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvd2F0Y2hlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgQ214VGFibGVDb21wb25lbnQgfSBmcm9tICcuLi9jbXgtdGFibGUvY214LXRhYmxlLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnY214LWRhdGVwaWNrZXItZmlsdGVyJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9jbXgtZGF0ZXBpY2tlci1maWx0ZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vc2Nzcy9jbXgtdGFibGUvdjEvY214LWRhdGVwaWNrZXItZmlsdGVyLmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIENteERhdGVwaWNrZXJGaWx0ZXJDb21wb25lbnQge1xyXG4gICAgQElucHV0KCkgcHVibGljIGZpbHRlcjogRmlsdGVyO1xyXG5cclxuICAgIHB1YmxpYyBpc1J0bCA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBhY3RpdmVGaWx0ZXI6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4oZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgd2F0Y2hlcjogV2F0Y2hlclNlcnZpY2UsIEBIb3N0KCkgcHJpdmF0ZSBwYXJlbnQ6IENteFRhYmxlQ29tcG9uZW50KSB7XHJcbiAgICAgICAgdGhpcy5pc1J0bCA9IHRoaXMucGFyZW50LnJ0bDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbGlzdGVuVG9BY3RpdmVGaWx0ZXIoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlRmlsdGVyLmFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY3RpdmF0ZUZpbHRlcigkZXZlbnQ6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZmlsdGVyLnZhbHVlID0gJGV2ZW50LnZhbHVlO1xyXG4gICAgICAgIHRoaXMuZmlsdGVyLmFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgJGF1eCA9IFt0aGlzLmZpbHRlcl07XHJcbiAgICAgICAgdGhpcy5hY3RpdmVGaWx0ZXIubmV4dCh0cnVlKTtcclxuICAgICAgICB0aGlzLndhdGNoZXIuZW1pdEFjdGl2ZUZpbHRlcnModGhpcy5wYXJlbnQuYXNzaWduZWRJZCwgJGF1eCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUZpbHRlcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmZpbHRlci5hY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICBjb25zdCAkYXV4ID0gW3RoaXMuZmlsdGVyXTtcclxuICAgICAgICB0aGlzLmFjdGl2ZUZpbHRlci5uZXh0KGZhbHNlKTtcclxuICAgICAgICB0aGlzLndhdGNoZXIuZW1pdEFjdGl2ZUZpbHRlcnModGhpcy5wYXJlbnQuYXNzaWduZWRJZCwgJGF1eCk7XHJcbiAgICB9XHJcbn1cclxuIl19