import { OnDestroy, AfterContentInit, ElementRef, QueryList } from '@angular/core';
import { Table } from '../../classes/table.class';
import { CmxRowTemplateDirective } from '../../directives/cmx-row-template.directive';
import { CmxHeaderTemplateDirective } from '../../directives/cmx-header-template.directive';
import { CmxHeaderCellComponent } from '../cmx-header-cell/cmx-header-cell.component';
import { RowPlaceholderDirective } from '../../directives/cmx-row-placeholder.directive';
import { HeaderPlaceholderDirective } from '../../directives/cmx-header-placeholder.directive';
import { Filter } from '../../classes/filter.class';
import { WatcherService } from '../../services/watcher.service';
export interface Page {
    pageNumber: number;
    minIndex: number;
    maxIndex: number;
}
export declare class CmxTableComponent implements AfterContentInit, OnDestroy {
    private watcher;
    tableSource: Table;
    dataSource: any[];
    updateDataSource: any[];
    pageSize: number;
    rtl: boolean;
    cmxTableClass: boolean;
    rowDefinitions: QueryList<CmxRowTemplateDirective>;
    headerDefinitions: QueryList<CmxHeaderTemplateDirective>;
    headerCells: QueryList<CmxHeaderCellComponent>;
    rowPlaceholder: RowPlaceholderDirective;
    headerPlaceholder: HeaderPlaceholderDirective;
    cmxTableBodyElement: ElementRef;
    assignedId: number;
    pages: Page[];
    tableHasScroll: boolean;
    private _dataSource;
    private _table;
    private _pageSize;
    private _rtl;
    currentActivePage: number;
    private currentPageData;
    private viewportData;
    private activeFiltersCopy;
    private activeFiltersSubscription;
    private rowViewReferences;
    constructor(watcher: WatcherService);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * returns the items including filters applied in table
     * Author: Andres Santos
     */
    filteredItems(): any[];
    /**
     * returns the items including filters applied in current page
     * Author: Andres Santos
     */
    filteredItemsInPage(): any[];
    clearActiveFilters(): void;
    /**
     * returns the current active filters
     * Author: Antonio Vargas
     */
    getActiveFiltersCopy(): Filter[];
    /**
     * Triggers the filtering of data
     */
    triggerFilter($activeFilters: Filter[]): void;
    /**
     * @description Resets the table visualization.
     */
    reset(): void;
    filterData(activeFilters: Filter[]): any[];
    sortData(columnId: string, ASC: boolean): void;
    /**
     * @description Apply the current active filters in the table
     */
    applyCurrentFilters(): void;
    /**
     * @description Overwrite the active filters with new ones to apply
     * @param  $filters: array<Filter>
     */
    applyNewFilters($filters: Filter[]): void;
    setCurrentPage($currentPage: number): void;
    private initialize;
    private updateDataTable;
    private checkIfTableHasScroll;
    private renderHeader;
    private renderRows;
    private updateRowsContext;
    private findIntersection;
    /**
     * @description Calculates the number of pages given the array of data and
     * determines the index of the data source for each page.
     */
    private calculateNumberOfPages;
    private setPageData;
}
